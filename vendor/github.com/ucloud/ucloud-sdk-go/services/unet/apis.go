// Code is generated by ucloud-model, DO NOT EDIT IT.

package unet

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// UNet API Schema

// AllocateEIPRequest is request schema for AllocateEIP action
type AllocateEIPRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。
	// Region *string `required:"true"`

	// 弹性IP的外网带宽, 单位为Mbps. 共享带宽模式必须指定0M带宽, 非共享带宽模式必须指定非0Mbps带宽. 各地域非共享带宽的带宽范围如下： 流量计费[1-300]，带宽计费[1-10000]
	Bandwidth *int `required:"true"`

	// 付费方式, 枚举值为: Year, 按年付费; Month, 按月付费; Dynamic, 按时付费，默认为按月付费。
	ChargeType *string `required:"false"`

	// 购买EIP数量，默认值为1
	Count *int `required:"false"`

	// 代金券ID, 默认不使用
	CouponId *string `required:"false"`

	// 弹性IP的名称, 默认为 "EIP"
	Name *string `required:"false"`

	// 弹性IP线路，枚举值：国际线路， International；BGP线路：Bgp；精品BGP：BGPPro。使用BGP线路的地域：北京二、上海金融云、上海二、广州等，其他地域均使用国际线路。使用BGPPro线路的地域：香港
	OperatorName *string `required:"true"`

	// 弹性IP的计费模式. 枚举值: "Traffic", 流量计费; "Bandwidth", 带宽计费; "ShareBandwidth",共享带宽模式. 默认为 "Bandwidth".“PostAccurateBandwidth”：带宽后付费模式
	PayMode *string `required:"false"`

	// 购买的时长, 默认: 1
	Quantity *int `required:"false"`

	// 弹性IP的备注, 默认为空
	Remark *string `required:"false"`

	// 绑定的共享带宽Id,仅当PayMode为ShareBandwidth时有效
	ShareBandwidthId *string `required:"false"`

	// 业务组名称, 默认为 "Default"
	Tag *string `required:"false"`
}

// AllocateEIPResponse is response schema for AllocateEIP action
type AllocateEIPResponse struct {
	response.CommonBase

	// 申请到的EIP资源详情 参见 UnetAllocateEIPSet
	EIPSet []UnetAllocateEIPSet
}

// NewAllocateEIPRequest will create request of AllocateEIP action.
func (c *UNetClient) NewAllocateEIPRequest() *AllocateEIPRequest {
	req := &AllocateEIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: AllocateEIP

根据提供信息, 申请弹性IP
*/
func (c *UNetClient) AllocateEIP(req *AllocateEIPRequest) (*AllocateEIPResponse, error) {
	var err error
	var res AllocateEIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("AllocateEIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// AllocateShareBandwidthRequest is request schema for AllocateShareBandwidth action
type AllocateShareBandwidthRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 付费方式:Year 按年,Month 按月,Dynamic 按时;
	ChargeType *string `required:"true"`

	// 共享带宽类型，IPv4或者IPv6，不传默认IPv4
	IPVersion *string `required:"false"`

	// 共享带宽名字
	Name *string `required:"true"`

	// 共享带宽线路：BGP 国内多线,International 国际多线,ChinaMobile 移动单线,Unicom 联通单线,Telecom 电信单线,BGPPro 精品BGP（仅香港支持精品BGP）
	OperatorName *string `required:"false"`

	// 购买时长
	Quantity *int `required:"false"`

	// 共享带宽值
	ShareBandwidth *int `required:"true"`

	// 【该字段已废弃，请谨慎使用】
	ShareBandwidthGuarantee *int `required:"false" deprecated:"true"`
}

// AllocateShareBandwidthResponse is response schema for AllocateShareBandwidth action
type AllocateShareBandwidthResponse struct {
	response.CommonBase

	// 共享带宽资源Id
	ShareBandwidthId string
}

// NewAllocateShareBandwidthRequest will create request of AllocateShareBandwidth action.
func (c *UNetClient) NewAllocateShareBandwidthRequest() *AllocateShareBandwidthRequest {
	req := &AllocateShareBandwidthRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: AllocateShareBandwidth

开通共享带宽
*/
func (c *UNetClient) AllocateShareBandwidth(req *AllocateShareBandwidthRequest) (*AllocateShareBandwidthResponse, error) {
	var err error
	var res AllocateShareBandwidthResponse

	reqCopier := *req

	err = c.Client.InvokeAction("AllocateShareBandwidth", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// AssociateEIPWithShareBandwidthRequest is request schema for AssociateEIPWithShareBandwidth action
type AssociateEIPWithShareBandwidthRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。
	// Region *string `required:"true"`

	// 要加入共享带宽的EIP的资源Id
	EIPIds []string `required:"true"`

	// 共享带宽类型，IPv4或者IPv6，不传默认IPv4
	IPVersion *string `required:"false"`

	// 共享带宽ID
	ShareBandwidthId *string `required:"true"`
}

// AssociateEIPWithShareBandwidthResponse is response schema for AssociateEIPWithShareBandwidth action
type AssociateEIPWithShareBandwidthResponse struct {
	response.CommonBase
}

// NewAssociateEIPWithShareBandwidthRequest will create request of AssociateEIPWithShareBandwidth action.
func (c *UNetClient) NewAssociateEIPWithShareBandwidthRequest() *AssociateEIPWithShareBandwidthRequest {
	req := &AssociateEIPWithShareBandwidthRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: AssociateEIPWithShareBandwidth

将EIP加入共享带宽
*/
func (c *UNetClient) AssociateEIPWithShareBandwidth(req *AssociateEIPWithShareBandwidthRequest) (*AssociateEIPWithShareBandwidthResponse, error) {
	var err error
	var res AssociateEIPWithShareBandwidthResponse

	reqCopier := *req

	err = c.Client.InvokeAction("AssociateEIPWithShareBandwidth", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// BindEIPRequest is request schema for BindEIP action
type BindEIPRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写
	// ProjectId *string `required:"false"`

	// [公共参数] 地域
	// Region *string `required:"true"`

	// 弹性IP的资源Id
	EIPId *string `required:"true"`

	// EIP与内网IP进行绑定时需要传入UNI下未绑定过EIP的内网IP
	PrivateIP *string `required:"false"`

	// 弹性IP请求绑定的资源ID
	ResourceId *string `required:"true"`

	// 弹性IP请求绑定的资源类型, 枚举值为: uhost: 云主机; ulb, 负载均衡器 upm: 物理机; hadoophost: 大数据集群;fortresshost：堡垒机；udockhost：容器；udhost：私有专区主机；natgw：natgw；udb：udb；vpngw：ipsec vpn；ucdr：云灾备；dbaudit：数据库审计；uni：虚拟网卡；cube，Cube容器。如果EIP为普通带宽计费，且带宽值高于2G，则只允许绑定在快杰型云主机和ULB
	ResourceType *string `required:"true"`
}

// BindEIPResponse is response schema for BindEIP action
type BindEIPResponse struct {
	response.CommonBase
}

// NewBindEIPRequest will create request of BindEIP action.
func (c *UNetClient) NewBindEIPRequest() *BindEIPRequest {
	req := &BindEIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: BindEIP

将尚未使用的弹性IP绑定到指定的资源
*/
func (c *UNetClient) BindEIP(req *BindEIPRequest) (*BindEIPResponse, error) {
	var err error
	var res BindEIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("BindEIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateBandwidthPackageRequest is request schema for CreateBandwidthPackage action
type CreateBandwidthPackageRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 带宽大小(单位Mbps), 取值范围[2,800] (最大值受地域限制)
	Bandwidth *int `required:"true"`

	// 代金券ID
	CouponId *string `required:"false"`

	// 所绑定弹性IP的资源ID
	EIPId *string `required:"true"`

	// 生效时间, 格式为 Unix timestamp, 默认为立即开通
	EnableTime *int `required:"false"`

	// 带宽包有效时长, 取值范围为大于0的整数, 即该带宽包在EnableTime到 EnableTime+TimeRange时间段内生效
	TimeRange *int `required:"true"`
}

// CreateBandwidthPackageResponse is response schema for CreateBandwidthPackage action
type CreateBandwidthPackageResponse struct {
	response.CommonBase

	// 所创建带宽包的资源ID
	BandwidthPackageId string
}

// NewCreateBandwidthPackageRequest will create request of CreateBandwidthPackage action.
func (c *UNetClient) NewCreateBandwidthPackageRequest() *CreateBandwidthPackageRequest {
	req := &CreateBandwidthPackageRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateBandwidthPackage

为非共享带宽模式下, 已绑定资源实例的带宽计费弹性IP附加临时带宽包
*/
func (c *UNetClient) CreateBandwidthPackage(req *CreateBandwidthPackageRequest) (*CreateBandwidthPackageResponse, error) {
	var err error
	var res CreateBandwidthPackageResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateBandwidthPackage", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateFirewallRequest is request schema for CreateFirewall action
type CreateFirewallRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写
	// ProjectId *string `required:"false"`

	// [公共参数] 地域
	// Region *string `required:"true"`

	// 防火墙名称
	Name *string `required:"true"`

	// 防火墙描述，默认为空
	Remark *string `required:"false"`

	// 防火墙规则，例如：TCP|22|192.168.1.1/22|DROP|LOW|禁用22端口，第一个参数代表协议：第二个参数代表端口号，第三个参数为ip，第四个参数为ACCEPT（接受）和DROP（拒绝），第五个参数优先级：HIGH（高），MEDIUM（中），LOW（低），第六个参数为该条规则的自定义备注,bj1不支持添加备注
	Rule []string `required:"true"`

	// 防火墙业务组，默认为Default
	Tag *string `required:"false"`
}

// CreateFirewallResponse is response schema for CreateFirewall action
type CreateFirewallResponse struct {
	response.CommonBase

	// 防火墙ID
	FWId string
}

// NewCreateFirewallRequest will create request of CreateFirewall action.
func (c *UNetClient) NewCreateFirewallRequest() *CreateFirewallRequest {
	req := &CreateFirewallRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateFirewall

创建防火墙
*/
func (c *UNetClient) CreateFirewall(req *CreateFirewallRequest) (*CreateFirewallResponse, error) {
	var err error
	var res CreateFirewallResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateFirewall", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteBandwidthPackageRequest is request schema for DeleteBandwidthPackage action
type DeleteBandwidthPackageRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 带宽包资源ID
	BandwidthPackageId *string `required:"true"`
}

// DeleteBandwidthPackageResponse is response schema for DeleteBandwidthPackage action
type DeleteBandwidthPackageResponse struct {
	response.CommonBase
}

// NewDeleteBandwidthPackageRequest will create request of DeleteBandwidthPackage action.
func (c *UNetClient) NewDeleteBandwidthPackageRequest() *DeleteBandwidthPackageRequest {
	req := &DeleteBandwidthPackageRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteBandwidthPackage

删除弹性IP上已附加带宽包
*/
func (c *UNetClient) DeleteBandwidthPackage(req *DeleteBandwidthPackageRequest) (*DeleteBandwidthPackageResponse, error) {
	var err error
	var res DeleteBandwidthPackageResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteBandwidthPackage", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteFirewallRequest is request schema for DeleteFirewall action
type DeleteFirewallRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 防火墙资源ID
	FWId *string `required:"true"`
}

// DeleteFirewallResponse is response schema for DeleteFirewall action
type DeleteFirewallResponse struct {
	response.CommonBase
}

// NewDeleteFirewallRequest will create request of DeleteFirewall action.
func (c *UNetClient) NewDeleteFirewallRequest() *DeleteFirewallRequest {
	req := &DeleteFirewallRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteFirewall

删除防火墙
*/
func (c *UNetClient) DeleteFirewall(req *DeleteFirewallRequest) (*DeleteFirewallResponse, error) {
	var err error
	var res DeleteFirewallResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteFirewall", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeBandwidthPackageRequest is request schema for DescribeBandwidthPackage action
type DescribeBandwidthPackageRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 返回数据分页值, 取值范围为 [0,10000000] 之间的整数, 默认为20
	Limit *int `required:"false"`

	// 返回数据偏移量, 默认为0
	Offset *int `required:"false"`
}

// DescribeBandwidthPackageResponse is response schema for DescribeBandwidthPackage action
type DescribeBandwidthPackageResponse struct {
	response.CommonBase

	// 带宽包详细信息, 参见 UnetBandwidthPackageSet
	DataSets []UnetBandwidthPackageSet

	// 满足条件的带宽包总数
	TotalCount int
}

// NewDescribeBandwidthPackageRequest will create request of DescribeBandwidthPackage action.
func (c *UNetClient) NewDescribeBandwidthPackageRequest() *DescribeBandwidthPackageRequest {
	req := &DescribeBandwidthPackageRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeBandwidthPackage

获取某地域下的带宽包信息
*/
func (c *UNetClient) DescribeBandwidthPackage(req *DescribeBandwidthPackageRequest) (*DescribeBandwidthPackageResponse, error) {
	var err error
	var res DescribeBandwidthPackageResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeBandwidthPackage", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeBandwidthUsageRequest is request schema for DescribeBandwidthUsage action
type DescribeBandwidthUsageRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 弹性IP的资源Id. 如果为空, 则返回当前 Region中符合条件的所有EIP的带宽用量, n为自然数
	EIPIds []string `required:"false"`

	// 返回数据分页值, 取值范围为 [0,10000000] 之间的整数, 默认为20
	Limit *int `required:"false"`

	// 返回数据偏移量, 默认为0
	OffSet *int `required:"false"`
}

// DescribeBandwidthUsageResponse is response schema for DescribeBandwidthUsage action
type DescribeBandwidthUsageResponse struct {
	response.CommonBase

	// 单个弹性IP的带宽用量详细信息, 详见 UnetBandwidthUsageEIPSet, 如没有弹性IP资源则没有该返回值。
	EIPSet []UnetBandwidthUsageEIPSet

	// EIPSet中的元素个数
	TotalCount int
}

// NewDescribeBandwidthUsageRequest will create request of DescribeBandwidthUsage action.
func (c *UNetClient) NewDescribeBandwidthUsageRequest() *DescribeBandwidthUsageRequest {
	req := &DescribeBandwidthUsageRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeBandwidthUsage

获取带宽用量信息
*/
func (c *UNetClient) DescribeBandwidthUsage(req *DescribeBandwidthUsageRequest) (*DescribeBandwidthUsageResponse, error) {
	var err error
	var res DescribeBandwidthUsageResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeBandwidthUsage", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeEIPRequest is request schema for DescribeEIP action
type DescribeEIPRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写
	// ProjectId *string `required:"false"`

	// [公共参数] 地域
	// Region *string `required:"true"`

	// 弹性IP的资源ID如果为空, 则返回当前 Region中符合条件的的所有EIP
	EIPIds []string `required:"false"`

	// IP地址，支持通过ip查询，如果ip与EIP都传，会取并集查询
	IPs []string `required:"false"`

	// 数据分页值, 默认为20
	Limit *int `required:"false"`

	// 数据偏移量, 默认为0
	Offset *int `required:"false"`
}

// DescribeEIPResponse is response schema for DescribeEIP action
type DescribeEIPResponse struct {
	response.CommonBase

	// 弹性IP列表, 每项参数详见 UnetEIPSet
	EIPSet []UnetEIPSet

	// 满足条件的弹性IP带宽总和, 单位Mbps
	TotalBandwidth int

	// 满足条件的弹性IP总数
	TotalCount int

	// 未绑定的弹性IP总数
	UnbindCount int
}

// NewDescribeEIPRequest will create request of DescribeEIP action.
func (c *UNetClient) NewDescribeEIPRequest() *DescribeEIPRequest {
	req := &DescribeEIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeEIP

获取弹性IP信息
*/
func (c *UNetClient) DescribeEIP(req *DescribeEIPRequest) (*DescribeEIPResponse, error) {
	var err error
	var res DescribeEIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeEIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeFirewallRequest is request schema for DescribeFirewall action
type DescribeFirewallRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写
	// ProjectId *string `required:"false"`

	// [公共参数] 地域
	// Region *string `required:"true"`

	// 防火墙ID，默认为返回所有防火墙
	FWId *string `required:"false"`

	// 返回数据长度，默认为20，最大10000000
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0
	Offset *int `required:"false"`

	// 绑定防火墙组的资源ID。
	ResourceId *string `required:"false"`

	// 绑定防火墙的资源类型，仅获取资源对应防火墙信息时需要。枚举值为："unatgw"，NAT网关； "uhost"，云主机； "upm"，物理云主机； "hadoophost"，hadoop节点； "fortresshost"，堡垒机； "udhost"，私有专区主机；"udockhost"，容器；"dbaudit"，数据库审计；”uni“，虚拟网卡；“cube”，Cube容器实例；“ulb”，负载均衡实例。
	ResourceType *string `required:"false"`
}

// DescribeFirewallResponse is response schema for DescribeFirewall action
type DescribeFirewallResponse struct {
	response.CommonBase

	// 获取的防火墙组详细信息 参见 FirewallDataSet
	DataSet []FirewallDataSet

	// 防火墙资源数量
	TotalCount int
}

// NewDescribeFirewallRequest will create request of DescribeFirewall action.
func (c *UNetClient) NewDescribeFirewallRequest() *DescribeFirewallRequest {
	req := &DescribeFirewallRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeFirewall

获取防火墙组信息
*/
func (c *UNetClient) DescribeFirewall(req *DescribeFirewallRequest) (*DescribeFirewallResponse, error) {
	var err error
	var res DescribeFirewallResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeFirewall", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeFirewallResourceRequest is request schema for DescribeFirewallResource action
type DescribeFirewallResourceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 防火墙ID
	FWId *string `required:"true"`

	// 返回数据长度，默认为20，最大1000
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0
	Offset *int `required:"false"`
}

// DescribeFirewallResourceResponse is response schema for DescribeFirewallResource action
type DescribeFirewallResourceResponse struct {
	response.CommonBase

	// 资源列表，见 ResourceSet
	ResourceSet []ResourceSet

	// 绑定资源总数
	TotalCount int
}

// NewDescribeFirewallResourceRequest will create request of DescribeFirewallResource action.
func (c *UNetClient) NewDescribeFirewallResourceRequest() *DescribeFirewallResourceRequest {
	req := &DescribeFirewallResourceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeFirewallResource

获取防火墙组所绑定资源的外网IP
*/
func (c *UNetClient) DescribeFirewallResource(req *DescribeFirewallResourceRequest) (*DescribeFirewallResourceResponse, error) {
	var err error
	var res DescribeFirewallResourceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeFirewallResource", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeShareBandwidthRequest is request schema for DescribeShareBandwidth action
type DescribeShareBandwidthRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 需要返回的共享带宽Id
	ShareBandwidthIds []string `required:"false"`
}

// DescribeShareBandwidthResponse is response schema for DescribeShareBandwidth action
type DescribeShareBandwidthResponse struct {
	response.CommonBase

	// 共享带宽信息组 参见 UnetShareBandwidthSet
	DataSet []UnetShareBandwidthSet

	// 符合条件的共享带宽总数，大于等于返回DataSet长度
	TotalCount int
}

// NewDescribeShareBandwidthRequest will create request of DescribeShareBandwidth action.
func (c *UNetClient) NewDescribeShareBandwidthRequest() *DescribeShareBandwidthRequest {
	req := &DescribeShareBandwidthRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeShareBandwidth

获取共享带宽信息
*/
func (c *UNetClient) DescribeShareBandwidth(req *DescribeShareBandwidthRequest) (*DescribeShareBandwidthResponse, error) {
	var err error
	var res DescribeShareBandwidthResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeShareBandwidth", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeShareBandwidthPriceRequest is request schema for DescribeShareBandwidthPrice action
type DescribeShareBandwidthPriceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 付费方式, 预付费:Year 按年,Month 按月,Dynamic 按需;
	ChargeType *string `required:"true"`

	// 香港地域支持：BGPPro和International。其他地域无需填写该字段
	OperatorName *string `required:"false"`

	// 购买数量
	Quantity *int `required:"false"`

	// 共享带宽值
	ShareBandwidth *int `required:"true"`
}

// DescribeShareBandwidthPriceResponse is response schema for DescribeShareBandwidthPrice action
type DescribeShareBandwidthPriceResponse struct {
	response.CommonBase

	// 共享带宽总价格
	TotalPrice int
}

// NewDescribeShareBandwidthPriceRequest will create request of DescribeShareBandwidthPrice action.
func (c *UNetClient) NewDescribeShareBandwidthPriceRequest() *DescribeShareBandwidthPriceRequest {
	req := &DescribeShareBandwidthPriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeShareBandwidthPrice

获取共享带宽价格
*/
func (c *UNetClient) DescribeShareBandwidthPrice(req *DescribeShareBandwidthPriceRequest) (*DescribeShareBandwidthPriceResponse, error) {
	var err error
	var res DescribeShareBandwidthPriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeShareBandwidthPrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeShareBandwidthUpdatePriceRequest is request schema for DescribeShareBandwidthUpdatePrice action
type DescribeShareBandwidthUpdatePriceRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 共享带宽值
	ShareBandwidth *int `required:"true"`

	// 共享带宽Id
	ShareBandwidthId *string `required:"true"`
}

// DescribeShareBandwidthUpdatePriceResponse is response schema for DescribeShareBandwidthUpdatePrice action
type DescribeShareBandwidthUpdatePriceResponse struct {
	response.CommonBase

	// 共享带宽升降级价格
	Price float64
}

// NewDescribeShareBandwidthUpdatePriceRequest will create request of DescribeShareBandwidthUpdatePrice action.
func (c *UNetClient) NewDescribeShareBandwidthUpdatePriceRequest() *DescribeShareBandwidthUpdatePriceRequest {
	req := &DescribeShareBandwidthUpdatePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeShareBandwidthUpdatePrice

获取共享带宽升级价格
*/
func (c *UNetClient) DescribeShareBandwidthUpdatePrice(req *DescribeShareBandwidthUpdatePriceRequest) (*DescribeShareBandwidthUpdatePriceResponse, error) {
	var err error
	var res DescribeShareBandwidthUpdatePriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeShareBandwidthUpdatePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DisassociateEIPWithShareBandwidthRequest is request schema for DisassociateEIPWithShareBandwidth action
type DisassociateEIPWithShareBandwidthRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 移出共享带宽后，EIP的外网带宽, 单位为Mbps. 各地域带宽范围如下：  流量计费[1-200],带宽计费[1-800]
	Bandwidth *int `required:"true"`

	// EIP的资源Id；默认移出该共享带宽下所有的EIP
	EIPIds []string `required:"false"`

	// 共享带宽类型，IPv4或者IPv6，不传默认IPv4
	IPVersion *string `required:"false"`

	// 移出共享带宽后，EIP的计费模式. 枚举值: "Traffic", 流量计费; "Bandwidth", 带宽计费;  默认为 "Bandwidth".
	PayMode *string `required:"false"`

	// 共享带宽ID
	ShareBandwidthId *string `required:"true"`
}

// DisassociateEIPWithShareBandwidthResponse is response schema for DisassociateEIPWithShareBandwidth action
type DisassociateEIPWithShareBandwidthResponse struct {
	response.CommonBase
}

// NewDisassociateEIPWithShareBandwidthRequest will create request of DisassociateEIPWithShareBandwidth action.
func (c *UNetClient) NewDisassociateEIPWithShareBandwidthRequest() *DisassociateEIPWithShareBandwidthRequest {
	req := &DisassociateEIPWithShareBandwidthRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DisassociateEIPWithShareBandwidth

将EIP移出共享带宽
*/
func (c *UNetClient) DisassociateEIPWithShareBandwidth(req *DisassociateEIPWithShareBandwidthRequest) (*DisassociateEIPWithShareBandwidthResponse, error) {
	var err error
	var res DisassociateEIPWithShareBandwidthResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DisassociateEIPWithShareBandwidth", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DisassociateFirewallRequest is request schema for DisassociateFirewall action
type DisassociateFirewallRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 防火墙ID
	FWId *string `required:"true"`

	// 需要解绑的资源ID
	ResourceId *string `required:"true"`

	// 资源类型：ULB 表示负载均衡
	ResourceType *string `required:"true"`
}

// DisassociateFirewallResponse is response schema for DisassociateFirewall action
type DisassociateFirewallResponse struct {
	response.CommonBase
}

// NewDisassociateFirewallRequest will create request of DisassociateFirewall action.
func (c *UNetClient) NewDisassociateFirewallRequest() *DisassociateFirewallRequest {
	req := &DisassociateFirewallRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DisassociateFirewall

解绑资源上的防火墙
*/
func (c *UNetClient) DisassociateFirewall(req *DisassociateFirewallRequest) (*DisassociateFirewallResponse, error) {
	var err error
	var res DisassociateFirewallResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DisassociateFirewall", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetEIPExclusiveUTPInfoRequest is request schema for GetEIPExclusiveUTPInfo action
type GetEIPExclusiveUTPInfoRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// EIP资源Id
	EIPId *string `required:"true"`
}

// GetEIPExclusiveUTPInfoResponse is response schema for GetEIPExclusiveUTPInfo action
type GetEIPExclusiveUTPInfoResponse struct {
	response.CommonBase

	// EIP专属流量包信息
	EIPExclusiveInfo EIPExclusiveInfo
}

// NewGetEIPExclusiveUTPInfoRequest will create request of GetEIPExclusiveUTPInfo action.
func (c *UNetClient) NewGetEIPExclusiveUTPInfoRequest() *GetEIPExclusiveUTPInfoRequest {
	req := &GetEIPExclusiveUTPInfoRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetEIPExclusiveUTPInfo

获取EIP专属流量包信息
*/
func (c *UNetClient) GetEIPExclusiveUTPInfo(req *GetEIPExclusiveUTPInfoRequest) (*GetEIPExclusiveUTPInfoResponse, error) {
	var err error
	var res GetEIPExclusiveUTPInfoResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetEIPExclusiveUTPInfo", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetEIPPayModeRequest is request schema for GetEIPPayMode action
type GetEIPPayModeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 弹性IP的资源Id
	EIPId []string `required:"true"`
}

// GetEIPPayModeResponse is response schema for GetEIPPayMode action
type GetEIPPayModeResponse struct {
	response.CommonBase

	// EIP的计费模式, 参见 EIPPayModeSet
	EIPPayMode []EIPPayModeSet
}

// NewGetEIPPayModeRequest will create request of GetEIPPayMode action.
func (c *UNetClient) NewGetEIPPayModeRequest() *GetEIPPayModeRequest {
	req := &GetEIPPayModeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetEIPPayMode

获取弹性IP计费模式
*/
func (c *UNetClient) GetEIPPayMode(req *GetEIPPayModeRequest) (*GetEIPPayModeResponse, error) {
	var err error
	var res GetEIPPayModeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetEIPPayMode", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetEIPPriceRequest is request schema for GetEIPPrice action
type GetEIPPriceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 弹性IP的外网带宽, 单位为Mbps, 范围 [0-800]
	Bandwidth *int `required:"true"`

	// 付费方式, 枚举值为: Year, 按年付费; Month, 按月付费; Dynamic, 按时付费; 默认为获取三种价格
	ChargeType *string `required:"false"`

	// 弹性IP的线路如下: 国际: International BGP: Bgp 各地域允许的线路参数如下: cn-sh1: Bgp cn-sh2: Bgp cn-gd: Bgp cn-bj1: Bgp cn-bj2: Bgp hk: International us-ca: International th-bkk: International kr-seoul:International us-ws:International ge-fra:International sg:International tw-kh:International.其他海外线路均为 International,泉州为移动单线cn-qz:ChinaMobile
	OperatorName *string `required:"true"`

	// 弹性IP计费方式r. 枚举值为: Traffic, 流量计费; Bandwidth, 带宽计费; "ShareBandwidth",共享带宽模式. 默认为Bandwidth
	PayMode *string `required:"false"`

	// 购买时长。默认: 1。按小时购买(Dynamic)时无需此参数。 月付时，此参数传0，代表了购买至月末
	Quantity *int `required:"false"`
}

// GetEIPPriceResponse is response schema for GetEIPPrice action
type GetEIPPriceResponse struct {
	response.CommonBase

	// 弹性IP价格详情 详情见 EIPPriceDetailSet
	PriceSet []EIPPriceDetailSet
}

// NewGetEIPPriceRequest will create request of GetEIPPrice action.
func (c *UNetClient) NewGetEIPPriceRequest() *GetEIPPriceRequest {
	req := &GetEIPPriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetEIPPrice

获取弹性IP价格
*/
func (c *UNetClient) GetEIPPrice(req *GetEIPPriceRequest) (*GetEIPPriceResponse, error) {
	var err error
	var res GetEIPPriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetEIPPrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetEIPUpgradePriceRequest is request schema for GetEIPUpgradePrice action
type GetEIPUpgradePriceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 弹性IP的外网带宽, 单位为Mbps, 范围 [1-800]
	Bandwidth *int `required:"true"`

	// 弹性IP的资源ID
	EIPId *string `required:"true"`
}

// GetEIPUpgradePriceResponse is response schema for GetEIPUpgradePrice action
type GetEIPUpgradePriceResponse struct {
	response.CommonBase

	// 调整带宽后的EIP价格, 单位为"元", 如需退费此处为负值
	Price float64
}

// NewGetEIPUpgradePriceRequest will create request of GetEIPUpgradePrice action.
func (c *UNetClient) NewGetEIPUpgradePriceRequest() *GetEIPUpgradePriceRequest {
	req := &GetEIPUpgradePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetEIPUpgradePrice

获取弹性IP带宽改动价格
*/
func (c *UNetClient) GetEIPUpgradePrice(req *GetEIPUpgradePriceRequest) (*GetEIPUpgradePriceResponse, error) {
	var err error
	var res GetEIPUpgradePriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetEIPUpgradePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetThroughputDailyBillingInfoRequest is request schema for GetThroughputDailyBillingInfo action
type GetThroughputDailyBillingInfoRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// EIP的资源ID
	EIPId *string `required:"true"`

	// 查询结束时间时间戳
	EndTime *int `required:"true"`

	// 查询开始时间时间戳
	StartTime *int `required:"true"`
}

// GetThroughputDailyBillingInfoResponse is response schema for GetThroughputDailyBillingInfo action
type GetThroughputDailyBillingInfoResponse struct {
	response.CommonBase

	// 资源ID
	EIPId string

	// EIP流量计费信息，详见模型ThroughputDailyBillingInfo
	Stats []ThroughputDailyBillingInfo

	// 计费总流量
	TotalOut int
}

// NewGetThroughputDailyBillingInfoRequest will create request of GetThroughputDailyBillingInfo action.
func (c *UNetClient) NewGetThroughputDailyBillingInfoRequest() *GetThroughputDailyBillingInfoRequest {
	req := &GetThroughputDailyBillingInfoRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetThroughputDailyBillingInfo

获取流量计费EIP每日流量计费信息
*/
func (c *UNetClient) GetThroughputDailyBillingInfo(req *GetThroughputDailyBillingInfoRequest) (*GetThroughputDailyBillingInfoResponse, error) {
	var err error
	var res GetThroughputDailyBillingInfoResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetThroughputDailyBillingInfo", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GrantFirewallRequest is request schema for GrantFirewall action
type GrantFirewallRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 防火墙资源ID
	FWId *string `required:"true"`

	// 所应用资源ID
	ResourceId *string `required:"true"`

	// 绑定防火墙的资源类型，枚举值为："unatgw"，NAT网关； "uhost"，云主机； "upm"，物理云主机； "hadoophost"，hadoop节点； "fortresshost"，堡垒机； "udhost"，私有专区主机；"udockhost"，容器；"dbaudit"，数据库审计；”uni“，虚拟网卡；“cube”，Cube容器实例；“ulb”，负载均衡实例。
	ResourceType *string `required:"true"`
}

// GrantFirewallResponse is response schema for GrantFirewall action
type GrantFirewallResponse struct {
	response.CommonBase
}

// NewGrantFirewallRequest will create request of GrantFirewall action.
func (c *UNetClient) NewGrantFirewallRequest() *GrantFirewallRequest {
	req := &GrantFirewallRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GrantFirewall

将防火墙应用到资源上
*/
func (c *UNetClient) GrantFirewall(req *GrantFirewallRequest) (*GrantFirewallResponse, error) {
	var err error
	var res GrantFirewallResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GrantFirewall", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyEIPBandwidthRequest is request schema for ModifyEIPBandwidth action
type ModifyEIPBandwidthRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 弹性IP的外网带宽, 单位为Mbps. 各地域的带宽值范围如下：流量计费[1-200],带宽计费[1-800]
	Bandwidth *int `required:"true"`

	// 弹性IP的资源ID
	EIPId *string `required:"true"`
}

// ModifyEIPBandwidthResponse is response schema for ModifyEIPBandwidth action
type ModifyEIPBandwidthResponse struct {
	response.CommonBase
}

// NewModifyEIPBandwidthRequest will create request of ModifyEIPBandwidth action.
func (c *UNetClient) NewModifyEIPBandwidthRequest() *ModifyEIPBandwidthRequest {
	req := &ModifyEIPBandwidthRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyEIPBandwidth

调整弹性IP的外网带宽
*/
func (c *UNetClient) ModifyEIPBandwidth(req *ModifyEIPBandwidthRequest) (*ModifyEIPBandwidthResponse, error) {
	var err error
	var res ModifyEIPBandwidthResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyEIPBandwidth", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyEIPWeightRequest is request schema for ModifyEIPWeight action
type ModifyEIPWeightRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 弹性IP的资源ID
	EIPId *string `required:"true"`

	// 外网出口权重, 范围[0-100] 取值为0时, 该弹性IP不会被使用. 取值为100时, 同主机下只会使用这个弹性IP，其他弹性IP不会被使用 请勿将多个绑定在同一资源的弹性IP设置为相同权重
	Weight *int `required:"true"`
}

// ModifyEIPWeightResponse is response schema for ModifyEIPWeight action
type ModifyEIPWeightResponse struct {
	response.CommonBase
}

// NewModifyEIPWeightRequest will create request of ModifyEIPWeight action.
func (c *UNetClient) NewModifyEIPWeightRequest() *ModifyEIPWeightRequest {
	req := &ModifyEIPWeightRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyEIPWeight

修改弹性IP的外网出口权重
*/
func (c *UNetClient) ModifyEIPWeight(req *ModifyEIPWeightRequest) (*ModifyEIPWeightResponse, error) {
	var err error
	var res ModifyEIPWeightResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyEIPWeight", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ReleaseEIPRequest is request schema for ReleaseEIP action
type ReleaseEIPRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 弹性IP的资源ID
	EIPId *string `required:"true"`
}

// ReleaseEIPResponse is response schema for ReleaseEIP action
type ReleaseEIPResponse struct {
	response.CommonBase
}

// NewReleaseEIPRequest will create request of ReleaseEIP action.
func (c *UNetClient) NewReleaseEIPRequest() *ReleaseEIPRequest {
	req := &ReleaseEIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ReleaseEIP

释放弹性IP资源, 所释放弹性IP必须为非绑定状态.
*/
func (c *UNetClient) ReleaseEIP(req *ReleaseEIPRequest) (*ReleaseEIPResponse, error) {
	var err error
	var res ReleaseEIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ReleaseEIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ReleaseShareBandwidthRequest is request schema for ReleaseShareBandwidth action
type ReleaseShareBandwidthRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 关闭共享带宽后，各EIP恢复为的带宽值
	EIPBandwidth *int `required:"true"`

	// 默认为 Bandwidth 带宽计费
	PayMode *string `required:"false"`

	// 共享带宽ID
	ShareBandwidthId *string `required:"true"`
}

// ReleaseShareBandwidthResponse is response schema for ReleaseShareBandwidth action
type ReleaseShareBandwidthResponse struct {
	response.CommonBase
}

// NewReleaseShareBandwidthRequest will create request of ReleaseShareBandwidth action.
func (c *UNetClient) NewReleaseShareBandwidthRequest() *ReleaseShareBandwidthRequest {
	req := &ReleaseShareBandwidthRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ReleaseShareBandwidth

关闭共享带宽
*/
func (c *UNetClient) ReleaseShareBandwidth(req *ReleaseShareBandwidthRequest) (*ReleaseShareBandwidthResponse, error) {
	var err error
	var res ReleaseShareBandwidthResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ReleaseShareBandwidth", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ResizeShareBandwidthRequest is request schema for ResizeShareBandwidth action
type ResizeShareBandwidthRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 带宽值，单位为Mb，范围 [20-5000] (最大值受地域限制)
	ShareBandwidth *int `required:"true"`

	// 共享带宽的Id
	ShareBandwidthId *string `required:"true"`
}

// ResizeShareBandwidthResponse is response schema for ResizeShareBandwidth action
type ResizeShareBandwidthResponse struct {
	response.CommonBase
}

// NewResizeShareBandwidthRequest will create request of ResizeShareBandwidth action.
func (c *UNetClient) NewResizeShareBandwidthRequest() *ResizeShareBandwidthRequest {
	req := &ResizeShareBandwidthRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ResizeShareBandwidth

调整共享带宽的带宽值
*/
func (c *UNetClient) ResizeShareBandwidth(req *ResizeShareBandwidthRequest) (*ResizeShareBandwidthResponse, error) {
	var err error
	var res ResizeShareBandwidthResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ResizeShareBandwidth", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// SetEIPPayModeRequest is request schema for SetEIPPayMode action
type SetEIPPayModeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 调整的目标带宽值, 单位Mbps. 各地域的带宽值范围如下: 流量计费[1-200],其余情况[1-800]
	Bandwidth *int `required:"true"`

	// 弹性IP的资源Id
	EIPId *string `required:"true"`

	// 计费模式. 枚举值："Traffic", 流量计费模式; "Bandwidth", 带宽计费模式
	PayMode *string `required:"true"`
}

// SetEIPPayModeResponse is response schema for SetEIPPayMode action
type SetEIPPayModeResponse struct {
	response.CommonBase
}

// NewSetEIPPayModeRequest will create request of SetEIPPayMode action.
func (c *UNetClient) NewSetEIPPayModeRequest() *SetEIPPayModeRequest {
	req := &SetEIPPayModeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: SetEIPPayMode

设置弹性IP计费模式, 切换时会涉及付费/退费.
*/
func (c *UNetClient) SetEIPPayMode(req *SetEIPPayModeRequest) (*SetEIPPayModeResponse, error) {
	var err error
	var res SetEIPPayModeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("SetEIPPayMode", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UnBindEIPRequest is request schema for UnBindEIP action
type UnBindEIPRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 弹性IP的资源Id
	EIPId *string `required:"true"`

	// 弹性IP请求解绑的资源ID
	ResourceId *string `required:"true"`

	// 弹性IP请求解绑的资源类型, 枚举值为: uhost: 云主机; ulb, 负载均衡器 upm: 物理机; hadoophost: 大数据集群;fortresshost：堡垒机；udockhost：容器；udhost：私有专区主机；natgw：NAT网关；udb：udb；vpngw：ipsec vpn；ucdr：云灾备；dbaudit：数据库审计；
	ResourceType *string `required:"true"`
}

// UnBindEIPResponse is response schema for UnBindEIP action
type UnBindEIPResponse struct {
	response.CommonBase
}

// NewUnBindEIPRequest will create request of UnBindEIP action.
func (c *UNetClient) NewUnBindEIPRequest() *UnBindEIPRequest {
	req := &UnBindEIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UnBindEIP

将弹性IP从资源上解绑
*/
func (c *UNetClient) UnBindEIP(req *UnBindEIPRequest) (*UnBindEIPResponse, error) {
	var err error
	var res UnBindEIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UnBindEIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateEIPAttributeRequest is request schema for UpdateEIPAttribute action
type UpdateEIPAttributeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// EIP资源ID
	EIPId *string `required:"true"`

	// 名字（Name Tag Remark都为空则报错）
	Name *string `required:"false"`

	// 备注
	Remark *string `required:"false"`

	// 业务
	Tag *string `required:"false"`
}

// UpdateEIPAttributeResponse is response schema for UpdateEIPAttribute action
type UpdateEIPAttributeResponse struct {
	response.CommonBase
}

// NewUpdateEIPAttributeRequest will create request of UpdateEIPAttribute action.
func (c *UNetClient) NewUpdateEIPAttributeRequest() *UpdateEIPAttributeRequest {
	req := &UpdateEIPAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateEIPAttribute

更新弹性IP名称，业务组，备注等属性字段
*/
func (c *UNetClient) UpdateEIPAttribute(req *UpdateEIPAttributeRequest) (*UpdateEIPAttributeResponse, error) {
	var err error
	var res UpdateEIPAttributeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateEIPAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateFirewallRequest is request schema for UpdateFirewall action
type UpdateFirewallRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 防火墙资源ID
	FWId *string `required:"true"`

	// 防火墙规则，例如：TCP|22|192.168.1.1/22|DROP|LOW|禁用22端口，第一个参数代表协议：第二个参数代表端口号，第三个参数为ip，第四个参数为ACCEPT（接受）和DROP（拒绝），第五个参数优先级：HIGH（高），MEDIUM（中），LOW（低），第六个参数为该条规则的自定义备注
	Rule []string `required:"true"`
}

// UpdateFirewallResponse is response schema for UpdateFirewall action
type UpdateFirewallResponse struct {
	response.CommonBase

	// 防火墙id
	FWId string
}

// NewUpdateFirewallRequest will create request of UpdateFirewall action.
func (c *UNetClient) NewUpdateFirewallRequest() *UpdateFirewallRequest {
	req := &UpdateFirewallRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateFirewall

更新防火墙规则
*/
func (c *UNetClient) UpdateFirewall(req *UpdateFirewallRequest) (*UpdateFirewallResponse, error) {
	var err error
	var res UpdateFirewallResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateFirewall", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateFirewallAttributeRequest is request schema for UpdateFirewallAttribute action
type UpdateFirewallAttributeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 防火墙资源ID
	FWId *string `required:"true"`

	// 防火墙名称，默认为空，为空则不做修改。Name,Tag,Remark必须填写1个及以上
	Name *string `required:"false"`

	// 防火墙备注，默认为空，为空则不做修改。Name,Tag,Remark必须填写1个及以上
	Remark *string `required:"false"`

	// 防火墙业务组，默认为空，为空则不做修改。Name,Tag,Remark必须填写1个及以上
	Tag *string `required:"false"`
}

// UpdateFirewallAttributeResponse is response schema for UpdateFirewallAttribute action
type UpdateFirewallAttributeResponse struct {
	response.CommonBase
}

// NewUpdateFirewallAttributeRequest will create request of UpdateFirewallAttribute action.
func (c *UNetClient) NewUpdateFirewallAttributeRequest() *UpdateFirewallAttributeRequest {
	req := &UpdateFirewallAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateFirewallAttribute

更新防火墙规则
*/
func (c *UNetClient) UpdateFirewallAttribute(req *UpdateFirewallAttributeRequest) (*UpdateFirewallAttributeResponse, error) {
	var err error
	var res UpdateFirewallAttributeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateFirewallAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

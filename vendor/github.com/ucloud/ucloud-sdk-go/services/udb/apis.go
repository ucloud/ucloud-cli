// Code is generated by ucloud-model, DO NOT EDIT IT.

package udb

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// UDB API Schema

// BackupUDBInstanceRequest is request schema for BackupUDBInstance action
type BackupUDBInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 使用的备份方式。默认使用逻辑备份（快照备份即物理备份。SSD版本的mysql/mongodb实例支持设置为snapshot，NVMe版本的mysql实例支持设置为xtrabackup）
	BackupMethod *string `required:"false"`

	// 备份名称
	BackupName *string `required:"true"`

	// 备份黑名单列表，以 ; 分隔。注意：只有逻辑备份下备份黑名单才生效，快照备份备份黑名单下无效
	Blacklist *string `required:"false"`

	// DB实例Id,该值可以通过DescribeUDBInstance获取
	DBId *string `required:"true"`

	// true表示逻辑备份时是使用 --force 参数，false表示不使用 --force 参数。物理备份此参数无效。
	ForceBackup *bool `required:"false"`

	// 是否使用黑名单备份，默认false
	UseBlacklist *bool `required:"false"`
}

// BackupUDBInstanceResponse is response schema for BackupUDBInstance action
type BackupUDBInstanceResponse struct {
	response.CommonBase
}

// NewBackupUDBInstanceRequest will create request of BackupUDBInstance action.
func (c *UDBClient) NewBackupUDBInstanceRequest() *BackupUDBInstanceRequest {
	req := &BackupUDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: BackupUDBInstance

备份UDB实例
*/
func (c *UDBClient) BackupUDBInstance(req *BackupUDBInstanceRequest) (*BackupUDBInstanceResponse, error) {
	var err error
	var res BackupUDBInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("BackupUDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// BackupUDBInstanceBinlogRequest is request schema for BackupUDBInstanceBinlog action
type BackupUDBInstanceBinlogRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 需要备份文件,可通过DescribeUDBInstanceBinlog获得 如果要传入多个文件名，以空格键分割,用单引号包含.
	BackupFile *string `required:"true"`

	// DB备份文件名称
	BackupName *string `required:"false"`

	// DB实例Id,该值可以通过DescribeUDBInstance获取
	DBId *string `required:"true"`
}

// BackupUDBInstanceBinlogResponse is response schema for BackupUDBInstanceBinlog action
type BackupUDBInstanceBinlogResponse struct {
	response.CommonBase
}

// NewBackupUDBInstanceBinlogRequest will create request of BackupUDBInstanceBinlog action.
func (c *UDBClient) NewBackupUDBInstanceBinlogRequest() *BackupUDBInstanceBinlogRequest {
	req := &BackupUDBInstanceBinlogRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: BackupUDBInstanceBinlog

备份UDB指定时间段的binlog列表
*/
func (c *UDBClient) BackupUDBInstanceBinlog(req *BackupUDBInstanceBinlogRequest) (*BackupUDBInstanceBinlogResponse, error) {
	var err error
	var res BackupUDBInstanceBinlogResponse

	reqCopier := *req

	err = c.Client.InvokeAction("BackupUDBInstanceBinlog", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// BackupUDBInstanceErrorLogRequest is request schema for BackupUDBInstanceErrorLog action
type BackupUDBInstanceErrorLogRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 备份名称
	BackupName *string `required:"true"`

	// DB实例Id,该值可以通过DescribeUDBInstance获取
	DBId *string `required:"true"`
}

// BackupUDBInstanceErrorLogResponse is response schema for BackupUDBInstanceErrorLog action
type BackupUDBInstanceErrorLogResponse struct {
	response.CommonBase
}

// NewBackupUDBInstanceErrorLogRequest will create request of BackupUDBInstanceErrorLog action.
func (c *UDBClient) NewBackupUDBInstanceErrorLogRequest() *BackupUDBInstanceErrorLogRequest {
	req := &BackupUDBInstanceErrorLogRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: BackupUDBInstanceErrorLog

备份UDB指定时间段的errorlog
*/
func (c *UDBClient) BackupUDBInstanceErrorLog(req *BackupUDBInstanceErrorLogRequest) (*BackupUDBInstanceErrorLogResponse, error) {
	var err error
	var res BackupUDBInstanceErrorLogResponse

	reqCopier := *req

	err = c.Client.InvokeAction("BackupUDBInstanceErrorLog", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// BackupUDBInstanceSlowLogRequest is request schema for BackupUDBInstanceSlowLog action
type BackupUDBInstanceSlowLogRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 备份文件名称
	BackupName *string `required:"true"`

	// 过滤条件:起始时间(时间戳)
	BeginTime *int `required:"true"`

	// DB实例Id,该值可以通过DescribeUDBInstance获取
	DBId *string `required:"true"`

	// 过滤条件:结束时间(时间戳)
	EndTime *int `required:"true"`
}

// BackupUDBInstanceSlowLogResponse is response schema for BackupUDBInstanceSlowLog action
type BackupUDBInstanceSlowLogResponse struct {
	response.CommonBase
}

// NewBackupUDBInstanceSlowLogRequest will create request of BackupUDBInstanceSlowLog action.
func (c *UDBClient) NewBackupUDBInstanceSlowLogRequest() *BackupUDBInstanceSlowLogRequest {
	req := &BackupUDBInstanceSlowLogRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: BackupUDBInstanceSlowLog

备份UDB指定时间段的slowlog分析结果
*/
func (c *UDBClient) BackupUDBInstanceSlowLog(req *BackupUDBInstanceSlowLogRequest) (*BackupUDBInstanceSlowLogResponse, error) {
	var err error
	var res BackupUDBInstanceSlowLogResponse

	reqCopier := *req

	err = c.Client.InvokeAction("BackupUDBInstanceSlowLog", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ChangeUDBParamGroupRequest is request schema for ChangeUDBParamGroup action
type ChangeUDBParamGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// DB实例Id
	DBId *string `required:"true"`

	// 参数组Id
	GroupId *string `required:"true"`
}

// ChangeUDBParamGroupResponse is response schema for ChangeUDBParamGroup action
type ChangeUDBParamGroupResponse struct {
	response.CommonBase
}

// NewChangeUDBParamGroupRequest will create request of ChangeUDBParamGroup action.
func (c *UDBClient) NewChangeUDBParamGroupRequest() *ChangeUDBParamGroupRequest {
	req := &ChangeUDBParamGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ChangeUDBParamGroup

修改配置文件
*/
func (c *UDBClient) ChangeUDBParamGroup(req *ChangeUDBParamGroupRequest) (*ChangeUDBParamGroupResponse, error) {
	var err error
	var res ChangeUDBParamGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ChangeUDBParamGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CheckRecoverUDBInstanceRequest is request schema for CheckRecoverUDBInstance action
type CheckRecoverUDBInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 源实例的Id(只支持普通版DB不支持高可用)
	SrcDBId *string `required:"true"`
}

// CheckRecoverUDBInstanceResponse is response schema for CheckRecoverUDBInstance action
type CheckRecoverUDBInstanceResponse struct {
	response.CommonBase

	// 核查成功返回值为可以回档到的最近时刻,核查失败不返回
	LastestTime int
}

// NewCheckRecoverUDBInstanceRequest will create request of CheckRecoverUDBInstance action.
func (c *UDBClient) NewCheckRecoverUDBInstanceRequest() *CheckRecoverUDBInstanceRequest {
	req := &CheckRecoverUDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CheckRecoverUDBInstance

核查db是否可以使用回档功能
*/
func (c *UDBClient) CheckRecoverUDBInstance(req *CheckRecoverUDBInstanceRequest) (*CheckRecoverUDBInstanceResponse, error) {
	var err error
	var res CheckRecoverUDBInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CheckRecoverUDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CheckUDBInstanceToHAAllowanceRequest is request schema for CheckUDBInstanceToHAAllowance action
type CheckUDBInstanceToHAAllowanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 实例的Id,该值可以通过DescribeUDBInstance获取
	DBId *string `required:"true"`
}

// CheckUDBInstanceToHAAllowanceResponse is response schema for CheckUDBInstanceToHAAllowance action
type CheckUDBInstanceToHAAllowanceResponse struct {
	response.CommonBase

	// Yes ，No ，Yes即可以升级，No为不可以升级
	Allowance string
}

// NewCheckUDBInstanceToHAAllowanceRequest will create request of CheckUDBInstanceToHAAllowance action.
func (c *UDBClient) NewCheckUDBInstanceToHAAllowanceRequest() *CheckUDBInstanceToHAAllowanceRequest {
	req := &CheckUDBInstanceToHAAllowanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CheckUDBInstanceToHAAllowance

核查db是否可以升级为高可用
*/
func (c *UDBClient) CheckUDBInstanceToHAAllowance(req *CheckUDBInstanceToHAAllowanceRequest) (*CheckUDBInstanceToHAAllowanceResponse, error) {
	var err error
	var res CheckUDBInstanceToHAAllowanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CheckUDBInstanceToHAAllowance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ClearUDBLogRequest is request schema for ClearUDBLog action
type ClearUDBLogRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 删除时间点(至少前一天)之前log，采用时间戳(秒)，默认当 前时间点前一天
	BeforeTime *int `required:"false"`

	// DB实例的id,该值可以通过DescribeUDBInstance获取
	DBId *string `required:"true"`

	// 日志类型，10-error（暂不支持）、20-slow（暂不支持 ）、30-binlog
	LogType *int `required:"true"`
}

// ClearUDBLogResponse is response schema for ClearUDBLog action
type ClearUDBLogResponse struct {
	response.CommonBase
}

// NewClearUDBLogRequest will create request of ClearUDBLog action.
func (c *UDBClient) NewClearUDBLogRequest() *ClearUDBLogRequest {
	req := &ClearUDBLogRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ClearUDBLog

清除UDB实例的log
*/
func (c *UDBClient) ClearUDBLog(req *ClearUDBLogRequest) (*ClearUDBLogResponse, error) {
	var err error
	var res ClearUDBLogResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ClearUDBLog", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateMongoDBReplicaSetRequest is request schema for CreateMongoDBReplicaSet action
type CreateMongoDBReplicaSetRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 管理员密码
	AdminPassword *string `required:"true"`

	// 管理员帐户名，默认root
	AdminUser *string `required:"false"`

	// 备份策略，每周备份数量，默认7次
	BackupCount *int `required:"false"`

	// 备份策略，备份时间间隔，单位小时计，默认24小时
	BackupDuration *int `required:"false"`

	// 备份策略，备份开始时间，单位小时计，默认1点
	BackupTime *int `required:"false"`

	// cpu核数
	CPU *int `required:"false"`

	// Year， Month， Dynamic，Trial，默认: Month
	ChargeType *string `required:"false"`

	// 所属分片集群的ID
	ClusterId *string `required:"false"`

	// CouponId.0 代表第一个代金券id，对于传入多个代金券id，后面为 CouponId.1, CouponId.2 以此类推
	CouponId []string `required:"false"`

	// DB类型id对应的字符串形式 mongodb-3.4,mongodb-3.6,mongodb-4.0
	DBTypeId *string `required:"true"`

	// 磁盘空间(GB), 暂时支持20G - 3000G
	DiskSpace *int `required:"true"`

	// 内存限制(MB)，目前支持以下几档 2000M/4000M/ 6000M/8000M/12000M/16000M/ 24000M/32000M/48000M/ 64000M/96000M
	MemoryLimit *int `required:"true"`

	// PrimaryDB实例名称，至少6位
	Name *string `required:"true"`

	// DB实例使用的配置参数组id
	ParamGroupId *int `required:"true"`

	// 端口号
	Port *int `required:"true"`

	// 购买时长(N个月)，默认值1个月。如果为0，代表购买到月底。
	Quantity *int `required:"false"`

	// 子网ID
	SubnetId *string `required:"false"`

	// VPC的ID
	VPCId *string `required:"false"`
}

// CreateMongoDBReplicaSetResponse is response schema for CreateMongoDBReplicaSet action
type CreateMongoDBReplicaSetResponse struct {
	response.CommonBase

	// 返回所有副本集成员的Id
	DBIds []string
}

// NewCreateMongoDBReplicaSetRequest will create request of CreateMongoDBReplicaSet action.
func (c *UDBClient) NewCreateMongoDBReplicaSetRequest() *CreateMongoDBReplicaSetRequest {
	req := &CreateMongoDBReplicaSetRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateMongoDBReplicaSet

一键创建DB副本集
*/
func (c *UDBClient) CreateMongoDBReplicaSet(req *CreateMongoDBReplicaSetRequest) (*CreateMongoDBReplicaSetResponse, error) {
	var err error
	var res CreateMongoDBReplicaSetResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateMongoDBReplicaSet", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateUDBInstanceRequest is request schema for CreateUDBInstance action
type CreateUDBInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 管理员密码
	AdminPassword *string `required:"true"`

	// 管理员帐户名，默认root
	AdminUser *string `required:"false"`

	// 备份策略，每周备份数量，默认7次
	BackupCount *int `required:"false"`

	// 备份策略，备份时间间隔，单位小时计，默认24小时
	BackupDuration *int `required:"false"`

	// 备份id，如果指定，则表明从备份恢复实例
	BackupId *int `required:"false"`

	// 备份策略，备份开始时间，单位小时计，默认1点
	BackupTime *int `required:"false"`

	// 跨可用区高可用备库所在可用区，参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	BackupZone *string `required:"false"`

	// cpu核数，如果db类型为sqlserver，必传参数
	CPU *int `required:"false"`

	// mysql大小写参数, 0 为大小写敏感, 1 为大小写不敏感, 目前只针对mysql8.0有效
	CaseSensitivityParam *int `required:"false"`

	// Year， Month， Dynamic，Trial，默认: Month
	ChargeType *string `required:"false"`

	// 当DB类型(DBTypeId)为mongodb时，需要指定mongo的角色，可选值为configsrv (配置节点)，shardsrv (数据节点)
	ClusterRole *string `required:"false"`

	// 使用的代金券id
	CouponId *string `required:"false"`

	// mysql小版本号，支持指定小版本创建
	DBSubVersion *string `required:"false"`

	// DB类型，mysql/mongodb/postgesql/sqlserver按版本细分 mysql-8.0, mysql-5.5, percona-5.5, mysql-5.6, percona-5.6, mysql-5.7, percona-5.7, mariadb-10.0, postgresql-9.6, postgresql-10.4, postgresql-12.8, postgresql-13.4，mongodb-2.6, mongodb-3.0, mongodb-3.6, mongodb-4.0, sqlserver-2017
	DBTypeId *string `required:"true"`

	// 是否开启异步高可用，默认不填，可置为true
	DisableSemisync *bool `required:"false"`

	// 磁盘空间(GB), 暂时支持20G - 32T
	DiskSpace *int `required:"true"`

	// UDB实例模式类型, 可选值如下: "Normal": 普通版UDB实例 "HA": 高可用版UDB实例 默认是"Normal"
	InstanceMode *string `required:"false"`

	// 【该字段已废弃，请谨慎使用】
	InstanceType *string `required:"false" deprecated:"true"`

	// 规格类型ID,当SpecificationType为1时有效
	MachineType *string `required:"false"`

	// 内存限制(MB)，目前支持以下几档 2000M/4000M/ 6000M/8000M/12000M/16000M/ 24000M/32000M/48000M/ 64000M/96000M/128000M/192000M/256000M/320000M
	MemoryLimit *int `required:"false"`

	// 实例名称，至少6位
	Name *string `required:"true"`

	// DB实例使用的配置参数组id
	ParamGroupId *int `required:"true"`

	// 端口号，mysql默认3306，mongodb默认27017，postgresql默认5432
	Port *int `required:"true"`

	// 购买时长，默认值1
	Quantity *int `required:"false"`

	// SSD类型，可选值为"SATA"、“NVMe”，默认为“SATA”
	SSDType *string `required:"false"`

	// 实例计算规格类型，0或不传代表使用内存方式购买，1代表使用内存-cpu可选配比方式购买，需要填写MachineType
	SpecificationType *string `required:"false"`

	// 子网ID
	SubnetId *string `required:"false"`

	// 实例所在的业务组名称
	Tag *string `required:"false"`

	// 【该字段已废弃，请谨慎使用】
	UDBCId *string `required:"false" deprecated:"true"`

	// 【该字段已废弃，请谨慎使用】
	UseSSD *bool `required:"false" deprecated:"true"`

	// VPC的ID
	VPCId *string `required:"false"`
}

// CreateUDBInstanceResponse is response schema for CreateUDBInstance action
type CreateUDBInstanceResponse struct {
	response.CommonBase

	// BD实例id
	DBId string
}

// NewCreateUDBInstanceRequest will create request of CreateUDBInstance action.
func (c *UDBClient) NewCreateUDBInstanceRequest() *CreateUDBInstanceRequest {
	req := &CreateUDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateUDBInstance

创建UDB实例（包括创建mysql master节点、mongodb primary/configsvr节点和从备份恢复实例）
*/
func (c *UDBClient) CreateUDBInstance(req *CreateUDBInstanceRequest) (*CreateUDBInstanceResponse, error) {
	var err error
	var res CreateUDBInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateUDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateUDBInstanceByRecoveryRequest is request schema for CreateUDBInstanceByRecovery action
type CreateUDBInstanceByRecoveryRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 管理员密码 (指定库表回档到新实例时有效)
	AdminPassword *string `required:"false"`

	// Year， Month， Dynamic，Trial，默认: Dynamic
	ChargeType *string `required:"false"`

	// 使用的代金券id
	CouponId *string `required:"false"`

	// 是否创建使用ipv6 资源， 默认为false， 或者不填， 创建ipv6为true
	EnableIpV6 *bool `required:"false"`

	// 规格类型ID,当SpecificationType为1时有效
	MachineType *string `required:"false"`

	// 实例名称，至少6位
	Name *string `required:"true"`

	// 购买时长，默认值1
	Quantity *int `required:"false"`

	// 恢复到某个时间点的时间戳(UTC时间格式，默认单位秒)
	RecoveryTime *int `required:"true"`

	// 实例计算规格类型，0或不传代表使用内存方式购买，1代表使用内存-cpu可选配比方式购买，需要填写MachineType
	SpecificationType *int `required:"false"`

	// 源实例的Id
	SrcDBId *string `required:"true"`

	// 子网ID
	SubnetId *string `required:"false"`

	// 指定需要恢复的表, 如果指定该字段则回档实例只有指定的表数据，格式为(库名.表名)， 指定多个用逗号隔开，eg: [ udb.test, mysql_school.my_student]
	Tables *string `required:"false"`

	// 专区的Id
	UDBCId *string `required:"false"`

	// 指定是否是否使用SSD，默认使用主库的配置
	UseSSD *bool `required:"false"`

	// VPC的ID
	VPCId *string `required:"false"`
}

// CreateUDBInstanceByRecoveryResponse is response schema for CreateUDBInstanceByRecovery action
type CreateUDBInstanceByRecoveryResponse struct {
	response.CommonBase

	// db实例id
	DBId string
}

// NewCreateUDBInstanceByRecoveryRequest will create request of CreateUDBInstanceByRecovery action.
func (c *UDBClient) NewCreateUDBInstanceByRecoveryRequest() *CreateUDBInstanceByRecoveryRequest {
	req := &CreateUDBInstanceByRecoveryRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateUDBInstanceByRecovery

创建db，将新创建的db恢复到指定db某个指定时间点
*/
func (c *UDBClient) CreateUDBInstanceByRecovery(req *CreateUDBInstanceByRecoveryRequest) (*CreateUDBInstanceByRecoveryResponse, error) {
	var err error
	var res CreateUDBInstanceByRecoveryResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateUDBInstanceByRecovery", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateUDBParamGroupRequest is request schema for CreateUDBParamGroup action
type CreateUDBParamGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// DB类型id，mysql/mongodb/postgesql按版本细分 1：mysql-5.1，2：mysql-5.5，3：percona-5.5，4：mysql-5.6，5：percona-5.6，6：mysql-5.7，7：percona-5.7，8：mariadb-10.0，9：mongodb-2.4，10：mongodb-2.6，11：mongodb-3.0，12：mongodb-3.2,13：postgresql-9.4，14：postgresql-9.6
	DBTypeId *string `required:"true"`

	// 参数组描述
	Description *string `required:"true"`

	// 新配置参数组名称
	GroupName *string `required:"true"`

	// 是否是地域级别的配置文件，默认是false
	RegionFlag *bool `required:"false"`

	// 源参数组id
	SrcGroupId *int `required:"true"`
}

// CreateUDBParamGroupResponse is response schema for CreateUDBParamGroup action
type CreateUDBParamGroupResponse struct {
	response.CommonBase

	// 新配置参数组id
	GroupId int
}

// NewCreateUDBParamGroupRequest will create request of CreateUDBParamGroup action.
func (c *UDBClient) NewCreateUDBParamGroupRequest() *CreateUDBParamGroupRequest {
	req := &CreateUDBParamGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateUDBParamGroup

从已有配置文件创建新配置文件
*/
func (c *UDBClient) CreateUDBParamGroup(req *CreateUDBParamGroupRequest) (*CreateUDBParamGroupResponse, error) {
	var err error
	var res CreateUDBParamGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateUDBParamGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateUDBReplicationInstanceRequest is request schema for CreateUDBReplicationInstance action
type CreateUDBReplicationInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// Year， Month， Dynamic，Trial，默认和主库保持一致
	ChargeType *string `required:"false"`

	// 使用的代金券id
	CouponId *string `required:"false"`

	// UDB数据库机型: "Normal": "标准机型" , "SATA_SSD": "SSD机型" , "PCIE_SSD": "SSD高性能机型" , "Normal_Volume": "标准大容量机型", "SATA_SSD_Volume": "SSD大容量机型" , "PCIE_SSD_Volume": "SSD高性能大容量机型", "NVMe_SSD": "快杰机型"
	InstanceType *string `required:"false"`

	// 是否是仲裁节点，默认false，仲裁节点按最小机型创建
	IsArbiter *bool `required:"false"`

	// 实例名称，至少6位
	Name *string `required:"true"`

	// 端口号，默认27017，取值范围3306至65535。
	Port *int `required:"false"`

	// 购买时长，默认默认和主库保持一致
	Quantity *string `required:"false"`

	// primary节点的DBId,该值可以通过DescribeUDBInstance获取
	SrcId *string `required:"true"`

	// 是否使用SSD，默认为true。目前主要可用区、海外机房、新机房只提供SSD资源，非SSD资源不再提供。
	UseSSD *bool `required:"false"`
}

// CreateUDBReplicationInstanceResponse is response schema for CreateUDBReplicationInstance action
type CreateUDBReplicationInstanceResponse struct {
	response.CommonBase

	// 创建从节点的DBId
	DBId string
}

// NewCreateUDBReplicationInstanceRequest will create request of CreateUDBReplicationInstance action.
func (c *UDBClient) NewCreateUDBReplicationInstanceRequest() *CreateUDBReplicationInstanceRequest {
	req := &CreateUDBReplicationInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateUDBReplicationInstance

创建MongoDB的副本节点（包括仲裁）
*/
func (c *UDBClient) CreateUDBReplicationInstance(req *CreateUDBReplicationInstanceRequest) (*CreateUDBReplicationInstanceResponse, error) {
	var err error
	var res CreateUDBReplicationInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateUDBReplicationInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateUDBRouteInstanceRequest is request schema for CreateUDBRouteInstance action
type CreateUDBRouteInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"false"`

	// Year， Month， Dynamic，Trial，默认: Month
	ChargeType *string `required:"false"`

	// 配置服务器的dbid，允许一个或者三个。
	ConfigsvrId []string `required:"true"`

	// 使用的代金券id
	CouponId *string `required:"false"`

	// DB类型id，mongodb按版本细分有1：mongodb-2.4，2：mongodb-2.6,3：mongodb-3.0，4：mongodb-3.2
	DBTypeId *string `required:"true"`

	// 磁盘空间(GB), 暂时支持20G - 500G
	DiskSpace *int `required:"true"`

	// 内存限制(MB)，目前支持以下几档 600M/1500M/3000M /6000M/15000M/30000M
	MemoryLimit *int `required:"true"`

	// 实例名称，至少6位
	Name *string `required:"true"`

	// DB实例使用的配置参数组id
	ParamGroupId *int `required:"true"`

	// 端口号，mongodb默认27017
	Port *int `required:"true"`

	// 购买时长，默认值1
	Quantity *int `required:"false"`

	// 是否使用SSD，默认为ture
	UseSSD *bool `required:"false"`
}

// CreateUDBRouteInstanceResponse is response schema for CreateUDBRouteInstance action
type CreateUDBRouteInstanceResponse struct {
	response.CommonBase

	// db实例id
	DBId string
}

// NewCreateUDBRouteInstanceRequest will create request of CreateUDBRouteInstance action.
func (c *UDBClient) NewCreateUDBRouteInstanceRequest() *CreateUDBRouteInstanceRequest {
	req := &CreateUDBRouteInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateUDBRouteInstance

创建mongos实例
*/
func (c *UDBClient) CreateUDBRouteInstance(req *CreateUDBRouteInstanceRequest) (*CreateUDBRouteInstanceResponse, error) {
	var err error
	var res CreateUDBRouteInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateUDBRouteInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateUDBSlaveRequest is request schema for CreateUDBSlave action
type CreateUDBSlaveRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// Year， Month， Dynamic，Trial，默认和主库保持一致
	ChargeType *string `required:"false"`

	// 使用的代金券id
	CouponId *string `required:"false"`

	// 设置从库的延时复制时长（单位秒）
	DelaySeconds *int `required:"false"`

	// 磁盘空间(GB), 暂时支持20G - 3000G（API支持，前端暂时只开放内存定制）
	DiskSpace *int `required:"false"`

	// 【该字段已废弃，请谨慎使用】
	InstanceMode *string `required:"false" deprecated:"true"`

	// 【该字段已废弃，请谨慎使用】
	InstanceType *string `required:"false" deprecated:"true"`

	// 使用物理方式创建从库，目前仅限创建快杰从库，默认为false
	IsCreatePhysically *bool `required:"false"`

	// 是否锁主库，默认为true
	IsLock *bool `required:"false"`

	// 规格类型ID,当SpecificationType为1时有效
	MachineType *string `required:"false"`

	// 内存限制(MB)，目前支持以下几档 2000M/4000M/ 6000M/8000M/12000M/16000M/ 24000M/32000M/48000M/ 64000M/96000M/128000M/192000M/256000M/320000M
	MemoryLimit *int `required:"false"`

	// 实例名称，至少6位
	Name *string `required:"true"`

	// DB实例使用的配置参数组id，默认和主库保持一致
	ParamGroupId *int `required:"false"`

	// 端口号
	Port *int `required:"false"`

	// 购买时长，默认默认和主库保持一致
	Quantity *int `required:"false"`

	// 仅对主为SSD型实例有效。 可选值"SATA","NVMe"
	SSDType *string `required:"false"`

	// 实例计算规格类型，0或不传代表使用内存方式购买，1代表使用内存-cpu可选配比方式购买，需要填写MachineType
	SpecificationType *int `required:"false"`

	// master实例的DBId,该值可以通过DescribeUDBInstance获取
	SrcId *string `required:"true"`

	// 子网ID（如果不传用默认子网）
	SubnetId *string `required:"false"`

	// 【该字段已废弃，请谨慎使用】
	UseSSD *bool `required:"false" deprecated:"true"`

	// VPCID（如果不传用默认的VPC）
	VPCId *string `required:"false"`
}

// CreateUDBSlaveResponse is response schema for CreateUDBSlave action
type CreateUDBSlaveResponse struct {
	response.CommonBase

	// 创建slave的DBId
	DBId string
}

// NewCreateUDBSlaveRequest will create request of CreateUDBSlave action.
func (c *UDBClient) NewCreateUDBSlaveRequest() *CreateUDBSlaveRequest {
	req := &CreateUDBSlaveRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateUDBSlave

创建UDB实例的slave
*/
func (c *UDBClient) CreateUDBSlave(req *CreateUDBSlaveRequest) (*CreateUDBSlaveResponse, error) {
	var err error
	var res CreateUDBSlaveResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateUDBSlave", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteUDBBackupRequest is request schema for DeleteUDBBackup action
type DeleteUDBBackupRequest struct {
	request.CommonBase

	//
	BackupId *int `required:"true"`

	//
	BackupZone *string `required:"false"`
}

// DeleteUDBBackupResponse is response schema for DeleteUDBBackup action
type DeleteUDBBackupResponse struct {
	response.CommonBase
}

// NewDeleteUDBBackupRequest will create request of DeleteUDBBackup action.
func (c *UDBClient) NewDeleteUDBBackupRequest() *DeleteUDBBackupRequest {
	req := &DeleteUDBBackupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: DeleteUDBBackup
*/
func (c *UDBClient) DeleteUDBBackup(req *DeleteUDBBackupRequest) (*DeleteUDBBackupResponse, error) {
	var err error
	var res DeleteUDBBackupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteUDBBackup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteUDBInstanceRequest is request schema for DeleteUDBInstance action
type DeleteUDBInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// DB实例的id,该值可以通过DescribeUDBInstance获取
	DBId *string `required:"true"`

	// 专区ID
	UDBCId *string `required:"false"`
}

// DeleteUDBInstanceResponse is response schema for DeleteUDBInstance action
type DeleteUDBInstanceResponse struct {
	response.CommonBase
}

// NewDeleteUDBInstanceRequest will create request of DeleteUDBInstance action.
func (c *UDBClient) NewDeleteUDBInstanceRequest() *DeleteUDBInstanceRequest {
	req := &DeleteUDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteUDBInstance

删除UDB实例
*/
func (c *UDBClient) DeleteUDBInstance(req *DeleteUDBInstanceRequest) (*DeleteUDBInstanceResponse, error) {
	var err error
	var res DeleteUDBInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteUDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteUDBLogPackageRequest is request schema for DeleteUDBLogPackage action
type DeleteUDBLogPackageRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 日志包id，可通过DescribeUDBLogPackage获得
	BackupId *int `required:"true"`

	// 跨可用区高可用备库所在可用区
	BackupZone *string `required:"false"`
}

// DeleteUDBLogPackageResponse is response schema for DeleteUDBLogPackage action
type DeleteUDBLogPackageResponse struct {
	response.CommonBase
}

// NewDeleteUDBLogPackageRequest will create request of DeleteUDBLogPackage action.
func (c *UDBClient) NewDeleteUDBLogPackageRequest() *DeleteUDBLogPackageRequest {
	req := &DeleteUDBLogPackageRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteUDBLogPackage

删除UDB日志包
*/
func (c *UDBClient) DeleteUDBLogPackage(req *DeleteUDBLogPackageRequest) (*DeleteUDBLogPackageResponse, error) {
	var err error
	var res DeleteUDBLogPackageResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteUDBLogPackage", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteUDBParamGroupRequest is request schema for DeleteUDBParamGroup action
type DeleteUDBParamGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 参数组id,可通过DescribeUDBParamGroup获取
	GroupId *int `required:"true"`

	// 是否属于地域级别
	RegionFlag *bool `required:"false"`
}

// DeleteUDBParamGroupResponse is response schema for DeleteUDBParamGroup action
type DeleteUDBParamGroupResponse struct {
	response.CommonBase
}

// NewDeleteUDBParamGroupRequest will create request of DeleteUDBParamGroup action.
func (c *UDBClient) NewDeleteUDBParamGroupRequest() *DeleteUDBParamGroupRequest {
	req := &DeleteUDBParamGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteUDBParamGroup

删除配置参数组
*/
func (c *UDBClient) DeleteUDBParamGroup(req *DeleteUDBParamGroupRequest) (*DeleteUDBParamGroupResponse, error) {
	var err error
	var res DeleteUDBParamGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteUDBParamGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUDBBackupRequest is request schema for DescribeUDBBackup action
type DescribeUDBBackupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 【该字段已废弃，请谨慎使用】
	BackupId *int `required:"false" deprecated:"true"`

	// 备份类型,取值为0或1，0表示自动，1表示手动
	BackupType *int `required:"false"`

	// 过滤条件:起始时间(Unix时间戳)
	BeginTime *int `required:"false"`

	// 如果未指定GroupId，则可选是否选取特定DB类型的配置(sql, nosql, postgresql, sqlserver)
	ClassType *string `required:"false"`

	// DB实例Id，如果指定，则只获取该db的备份信息 该值可以通过DescribeUDBInstance获取
	DBId *string `required:"false"`

	// 过滤条件:结束时间(Unix时间戳)
	EndTime *int `required:"false"`

	// 分页显示的条目数，列表操作则指定
	Limit *int `required:"true"`

	// 分页显示的起始偏移，列表操作则指定
	Offset *int `required:"true"`
}

// DescribeUDBBackupResponse is response schema for DescribeUDBBackup action
type DescribeUDBBackupResponse struct {
	response.CommonBase

	// 备份信息 参照UDBBackupSet
	DataSet []UDBBackupSet

	// 满足条件备份总数，如果指定dbid，则是该db备份总数
	TotalCount int
}

// NewDescribeUDBBackupRequest will create request of DescribeUDBBackup action.
func (c *UDBClient) NewDescribeUDBBackupRequest() *DescribeUDBBackupRequest {
	req := &DescribeUDBBackupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUDBBackup

列表UDB实例备份信息.Zone不填表示多可用区，填代表单可用区
*/
func (c *UDBClient) DescribeUDBBackup(req *DescribeUDBBackupRequest) (*DescribeUDBBackupResponse, error) {
	var err error
	var res DescribeUDBBackupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUDBBackup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUDBBackupBlacklistRequest is request schema for DescribeUDBBackupBlacklist action
type DescribeUDBBackupBlacklistRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"false"`

	// DB实例Id,该值可以通过DescribeUDBInstance获取
	DBId *string `required:"true"`
}

// DescribeUDBBackupBlacklistResponse is response schema for DescribeUDBBackupBlacklist action
type DescribeUDBBackupBlacklistResponse struct {
	response.CommonBase

	// DB的黑名单列表, db.%为指定库 dbname.tablename为指定表
	Blacklist string
}

// NewDescribeUDBBackupBlacklistRequest will create request of DescribeUDBBackupBlacklist action.
func (c *UDBClient) NewDescribeUDBBackupBlacklistRequest() *DescribeUDBBackupBlacklistRequest {
	req := &DescribeUDBBackupBlacklistRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUDBBackupBlacklist

获取UDB实例的备份黑名单
*/
func (c *UDBClient) DescribeUDBBackupBlacklist(req *DescribeUDBBackupBlacklistRequest) (*DescribeUDBBackupBlacklistResponse, error) {
	var err error
	var res DescribeUDBBackupBlacklistResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUDBBackupBlacklist", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUDBBinlogBackupURLRequest is request schema for DescribeUDBBinlogBackupURL action
type DescribeUDBBinlogBackupURLRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// DB实例日志备份ID，可以从DescribeUDBLogPackage结果当中获得
	BackupId *int `required:"true"`

	// DB实例Id
	DBId *string `required:"true"`
}

// DescribeUDBBinlogBackupURLResponse is response schema for DescribeUDBBinlogBackupURL action
type DescribeUDBBinlogBackupURLResponse struct {
	response.CommonBase

	// DB实例备份文件的公网地址
	BackupPath string

	// DB实例备份文件的内网地址
	InnerBackupPath string
}

// NewDescribeUDBBinlogBackupURLRequest will create request of DescribeUDBBinlogBackupURL action.
func (c *UDBClient) NewDescribeUDBBinlogBackupURLRequest() *DescribeUDBBinlogBackupURLRequest {
	req := &DescribeUDBBinlogBackupURLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUDBBinlogBackupURL

获取UDB的Binlog或者错误日志或者慢查询日志的备份地址
*/
func (c *UDBClient) DescribeUDBBinlogBackupURL(req *DescribeUDBBinlogBackupURLRequest) (*DescribeUDBBinlogBackupURLResponse, error) {
	var err error
	var res DescribeUDBBinlogBackupURLResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUDBBinlogBackupURL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUDBInstanceRequest is request schema for DescribeUDBInstance action
type DescribeUDBInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区，不填时默认全部可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// DB种类，如果是列表操作，则需要指定,不区分大小写，其取值如下：mysql: SQL；mongo: NOSQL；postgresql: postgresql
	ClassType *string `required:"false"`

	// DB实例id，如果指定则获取单个db实例的描述，否则为列表操作。 指定DBId时无需填写ClassType、Offset、Limit
	DBId *string `required:"false"`

	// 当只获取这个特定DBId的信息时，如果有该选项，那么把这个DBId实例的所有从库信息一起拉取并返回
	IncludeSlaves *bool `required:"false"`

	// 是否查看专区里面DB
	IsInUDBC *bool `required:"false"`

	// 分页显示数量，列表操作时必填
	Limit *int `required:"false"`

	// 分页显示起始偏移位置，列表操作时必填
	Offset *int `required:"false"`

	// 根据 业务组 筛选DB
	Tag *string `required:"false"`

	// IsInUDBC为True,UDBCId为空，说明查看整个可用区的专区的db，如果UDBId不为空则只查看此专区下面的db
	UDBCId *string `required:"false"`

	// 根据VPCId筛选DB
	VPCId *string `required:"false"`
}

// DescribeUDBInstanceResponse is response schema for DescribeUDBInstance action
type DescribeUDBInstanceResponse struct {
	response.CommonBase

	// DB实例信息列表 UDBInstanceSet
	DataSet []UDBInstanceSet

	// 用户db组的数量，对于 mysql: 主从结对数量，没有slave，则只有master mongodb: 副本集数量
	TotalCount int
}

// NewDescribeUDBInstanceRequest will create request of DescribeUDBInstance action.
func (c *UDBClient) NewDescribeUDBInstanceRequest() *DescribeUDBInstanceRequest {
	req := &DescribeUDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUDBInstance

获取UDB实例信息，支持两类操作：（1）指定DBId用于获取该db的信息；（2）指定ClassType、Offset、Limit用于列表操作，查询某一个类型db。
*/
func (c *UDBClient) DescribeUDBInstance(req *DescribeUDBInstanceRequest) (*DescribeUDBInstanceResponse, error) {
	var err error
	var res DescribeUDBInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUDBInstanceBackupStateRequest is request schema for DescribeUDBInstanceBackupState action
type DescribeUDBInstanceBackupStateRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 备份记录ID
	BackupId *int `required:"true"`

	// 跨可用区高可用备库所在可用区，参见［可用区列表］
	BackupZone *string `required:"false"`
}

// DescribeUDBInstanceBackupStateResponse is response schema for DescribeUDBInstanceBackupState action
type DescribeUDBInstanceBackupStateResponse struct {
	response.CommonBase

	//
	BackupEndTime int

	//
	BackupSize int

	// 备份状态 0 Backuping // 备份中 1 Success // 备份成功 2 Failed // 备份失败 3 Expired // 备份过期
	State string
}

// NewDescribeUDBInstanceBackupStateRequest will create request of DescribeUDBInstanceBackupState action.
func (c *UDBClient) NewDescribeUDBInstanceBackupStateRequest() *DescribeUDBInstanceBackupStateRequest {
	req := &DescribeUDBInstanceBackupStateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUDBInstanceBackupState

获取UDB实例备份状态
*/
func (c *UDBClient) DescribeUDBInstanceBackupState(req *DescribeUDBInstanceBackupStateRequest) (*DescribeUDBInstanceBackupStateResponse, error) {
	var err error
	var res DescribeUDBInstanceBackupStateResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUDBInstanceBackupState", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUDBInstanceBackupURLRequest is request schema for DescribeUDBInstanceBackupURL action
type DescribeUDBInstanceBackupURLRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// DB实例备份ID,该值可以通过DescribeUDBBackup获取
	BackupId *int `required:"true"`

	// DB实例Id,该值可通过DescribeUDBInstance获取
	DBId *string `required:"true"`

	// DB响应中URL的过期时间,该值最小默认4小时,最大7天。不填默认为四小时。(单位/秒)
	ValidTime *int `required:"false"`
}

// DescribeUDBInstanceBackupURLResponse is response schema for DescribeUDBInstanceBackupURL action
type DescribeUDBInstanceBackupURLResponse struct {
	response.CommonBase

	// DB实例备份文件公网的地址
	BackupPath string

	// DB实例备份文件内网的地址
	InnerBackupPath string

	// 备份文件的md5值
	MD5 string
}

// NewDescribeUDBInstanceBackupURLRequest will create request of DescribeUDBInstanceBackupURL action.
func (c *UDBClient) NewDescribeUDBInstanceBackupURLRequest() *DescribeUDBInstanceBackupURLRequest {
	req := &DescribeUDBInstanceBackupURLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUDBInstanceBackupURL

获取UDB备份下载地址
*/
func (c *UDBClient) DescribeUDBInstanceBackupURL(req *DescribeUDBInstanceBackupURLRequest) (*DescribeUDBInstanceBackupURLResponse, error) {
	var err error
	var res DescribeUDBInstanceBackupURLResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUDBInstanceBackupURL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUDBInstanceBinlogRequest is request schema for DescribeUDBInstanceBinlog action
type DescribeUDBInstanceBinlogRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"false"`

	// 过滤条件:起始时间(时间戳)
	BeginTime *int `required:"true"`

	// DB实例Id
	DBId *string `required:"true"`

	// 过滤条件:结束时间(时间戳)
	EndTime *int `required:"true"`
}

// DescribeUDBInstanceBinlogResponse is response schema for DescribeUDBInstanceBinlog action
type DescribeUDBInstanceBinlogResponse struct {
	response.CommonBase

	// 获取的Binlog信息列表 UDBInstanceBinlogSet
	DataSet []UDBInstanceBinlogSet
}

// NewDescribeUDBInstanceBinlogRequest will create request of DescribeUDBInstanceBinlog action.
func (c *UDBClient) NewDescribeUDBInstanceBinlogRequest() *DescribeUDBInstanceBinlogRequest {
	req := &DescribeUDBInstanceBinlogRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUDBInstanceBinlog

获取UDB指定时间段的binlog列表
*/
func (c *UDBClient) DescribeUDBInstanceBinlog(req *DescribeUDBInstanceBinlogRequest) (*DescribeUDBInstanceBinlogResponse, error) {
	var err error
	var res DescribeUDBInstanceBinlogResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUDBInstanceBinlog", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUDBInstanceBinlogBackupStateRequest is request schema for DescribeUDBInstanceBinlogBackupState action
type DescribeUDBInstanceBinlogBackupStateRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 备份记录ID
	BackupId *int `required:"true"`

	// 跨可用区高可用备库所在可用区
	BackupZone *string `required:"false"`
}

// DescribeUDBInstanceBinlogBackupStateResponse is response schema for DescribeUDBInstanceBinlogBackupState action
type DescribeUDBInstanceBinlogBackupStateResponse struct {
	response.CommonBase

	// 备份状态 0 Backuping // 备份中 1 Success // 备份成功 2 Failed // 备份失败 3 Expired // 备份过期
	State string
}

// NewDescribeUDBInstanceBinlogBackupStateRequest will create request of DescribeUDBInstanceBinlogBackupState action.
func (c *UDBClient) NewDescribeUDBInstanceBinlogBackupStateRequest() *DescribeUDBInstanceBinlogBackupStateRequest {
	req := &DescribeUDBInstanceBinlogBackupStateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUDBInstanceBinlogBackupState

获取udb实例备份状态
*/
func (c *UDBClient) DescribeUDBInstanceBinlogBackupState(req *DescribeUDBInstanceBinlogBackupStateRequest) (*DescribeUDBInstanceBinlogBackupStateResponse, error) {
	var err error
	var res DescribeUDBInstanceBinlogBackupStateResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUDBInstanceBinlogBackupState", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUDBInstanceLogRequest is request schema for DescribeUDBInstanceLog action
type DescribeUDBInstanceLogRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 查询的日志开始的时间戳（Unix Timestamp）。对于实时查询，这个参数应该是上次轮询请求时的时间戳，后台会返回从该值到当前时间的日志内容。
	BeginTime *int `required:"true"`

	// 实例ID
	DBId *string `required:"true"`

	// 查询日志的结束时间戳(Unix Timestamp），对于实时查询不传该值，与BeginTime的差值不超过24小时：(EndTime-BeginTime) < 24*60*60
	EndTime *int `required:"true"`

	// 查询日志的类型error：错误日志；slow：慢日志
	LogType *string `required:"true"`
}

// DescribeUDBInstanceLogResponse is response schema for DescribeUDBInstanceLog action
type DescribeUDBInstanceLogResponse struct {
	response.CommonBase

	// 查询到的日志内容，一段纯文本
	Log string

	// 此次查询到的日志的下一个时间，用于下一次轮询时的BeginTime参数；如果日志查询结束则返回为空，前端结束查询
	NextTime string
}

// NewDescribeUDBInstanceLogRequest will create request of DescribeUDBInstanceLog action.
func (c *UDBClient) NewDescribeUDBInstanceLogRequest() *DescribeUDBInstanceLogRequest {
	req := &DescribeUDBInstanceLogRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUDBInstanceLog

查询某一段时间内UDB的错误日志或慢查询日志
*/
func (c *UDBClient) DescribeUDBInstanceLog(req *DescribeUDBInstanceLogRequest) (*DescribeUDBInstanceLogResponse, error) {
	var err error
	var res DescribeUDBInstanceLogResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUDBInstanceLog", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUDBInstancePriceRequest is request schema for DescribeUDBInstancePrice action
type DescribeUDBInstancePriceRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// CPU个数，如果db类型为sqlserver，则为必填参数
	CPU *int `required:"false"`

	// Year，按年付费； Month，按月付费 Dynamic，按需付费（需开启权限) Trial，试用（需开启权限）默认为月付
	ChargeType *string `required:"false"`

	// 购买DB实例数量,最大数量为10台, 默认为1台
	Count *int `required:"false"`

	// UDB实例的DB版本字符串
	DBTypeId *string `required:"true"`

	// 磁盘空间(GB),暂时支持20(GB) - 3000(GB), 输入不带单位
	DiskSpace *int `required:"true"`

	// 实例的部署类型。可选值为：Normal: 普通单点实例，Slave: 从库实例，HA: 高可用部署实例，默认是Normal
	InstanceMode *string `required:"false"`

	// UDB数据库机型: "SATA_SSD": "SSD机型" , "PCIE_SSD": "SSD高性能机型" , "Normal_Volume": "标准大容量机型", "SATA_SSD_Volume": "SSD大容量机型" , "PCIE_SSD_Volume": "SSD高性能大容量机型", "NVMe_SSD": "快杰机型"
	InstanceType *string `required:"false"`

	// 规格类型ID,当SpecificationType为1时有效
	MachineType *string `required:"false"`

	// 内存限制(MB)，单位为MB.目前支持：2000-96000
	MemoryLimit *int `required:"true"`

	// DB购买多少个"计费时间单位"，默认值为1。比如：买2个月，Quantity就是2。如果计费单位是“按月”，并且Quantity为0，表示“购买到月底”
	Quantity *int `required:"false"`

	// SSD类型，可选值为"SATA"、“NVMe”. 默认为“SATA”
	SSDType *string `required:"false"`

	// 实例计算规格类型，0或不传代表使用内存方式购买，1代表使用内存-cpu可选配比方式购买，需要填写MachineType
	SpecificationType *int `required:"false"`

	// 【该字段已废弃，请谨慎使用】
	UseSSD *bool `required:"false" deprecated:"true"`
}

// DescribeUDBInstancePriceResponse is response schema for DescribeUDBInstancePrice action
type DescribeUDBInstancePriceResponse struct {
	response.CommonBase

	// 价格 参照UDBInstancePriceSet
	DataSet []UDBInstancePriceSet
}

// NewDescribeUDBInstancePriceRequest will create request of DescribeUDBInstancePrice action.
func (c *UDBClient) NewDescribeUDBInstancePriceRequest() *DescribeUDBInstancePriceRequest {
	req := &DescribeUDBInstancePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUDBInstancePrice

获取UDB实例价格信息
*/
func (c *UDBClient) DescribeUDBInstancePrice(req *DescribeUDBInstancePriceRequest) (*DescribeUDBInstancePriceResponse, error) {
	var err error
	var res DescribeUDBInstancePriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUDBInstancePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUDBInstanceStateRequest is request schema for DescribeUDBInstanceState action
type DescribeUDBInstanceStateRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 实例的Id,该值可以通过DescribeUDBInstance获取
	DBId *string `required:"true"`
}

// DescribeUDBInstanceStateResponse is response schema for DescribeUDBInstanceState action
type DescribeUDBInstanceStateResponse struct {
	response.CommonBase

	// DB状态标记 Init：初始化中；Fail：安装失败； Starting：启动中； Running ： 运行 ；Shutdown：关闭中； Shutoff ：已关闭； Delete：已删除； Upgrading：升级中； Promoting： 提升为独库进行中； Recovering： 恢复中； Recover fail：恢复失败。
	State string
}

// NewDescribeUDBInstanceStateRequest will create request of DescribeUDBInstanceState action.
func (c *UDBClient) NewDescribeUDBInstanceStateRequest() *DescribeUDBInstanceStateRequest {
	req := &DescribeUDBInstanceStateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUDBInstanceState

获取UDB实例状态
*/
func (c *UDBClient) DescribeUDBInstanceState(req *DescribeUDBInstanceStateRequest) (*DescribeUDBInstanceStateResponse, error) {
	var err error
	var res DescribeUDBInstanceStateResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUDBInstanceState", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUDBInstanceUpgradePriceRequest is request schema for DescribeUDBInstanceUpgradePrice action
type DescribeUDBInstanceUpgradePriceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// CPU核数 快杰SQLServer升降级必传
	CPU *int `required:"false"`

	// 实例的Id
	DBId *string `required:"true"`

	// 磁盘空间(GB), 暂时支持20G - 500G
	DiskSpace *int `required:"true"`

	// "SATA_SSD", "NVMe_SSD"
	InstanceType *string `required:"false"`

	// 规格类型ID,当SpecificationType为1时有效
	MachineType *string `required:"false"`

	// 内存限制(MB)
	MemoryLimit *int `required:"true"`

	// 获取指定时间开始后面的升级价格， 不填的话 是默认当前时间
	OrderStartTime *int `required:"false"`

	// "SATA", "NVMe"
	SSDType *string `required:"false"`

	// 实例计算规格类型，0或不传代表使用内存方式购买，1代表使用内存-cpu可选配比方式购买，需要填写MachineType
	SpecificationType *int `required:"false"`

	// 【该字段已废弃，请谨慎使用】
	UseSSD *bool `required:"false" deprecated:"true"`
}

// DescribeUDBInstanceUpgradePriceResponse is response schema for DescribeUDBInstanceUpgradePrice action
type DescribeUDBInstanceUpgradePriceResponse struct {
	response.CommonBase

	// 价格，单位为分
	Price int
}

// NewDescribeUDBInstanceUpgradePriceRequest will create request of DescribeUDBInstanceUpgradePrice action.
func (c *UDBClient) NewDescribeUDBInstanceUpgradePriceRequest() *DescribeUDBInstanceUpgradePriceRequest {
	req := &DescribeUDBInstanceUpgradePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUDBInstanceUpgradePrice

获取UDB实例升降级价格信息
*/
func (c *UDBClient) DescribeUDBInstanceUpgradePrice(req *DescribeUDBInstanceUpgradePriceRequest) (*DescribeUDBInstanceUpgradePriceResponse, error) {
	var err error
	var res DescribeUDBInstanceUpgradePriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUDBInstanceUpgradePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUDBLogBackupURLRequest is request schema for DescribeUDBLogBackupURL action
type DescribeUDBLogBackupURLRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// DB实例日志备份ID, 可以从DescribeUDBLogPackage结果当中获得。
	BackupId *int `required:"true"`

	// DB实例Id
	DBId *string `required:"true"`
}

// DescribeUDBLogBackupURLResponse is response schema for DescribeUDBLogBackupURL action
type DescribeUDBLogBackupURLResponse struct {
	response.CommonBase

	// 备份外网URL
	BackupPath string

	// 备份用户网URL
	UsernetPath string
}

// NewDescribeUDBLogBackupURLRequest will create request of DescribeUDBLogBackupURL action.
func (c *UDBClient) NewDescribeUDBLogBackupURLRequest() *DescribeUDBLogBackupURLRequest {
	req := &DescribeUDBLogBackupURLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUDBLogBackupURL

获取UDB的错误日志或者慢查询日志备份地址
*/
func (c *UDBClient) DescribeUDBLogBackupURL(req *DescribeUDBLogBackupURLRequest) (*DescribeUDBLogBackupURLResponse, error) {
	var err error
	var res DescribeUDBLogBackupURLResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUDBLogBackupURL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUDBLogPackageRequest is request schema for DescribeUDBLogPackage action
type DescribeUDBLogPackageRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 过滤条件:起始时间(时间戳)
	BeginTime *int `required:"false"`

	// DB实例Id，如果指定，则只获取该db的备份信息; 当Type为2时必填
	DBId *string `required:"false"`

	// 过滤条件:结束时间(时间戳)
	EndTime *int `required:"false"`

	// 分页显示的条目数，列表操作则指定
	Limit *int `required:"true"`

	// 分页显示的起始偏移，列表操作则指定
	Offset *int `required:"true"`

	// 需要列出的备份文件类型，每种类型的值如下： 2 代表 BINLOG_BACKUP； 3 代表 SLOW_QUERY_BACKUP； 4 代表 ERRORLOG_BACKUP；
	Type *int `required:"false"`

	// Types作为Type的补充，支持多值传入，可以获取多个类型的日志记录，如：Types.0=2&Types.1=3
	Types []int `required:"false"`
}

// DescribeUDBLogPackageResponse is response schema for DescribeUDBLogPackage action
type DescribeUDBLogPackageResponse struct {
	response.CommonBase

	// 备份信息 参见LogPackageDataSet
	DataSet []LogPackageDataSet

	// 备份总数，如果指定dbid，则是该db备份总数
	TotalCount int
}

// NewDescribeUDBLogPackageRequest will create request of DescribeUDBLogPackage action.
func (c *UDBClient) NewDescribeUDBLogPackageRequest() *DescribeUDBLogPackageRequest {
	req := &DescribeUDBLogPackageRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUDBLogPackage

列表UDB实例binlog或slowlog或errorlog备份信息
*/
func (c *UDBClient) DescribeUDBLogPackage(req *DescribeUDBLogPackageRequest) (*DescribeUDBLogPackageResponse, error) {
	var err error
	var res DescribeUDBLogPackageResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUDBLogPackage", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUDBParamGroupRequest is request schema for DescribeUDBParamGroup action
type DescribeUDBParamGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 如果未指定GroupId，则可选是否选取特定DB类型的配置(sql, nosql, postgresql, sqlserver)
	ClassType *string `required:"false"`

	// 参数组id，如果指定则获取描述，否则是列表操作，需要 指定Offset/Limit
	GroupId *int `required:"false"`

	// 是否选取专区中配置
	IsInUDBC *bool `required:"false"`

	// 分页显示的条目数，列表操作则指定
	Limit *int `required:"true"`

	// 分页显示的起始偏移，列表操作则指定
	Offset *int `required:"true"`

	// 当请求没有填写Zone时，如果指定为true，表示只拉取跨可用区的相关配置文件，否则，拉取所有机房的配置文件（包括每个单可用区和跨可用区）
	RegionFlag *bool `required:"false"`
}

// DescribeUDBParamGroupResponse is response schema for DescribeUDBParamGroup action
type DescribeUDBParamGroupResponse struct {
	response.CommonBase

	// 参数组列表 参照UDBParamGroupSet
	DataSet []UDBParamGroupSet

	// 参数组总数，列表操作时才会有该参数
	TotalCount int
}

// NewDescribeUDBParamGroupRequest will create request of DescribeUDBParamGroup action.
func (c *UDBClient) NewDescribeUDBParamGroupRequest() *DescribeUDBParamGroupRequest {
	req := &DescribeUDBParamGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUDBParamGroup

获取参数组详细参数信息
*/
func (c *UDBClient) DescribeUDBParamGroup(req *DescribeUDBParamGroupRequest) (*DescribeUDBParamGroupResponse, error) {
	var err error
	var res DescribeUDBParamGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUDBParamGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUDBSplittingInfoRequest is request schema for DescribeUDBSplittingInfo action
type DescribeUDBSplittingInfoRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// DB实例ID
	MasterDBId *string `required:"true"`
}

// DescribeUDBSplittingInfoResponse is response schema for DescribeUDBSplittingInfo action
type DescribeUDBSplittingInfoResponse struct {
	response.CommonBase

	// 数据库版本
	DBTypeId string

	// 读写分离从库信息
	DataSet []UDBRWSplittingSet

	// 时间阈值
	DelayThreshold int

	// DB实例ID
	MasterDBId string

	// 端口号
	Port int

	// 读写分离IP
	RWIP string

	// 读写分离状态
	RWState string

	// 读写分离策略
	ReadModel string

	// 可用区
	Zone string
}

// NewDescribeUDBSplittingInfoRequest will create request of DescribeUDBSplittingInfo action.
func (c *UDBClient) NewDescribeUDBSplittingInfoRequest() *DescribeUDBSplittingInfoRequest {
	req := &DescribeUDBSplittingInfoRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUDBSplittingInfo

描述读写分离功能的详细信息
*/
func (c *UDBClient) DescribeUDBSplittingInfo(req *DescribeUDBSplittingInfoRequest) (*DescribeUDBSplittingInfoResponse, error) {
	var err error
	var res DescribeUDBSplittingInfoResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUDBSplittingInfo", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUDBTypeRequest is request schema for DescribeUDBType action
type DescribeUDBTypeRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 跨可用区高可用DB的备库所在区域，仅当该可用区支持跨可用区高可用时填入。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	BackupZone *string `required:"false"`

	// 返回从备份创建实例时，该版本号所支持的备份创建版本。如果没传，则表示不是从备份创建。
	CompatibleWithDBType *string `required:"false"`

	// DB实例类型，如mysql，sqlserver，mongo，postgresql
	DBClusterType *string `required:"false"`

	// 返回从备份创建实例时，该小版本号所支持的备份创建小版本。如果没传，则表示不是从备份创建。
	DBSubVersion *string `required:"false"`

	// 返回支持某种磁盘类型的DB类型，如Normal、SSD、NVMe_SSD。如果没传，则表示任何磁盘类型均可。
	DiskType *string `required:"false"`

	// 返回支持某种实例类型的DB类型。如果没传，则表示任何实例类型均可。normal:单点,ha:高可用,sharded_cluster:分片集群
	InstanceMode *string `required:"false"`
}

// DescribeUDBTypeResponse is response schema for DescribeUDBType action
type DescribeUDBTypeResponse struct {
	response.CommonBase

	// DB类型列表 参数见 UDBTypeSet
	DataSet []UDBTypeSet
}

// NewDescribeUDBTypeRequest will create request of DescribeUDBType action.
func (c *UDBClient) NewDescribeUDBTypeRequest() *DescribeUDBTypeRequest {
	req := &DescribeUDBTypeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUDBType

获取UDB支持的类型信息
*/
func (c *UDBClient) DescribeUDBType(req *DescribeUDBTypeRequest) (*DescribeUDBTypeResponse, error) {
	var err error
	var res DescribeUDBTypeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUDBType", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DisableUDBRWSplittingRequest is request schema for DisableUDBRWSplitting action
type DisableUDBRWSplittingRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// DB实例ID（master)
	MasterDBId *string `required:"true"`
}

// DisableUDBRWSplittingResponse is response schema for DisableUDBRWSplitting action
type DisableUDBRWSplittingResponse struct {
	response.CommonBase
}

// NewDisableUDBRWSplittingRequest will create request of DisableUDBRWSplitting action.
func (c *UDBClient) NewDisableUDBRWSplittingRequest() *DisableUDBRWSplittingRequest {
	req := &DisableUDBRWSplittingRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DisableUDBRWSplitting

关闭DB的读写分离功能
*/
func (c *UDBClient) DisableUDBRWSplitting(req *DisableUDBRWSplittingRequest) (*DisableUDBRWSplittingResponse, error) {
	var err error
	var res DisableUDBRWSplittingResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DisableUDBRWSplitting", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// EditUDBBackupBlacklistRequest is request schema for EditUDBBackupBlacklist action
type EditUDBBackupBlacklistRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"false"`

	// 黑名单，规范示例,指定库mysql.%;test.%; 指定表city.address;
	Blacklist *string `required:"true"`

	// DB实例Id,该值可以通过DescribeUDBInstance获取
	DBId *string `required:"true"`
}

// EditUDBBackupBlacklistResponse is response schema for EditUDBBackupBlacklist action
type EditUDBBackupBlacklistResponse struct {
	response.CommonBase
}

// NewEditUDBBackupBlacklistRequest will create request of EditUDBBackupBlacklist action.
func (c *UDBClient) NewEditUDBBackupBlacklistRequest() *EditUDBBackupBlacklistRequest {
	req := &EditUDBBackupBlacklistRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: EditUDBBackupBlacklist

编辑UDB实例的备份黑名单
*/
func (c *UDBClient) EditUDBBackupBlacklist(req *EditUDBBackupBlacklistRequest) (*EditUDBBackupBlacklistResponse, error) {
	var err error
	var res EditUDBBackupBlacklistResponse

	reqCopier := *req

	err = c.Client.InvokeAction("EditUDBBackupBlacklist", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// EnableUDBRWSplittingRequest is request schema for EnableUDBRWSplitting action
type EnableUDBRWSplittingRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 备份的可用区。用于创建跨可用区读写分离的一个节点，跨机房的读写分离必须有这个参数
	BackupZone *string `required:"false"`

	// DB实例ID（主库）
	MasterDBId *string `required:"true"`
}

// EnableUDBRWSplittingResponse is response schema for EnableUDBRWSplitting action
type EnableUDBRWSplittingResponse struct {
	response.CommonBase

	// DB实例ID（主库）
	MasterDBId string

	// 读写分离访问IP
	RWIp string
}

// NewEnableUDBRWSplittingRequest will create request of EnableUDBRWSplitting action.
func (c *UDBClient) NewEnableUDBRWSplittingRequest() *EnableUDBRWSplittingRequest {
	req := &EnableUDBRWSplittingRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: EnableUDBRWSplitting

开启DB的读写分离功能
*/
func (c *UDBClient) EnableUDBRWSplitting(req *EnableUDBRWSplittingRequest) (*EnableUDBRWSplittingResponse, error) {
	var err error
	var res EnableUDBRWSplittingResponse

	reqCopier := *req

	err = c.Client.InvokeAction("EnableUDBRWSplitting", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ExtractUDBParamGroupRequest is request schema for ExtractUDBParamGroup action
type ExtractUDBParamGroupRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。如果RegionFlag=false，必须传，反之，可不传。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 配置id
	GroupId *int `required:"true"`

	// 是否跨可用区，RegionFlag为true时表示跨可用区配置文件。如果RegionFlag=true，Zone可以不传，否则Zone必须传。
	RegionFlag *bool `required:"false"`
}

// ExtractUDBParamGroupResponse is response schema for ExtractUDBParamGroup action
type ExtractUDBParamGroupResponse struct {
	response.CommonBase

	// 配置文件内容
	Content string
}

// NewExtractUDBParamGroupRequest will create request of ExtractUDBParamGroup action.
func (c *UDBClient) NewExtractUDBParamGroupRequest() *ExtractUDBParamGroupRequest {
	req := &ExtractUDBParamGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ExtractUDBParamGroup

获取配置文件内容
*/
func (c *UDBClient) ExtractUDBParamGroup(req *ExtractUDBParamGroupRequest) (*ExtractUDBParamGroupResponse, error) {
	var err error
	var res ExtractUDBParamGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ExtractUDBParamGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// FetchUDBInstanceEarliestRecoverTimeRequest is request schema for FetchUDBInstanceEarliestRecoverTime action
type FetchUDBInstanceEarliestRecoverTimeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// DB实例Id
	DBId *string `required:"true"`
}

// FetchUDBInstanceEarliestRecoverTimeResponse is response schema for FetchUDBInstanceEarliestRecoverTime action
type FetchUDBInstanceEarliestRecoverTimeResponse struct {
	response.CommonBase

	// 获取最早可回档时间点
	EarliestTime int
}

// NewFetchUDBInstanceEarliestRecoverTimeRequest will create request of FetchUDBInstanceEarliestRecoverTime action.
func (c *UDBClient) NewFetchUDBInstanceEarliestRecoverTimeRequest() *FetchUDBInstanceEarliestRecoverTimeRequest {
	req := &FetchUDBInstanceEarliestRecoverTimeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: FetchUDBInstanceEarliestRecoverTime

获取UDB最早可回档的时间点
*/
func (c *UDBClient) FetchUDBInstanceEarliestRecoverTime(req *FetchUDBInstanceEarliestRecoverTimeRequest) (*FetchUDBInstanceEarliestRecoverTimeResponse, error) {
	var err error
	var res FetchUDBInstanceEarliestRecoverTimeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("FetchUDBInstanceEarliestRecoverTime", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetUDBClientConnNumRequest is request schema for GetUDBClientConnNum action
type GetUDBClientConnNumRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// DB实例id
	DBId *string `required:"true"`
}

// GetUDBClientConnNumResponse is response schema for GetUDBClientConnNum action
type GetUDBClientConnNumResponse struct {
	response.CommonBase

	// db实例ip和连接数信息
	DataSet []ConnNumMap
}

// NewGetUDBClientConnNumRequest will create request of GetUDBClientConnNum action.
func (c *UDBClient) NewGetUDBClientConnNumRequest() *GetUDBClientConnNumRequest {
	req := &GetUDBClientConnNumRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetUDBClientConnNum

输入一个DBID，能够获取客户端来源IP以及对应的连接数
*/
func (c *UDBClient) GetUDBClientConnNum(req *GetUDBClientConnNumRequest) (*GetUDBClientConnNumResponse, error) {
	var err error
	var res GetUDBClientConnNumResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetUDBClientConnNum", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetUDBInstanceSSLCertURLRequest is request schema for GetUDBInstanceSSLCertURL action
type GetUDBInstanceSSLCertURLRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 实例ID
	DBId *string `required:"true"`

	// URL的过期时间，该值最小默认1小时，最大7天。（单位/秒）
	ExpireTime *int `required:"false"`
}

// GetUDBInstanceSSLCertURLResponse is response schema for GetUDBInstanceSSLCertURL action
type GetUDBInstanceSSLCertURLResponse struct {
	response.CommonBase

	// 内网链接
	InnerUrl string

	// 外网链接
	InternetUrl string
}

// NewGetUDBInstanceSSLCertURLRequest will create request of GetUDBInstanceSSLCertURL action.
func (c *UDBClient) NewGetUDBInstanceSSLCertURLRequest() *GetUDBInstanceSSLCertURLRequest {
	req := &GetUDBInstanceSSLCertURLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetUDBInstanceSSLCertURL

获取SSL证书下载地址
*/
func (c *UDBClient) GetUDBInstanceSSLCertURL(req *GetUDBInstanceSSLCertURLRequest) (*GetUDBInstanceSSLCertURLResponse, error) {
	var err error
	var res GetUDBInstanceSSLCertURLResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetUDBInstanceSSLCertURL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ListUDBUserTablesRequest is request schema for ListUDBUserTables action
type ListUDBUserTablesRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// udb实例的ID
	DBId *string `required:"true"`
}

// ListUDBUserTablesResponse is response schema for ListUDBUserTables action
type ListUDBUserTablesResponse struct {
	response.CommonBase

	// 用户库表的集合
	Tables []UDBDatabaseData
}

// NewListUDBUserTablesRequest will create request of ListUDBUserTables action.
func (c *UDBClient) NewListUDBUserTablesRequest() *ListUDBUserTablesRequest {
	req := &ListUDBUserTablesRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ListUDBUserTables

查看udb实例所有的用户表集合 （只包括引擎为innodb和myisam的表）
*/
func (c *UDBClient) ListUDBUserTables(req *ListUDBUserTablesRequest) (*ListUDBUserTablesResponse, error) {
	var err error
	var res ListUDBUserTablesResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ListUDBUserTables", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyUDBInstanceNameRequest is request schema for ModifyUDBInstanceName action
type ModifyUDBInstanceNameRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 实例的Id,该值可以通过DescribeUDBInstance获取
	DBId *string `required:"true"`

	// 实例的新名字, 长度要求为6~63位
	Name *string `required:"true"`
}

// ModifyUDBInstanceNameResponse is response schema for ModifyUDBInstanceName action
type ModifyUDBInstanceNameResponse struct {
	response.CommonBase
}

// NewModifyUDBInstanceNameRequest will create request of ModifyUDBInstanceName action.
func (c *UDBClient) NewModifyUDBInstanceNameRequest() *ModifyUDBInstanceNameRequest {
	req := &ModifyUDBInstanceNameRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyUDBInstanceName

重命名UDB实例
*/
func (c *UDBClient) ModifyUDBInstanceName(req *ModifyUDBInstanceNameRequest) (*ModifyUDBInstanceNameResponse, error) {
	var err error
	var res ModifyUDBInstanceNameResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyUDBInstanceName", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyUDBInstancePasswordRequest is request schema for ModifyUDBInstancePassword action
type ModifyUDBInstancePasswordRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// sqlserver帐号，仅在sqlserver的情况下填该参数
	AccountName *string `required:"false"`

	// 实例的ID,该值可以通过DescribeUDBInstance获取
	DBId *string `required:"true"`

	// 实例的新密码
	Password *string `required:"true"`
}

// ModifyUDBInstancePasswordResponse is response schema for ModifyUDBInstancePassword action
type ModifyUDBInstancePasswordResponse struct {
	response.CommonBase
}

// NewModifyUDBInstancePasswordRequest will create request of ModifyUDBInstancePassword action.
func (c *UDBClient) NewModifyUDBInstancePasswordRequest() *ModifyUDBInstancePasswordRequest {
	req := &ModifyUDBInstancePasswordRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyUDBInstancePassword

修改DB实例的管理员密码
*/
func (c *UDBClient) ModifyUDBInstancePassword(req *ModifyUDBInstancePasswordRequest) (*ModifyUDBInstancePasswordResponse, error) {
	var err error
	var res ModifyUDBInstancePasswordResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyUDBInstancePassword", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyUDBInstanceRemarkNameRequest is request schema for ModifyUDBInstanceRemarkName action
type ModifyUDBInstanceRemarkNameRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 实例的Id,该值可以通过DescribeUDBInstance获取
	DBId *string `required:"true"`

	// 实例的新备注
	Name *string `required:"true"`
}

// ModifyUDBInstanceRemarkNameResponse is response schema for ModifyUDBInstanceRemarkName action
type ModifyUDBInstanceRemarkNameResponse struct {
	response.CommonBase
}

// NewModifyUDBInstanceRemarkNameRequest will create request of ModifyUDBInstanceRemarkName action.
func (c *UDBClient) NewModifyUDBInstanceRemarkNameRequest() *ModifyUDBInstanceRemarkNameRequest {
	req := &ModifyUDBInstanceRemarkNameRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyUDBInstanceRemarkName

修改UDB实例备注信息
*/
func (c *UDBClient) ModifyUDBInstanceRemarkName(req *ModifyUDBInstanceRemarkNameRequest) (*ModifyUDBInstanceRemarkNameResponse, error) {
	var err error
	var res ModifyUDBInstanceRemarkNameResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyUDBInstanceRemarkName", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyUDBInstanceSSLRequest is request schema for ModifyUDBInstanceSSL action
type ModifyUDBInstanceSSLRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 实例ID
	DBId *string `required:"true"`

	// 是否开启SSL 1->关闭 2->开启
	EnableSSL *int `required:"true"`

	// SSL证书有效时间，1-5年，默认为1年
	ValidTime *int `required:"false"`
}

// ModifyUDBInstanceSSLResponse is response schema for ModifyUDBInstanceSSL action
type ModifyUDBInstanceSSLResponse struct {
	response.CommonBase
}

// NewModifyUDBInstanceSSLRequest will create request of ModifyUDBInstanceSSL action.
func (c *UDBClient) NewModifyUDBInstanceSSLRequest() *ModifyUDBInstanceSSLRequest {
	req := &ModifyUDBInstanceSSLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyUDBInstanceSSL

调整SSL的信息
*/
func (c *UDBClient) ModifyUDBInstanceSSL(req *ModifyUDBInstanceSSLRequest) (*ModifyUDBInstanceSSLResponse, error) {
	var err error
	var res ModifyUDBInstanceSSLResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyUDBInstanceSSL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// PromoteUDBInstanceToHARequest is request schema for PromoteUDBInstanceToHA action
type PromoteUDBInstanceToHARequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 实例的Id,该值可以通过DescribeUDBInstance获取
	DBId *string `required:"true"`

	// 【该字段已废弃，请谨慎使用】
	IsLock *bool `required:"false" deprecated:"true"`
}

// PromoteUDBInstanceToHAResponse is response schema for PromoteUDBInstanceToHA action
type PromoteUDBInstanceToHAResponse struct {
	response.CommonBase
}

// NewPromoteUDBInstanceToHARequest will create request of PromoteUDBInstanceToHA action.
func (c *UDBClient) NewPromoteUDBInstanceToHARequest() *PromoteUDBInstanceToHARequest {
	req := &PromoteUDBInstanceToHARequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: PromoteUDBInstanceToHA

普通db升级为高可用(只针对mysql5.5及以上版本SSD机型的实例)  ，对于NVMe机型的单点升级高可用，虽然也能使用该操作再加上SwitchUDBInstanceToHA，但是更建议直接调用新的API接口（UpgradeUDBInstanceToHA）
*/
func (c *UDBClient) PromoteUDBInstanceToHA(req *PromoteUDBInstanceToHARequest) (*PromoteUDBInstanceToHAResponse, error) {
	var err error
	var res PromoteUDBInstanceToHAResponse

	reqCopier := *req

	err = c.Client.InvokeAction("PromoteUDBInstanceToHA", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// PromoteUDBSlaveRequest is request schema for PromoteUDBSlave action
type PromoteUDBSlaveRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 实例的Id,该值可以通过DescribeUDBInstance获取
	DBId *string `required:"true"`

	// 是否强制(如果从库落后可能会禁止提升)，默认false 如果落后情况下，强制提升丢失数据
	IsForce *bool `required:"false"`
}

// PromoteUDBSlaveResponse is response schema for PromoteUDBSlave action
type PromoteUDBSlaveResponse struct {
	response.CommonBase
}

// NewPromoteUDBSlaveRequest will create request of PromoteUDBSlave action.
func (c *UDBClient) NewPromoteUDBSlaveRequest() *PromoteUDBSlaveRequest {
	req := &PromoteUDBSlaveRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: PromoteUDBSlave

从库提升为独立库
*/
func (c *UDBClient) PromoteUDBSlave(req *PromoteUDBSlaveRequest) (*PromoteUDBSlaveResponse, error) {
	var err error
	var res PromoteUDBSlaveResponse

	reqCopier := *req

	err = c.Client.InvokeAction("PromoteUDBSlave", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ResizeUDBInstanceRequest is request schema for ResizeUDBInstance action
type ResizeUDBInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 使用的代金券id
	CouponId *string `required:"false"`

	// 实例的Id
	DBId *string `required:"true"`

	// 磁盘空间(GB), 暂时支持20G-32T
	DiskSpace *int `required:"true"`

	// UDB实例模式类型, 可选值如下: "Normal": 普通版UDB实例 "HA": 高可用版UDB实例 默认是"Normal"
	InstanceMode *string `required:"false"`

	// UDB数据库机型: "Normal": "标准机型" ,  "SATA_SSD": "SSD机型" , "PCIE_SSD": "SSD高性能机型" ,  "Normal_Volume": "标准大容量机型",  "SATA_SSD_Volume": "SSD大容量机型" ,  "PCIE_SSD_Volume": "SSD高性能大容量机型"，“NVMe_SSD”：“快杰机型”
	InstanceType *string `required:"false"`

	// 规格类型ID,当SpecificationType为1时有效
	MachineType *string `required:"false"`

	// 内存限制(MB)，目前支持以下几档 2000M/4000M/ 6000M/8000M/ 12000M/16000M/ 24000M/32000M/ 48000M/64000M/96000M/128000M/192000M/256000M/320000M。
	MemoryLimit *int `required:"true"`

	// SSD类型，可选值为"SATA"、“NVMe”
	SSDType *string `required:"false"`

	// 实例计算规格类型，0或不传代表使用内存方式购买，1代表使用内存-cpu可选配比方式购买，需要填写MachineType
	SpecificationType *string `required:"false"`

	// DB关闭状态下升降级，升降级后是否启动DB，默认为false
	StartAfterUpgrade *bool `required:"false"`

	// 【该字段已废弃，请谨慎使用】
	UDBCId *string `required:"false" deprecated:"true"`

	// 【该字段已废弃，请谨慎使用】
	UseSSD *bool `required:"false" deprecated:"true"`
}

// ResizeUDBInstanceResponse is response schema for ResizeUDBInstance action
type ResizeUDBInstanceResponse struct {
	response.CommonBase
}

// NewResizeUDBInstanceRequest will create request of ResizeUDBInstance action.
func (c *UDBClient) NewResizeUDBInstanceRequest() *ResizeUDBInstanceRequest {
	req := &ResizeUDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ResizeUDBInstance

修改（升级和降级）UDB实例的配置，包括内存和磁盘的配置，对于内存升级无需关闭实例，其他场景需要事先关闭实例。两套参数可以配置升降机：1.配置UseSSD和SSDType  2.配置InstanceType，不需要配置InstanceMode。这两套第二套参数的优先级更高
*/
func (c *UDBClient) ResizeUDBInstance(req *ResizeUDBInstanceRequest) (*ResizeUDBInstanceResponse, error) {
	var err error
	var res ResizeUDBInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ResizeUDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// RestartRWSplittingRequest is request schema for RestartRWSplitting action
type RestartRWSplittingRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 待关闭读写分离中间键ProxyId
	MasterDBId *string `required:"true"`
}

// RestartRWSplittingResponse is response schema for RestartRWSplitting action
type RestartRWSplittingResponse struct {
	response.CommonBase
}

// NewRestartRWSplittingRequest will create request of RestartRWSplitting action.
func (c *UDBClient) NewRestartRWSplittingRequest() *RestartRWSplittingRequest {
	req := &RestartRWSplittingRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: RestartRWSplitting

读写分离中间件重启，对应docker重启，但是ip不变
*/
func (c *UDBClient) RestartRWSplitting(req *RestartRWSplittingRequest) (*RestartRWSplittingResponse, error) {
	var err error
	var res RestartRWSplittingResponse

	reqCopier := *req

	err = c.Client.InvokeAction("RestartRWSplitting", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// RestartUDBInstanceRequest is request schema for RestartUDBInstance action
type RestartUDBInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 实例的Id,该值可以通过DescribeUDBInstance获取
	DBId *string `required:"true"`
}

// RestartUDBInstanceResponse is response schema for RestartUDBInstance action
type RestartUDBInstanceResponse struct {
	response.CommonBase
}

// NewRestartUDBInstanceRequest will create request of RestartUDBInstance action.
func (c *UDBClient) NewRestartUDBInstanceRequest() *RestartUDBInstanceRequest {
	req := &RestartUDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: RestartUDBInstance

重启UDB实例
*/
func (c *UDBClient) RestartUDBInstance(req *RestartUDBInstanceRequest) (*RestartUDBInstanceResponse, error) {
	var err error
	var res RestartUDBInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("RestartUDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// RollbackUDBInstanceRequest is request schema for RollbackUDBInstance action
type RollbackUDBInstanceRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 恢复到某个时间点的时间戳(UTC时间格式，默认单位秒)
	RecoveryTime *string `required:"true"`

	// 源实例的Id
	SrcDBId *string `required:"true"`

	// 指定需要恢复的表，格式为(库名.表名)， 指定多个用逗号隔开，eg: [ udb.test, mysql_school.my_student]
	Tables *string `required:"true"`
}

// RollbackUDBInstanceResponse is response schema for RollbackUDBInstance action
type RollbackUDBInstanceResponse struct {
	response.CommonBase

	// 源实例的Id
	DBId string
}

// NewRollbackUDBInstanceRequest will create request of RollbackUDBInstance action.
func (c *UDBClient) NewRollbackUDBInstanceRequest() *RollbackUDBInstanceRequest {
	req := &RollbackUDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: RollbackUDBInstance

在原实例回档指定库表
*/
func (c *UDBClient) RollbackUDBInstance(req *RollbackUDBInstanceRequest) (*RollbackUDBInstanceResponse, error) {
	var err error
	var res RollbackUDBInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("RollbackUDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// SetUDBRWSplittingRequest is request schema for SetUDBRWSplitting action
type SetUDBRWSplittingRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// DBIds.0 代表UDB主节点， DBIds.1 到DBIds.n 代表1到N个从节点
	DBIds []string `required:"true"`

	// 时间阙值
	DelayThreshold *int `required:"false"`

	// DB实例ID（master)
	MasterDBId *string `required:"true"`

	// 读写分离策略
	ReadModel *string `required:"true"`

	// udb主从节点的只读比例。ReadPercents.0代表主节点的只读比例，ReadPercents.1代表从节点1的读写比例， 以此类推
	ReadPercents []string `required:"false"`
}

// SetUDBRWSplittingResponse is response schema for SetUDBRWSplitting action
type SetUDBRWSplittingResponse struct {
	response.CommonBase
}

// NewSetUDBRWSplittingRequest will create request of SetUDBRWSplitting action.
func (c *UDBClient) NewSetUDBRWSplittingRequest() *SetUDBRWSplittingRequest {
	req := &SetUDBRWSplittingRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: SetUDBRWSplitting

设置读写分离的模式
*/
func (c *UDBClient) SetUDBRWSplitting(req *SetUDBRWSplittingRequest) (*SetUDBRWSplittingResponse, error) {
	var err error
	var res SetUDBRWSplittingResponse

	reqCopier := *req

	err = c.Client.InvokeAction("SetUDBRWSplitting", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// StartUDBInstanceRequest is request schema for StartUDBInstance action
type StartUDBInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 实例的Id,该值可以通过DescribeUDBInstance获取
	DBId *string `required:"true"`
}

// StartUDBInstanceResponse is response schema for StartUDBInstance action
type StartUDBInstanceResponse struct {
	response.CommonBase
}

// NewStartUDBInstanceRequest will create request of StartUDBInstance action.
func (c *UDBClient) NewStartUDBInstanceRequest() *StartUDBInstanceRequest {
	req := &StartUDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: StartUDBInstance

启动UDB实例
*/
func (c *UDBClient) StartUDBInstance(req *StartUDBInstanceRequest) (*StartUDBInstanceResponse, error) {
	var err error
	var res StartUDBInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("StartUDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// StopUDBInstanceRequest is request schema for StopUDBInstance action
type StopUDBInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 实例的Id,该值可以通过DescribeUDBInstance获取
	DBId *string `required:"true"`

	// 是否使用强制手段关闭DB，默认是false
	ForceToKill *bool `required:"false"`
}

// StopUDBInstanceResponse is response schema for StopUDBInstance action
type StopUDBInstanceResponse struct {
	response.CommonBase
}

// NewStopUDBInstanceRequest will create request of StopUDBInstance action.
func (c *UDBClient) NewStopUDBInstanceRequest() *StopUDBInstanceRequest {
	req := &StopUDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: StopUDBInstance

关闭UDB实例
*/
func (c *UDBClient) StopUDBInstance(req *StopUDBInstanceRequest) (*StopUDBInstanceResponse, error) {
	var err error
	var res StopUDBInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("StopUDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// SwitchUDBHAToSentinelRequest is request schema for SwitchUDBHAToSentinel action
type SwitchUDBHAToSentinelRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// UDB的实例ID
	DBId *string `required:"true"`

	// 是否跳过预检查强制升级。
	ForceSwitch *bool `required:"false"`
}

// SwitchUDBHAToSentinelResponse is response schema for SwitchUDBHAToSentinel action
type SwitchUDBHAToSentinelResponse struct {
	response.CommonBase
}

// NewSwitchUDBHAToSentinelRequest will create request of SwitchUDBHAToSentinel action.
func (c *UDBClient) NewSwitchUDBHAToSentinelRequest() *SwitchUDBHAToSentinelRequest {
	req := &SwitchUDBHAToSentinelRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: SwitchUDBHAToSentinel

UDB高可用实例从HAProxy版本升级为Sentinel版本（不带HAProxy）升级耗时5-10秒
*/
func (c *UDBClient) SwitchUDBHAToSentinel(req *SwitchUDBHAToSentinelRequest) (*SwitchUDBHAToSentinelResponse, error) {
	var err error
	var res SwitchUDBHAToSentinelResponse

	reqCopier := *req

	err = c.Client.InvokeAction("SwitchUDBHAToSentinel", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// SwitchUDBInstanceToHARequest is request schema for SwitchUDBInstanceToHA action
type SwitchUDBInstanceToHARequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// Year， Month， Dynamic，Trial，不填则按现在单点计费执行
	ChargeType *string `required:"false"`

	// 实例的Id,该值可以通过DescribeUDBInstance获取
	DBId *string `required:"true"`

	// 购买时长，需要和 ChargeType 搭配使用，否则使用单点计费策略的值
	Quantity *string `required:"false"`

	// 业务组
	Tag *string `required:"false"`
}

// SwitchUDBInstanceToHAResponse is response schema for SwitchUDBInstanceToHA action
type SwitchUDBInstanceToHAResponse struct {
	response.CommonBase

	// 切换后高可用db实例的Id
	DBId string
}

// NewSwitchUDBInstanceToHARequest will create request of SwitchUDBInstanceToHA action.
func (c *UDBClient) NewSwitchUDBInstanceToHARequest() *SwitchUDBInstanceToHARequest {
	req := &SwitchUDBInstanceToHARequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: SwitchUDBInstanceToHA

普通UDB切换为高可用(只针对mysql5.5及以上版本SSD机型的实例) ，原db状态为WaitForSwitch时，调用该api； 对于NVMe机型的单点升级高可用，虽然也能使用PromoteUDBInstanceToHA再加上该操作，但是更建议直接调用新的API接口（UpgradeUDBInstanceToHA）
*/
func (c *UDBClient) SwitchUDBInstanceToHA(req *SwitchUDBInstanceToHARequest) (*SwitchUDBInstanceToHAResponse, error) {
	var err error
	var res SwitchUDBInstanceToHAResponse

	reqCopier := *req

	err = c.Client.InvokeAction("SwitchUDBInstanceToHA", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateUDBInstanceBackupStrategyRequest is request schema for UpdateUDBInstanceBackupStrategy action
type UpdateUDBInstanceBackupStrategyRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 备份时期标记位。共7位，每一位为一周中一天的备份情况，0表示关闭当天备份，1表示打开当天备份。最右边的一位为星期天的备份开关，其余从右到左依次为星期一到星期六的备份配置开关，每周必须至少设置两天备份。例如：1100000表示打开星期六和星期五的备份功能
	BackupDate *string `required:"false"`

	// 选择默认的备份方式，可选nobackup表示不备份， snapshot 表示使用快照备份，logic 表示使用逻辑备份。需要同时设置BackupDate字段。（快照备份即物理备份。SSD版本的mysql实例支持设置为snapshot，NVMe版本的mysql实例支持设置为xtrabackup）
	BackupMethod *string `required:"false"`

	// 备份的整点时间，范围[0,23]
	BackupTime *int `required:"false"`

	// 远端binlog保存时长(天)
	BinlogRemoteSaveDays *int `required:"false"`

	// 主节点的Id
	DBId *string `required:"true"`

	// 是否开启binlog备份, 默认为未开启
	EnableBinlogBackup *bool `required:"false"`

	// 当导出某些数据遇到问题后，是否强制导出其他剩余数据默认是false需要同时设置BackupDate字段
	ForceDump *bool `required:"false"`

	// 自动备份转存到用户自己的bucket名称，要包含到对应的token id里
	UserBucket *string `required:"false"`

	// 自动备份转存到用户自己的bucket 的tokenid， 需要用户自己自己设置权限
	UserTokenID *string `required:"false"`
}

// UpdateUDBInstanceBackupStrategyResponse is response schema for UpdateUDBInstanceBackupStrategy action
type UpdateUDBInstanceBackupStrategyResponse struct {
	response.CommonBase
}

// NewUpdateUDBInstanceBackupStrategyRequest will create request of UpdateUDBInstanceBackupStrategy action.
func (c *UDBClient) NewUpdateUDBInstanceBackupStrategyRequest() *UpdateUDBInstanceBackupStrategyRequest {
	req := &UpdateUDBInstanceBackupStrategyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateUDBInstanceBackupStrategy

修改UDB自动备份策略
*/
func (c *UDBClient) UpdateUDBInstanceBackupStrategy(req *UpdateUDBInstanceBackupStrategyRequest) (*UpdateUDBInstanceBackupStrategyResponse, error) {
	var err error
	var res UpdateUDBInstanceBackupStrategyResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateUDBInstanceBackupStrategy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateUDBInstanceSlaveBackupSwitchRequest is request schema for UpdateUDBInstanceSlaveBackupSwitch action
type UpdateUDBInstanceSlaveBackupSwitchRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"false"`

	// 从库的备份开关，范围[0,1],0表示从库备份功能关闭,1 表示从库备份开关打开。
	BackupSwitch *int `required:"true"`

	// 主库的Id
	MasterDBId *string `required:"true"`

	// 从库的Id,如果从库备份开关设定为打开，则必须赋值。
	SlaveDBId *string `required:"false"`
}

// UpdateUDBInstanceSlaveBackupSwitchResponse is response schema for UpdateUDBInstanceSlaveBackupSwitch action
type UpdateUDBInstanceSlaveBackupSwitchResponse struct {
	response.CommonBase
}

// NewUpdateUDBInstanceSlaveBackupSwitchRequest will create request of UpdateUDBInstanceSlaveBackupSwitch action.
func (c *UDBClient) NewUpdateUDBInstanceSlaveBackupSwitchRequest() *UpdateUDBInstanceSlaveBackupSwitchRequest {
	req := &UpdateUDBInstanceSlaveBackupSwitchRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateUDBInstanceSlaveBackupSwitch

开启或者关闭UDB从库备份
*/
func (c *UDBClient) UpdateUDBInstanceSlaveBackupSwitch(req *UpdateUDBInstanceSlaveBackupSwitchRequest) (*UpdateUDBInstanceSlaveBackupSwitchResponse, error) {
	var err error
	var res UpdateUDBInstanceSlaveBackupSwitchResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateUDBInstanceSlaveBackupSwitch", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateUDBParamGroupRequest is request schema for UpdateUDBParamGroup action
type UpdateUDBParamGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 配置文件的描述，不传时认为不修改
	Description *string `required:"false"`

	// 配置参数组id，使用DescribeUDBParamGroup获得
	GroupId *int `required:"true"`

	// 参数名称（与Value配合使用）
	Key *string `required:"false"`

	// 配置文件的名字，不传时认为不修改名字，传了则不能为空
	Name *string `required:"false"`

	// 该配置文件是否是地域级别配置文件，默认是false
	RegionFlag *bool `required:"false"`

	// 参数值（与Key配合使用）
	Value *string `required:"false"`
}

// UpdateUDBParamGroupResponse is response schema for UpdateUDBParamGroup action
type UpdateUDBParamGroupResponse struct {
	response.CommonBase
}

// NewUpdateUDBParamGroupRequest will create request of UpdateUDBParamGroup action.
func (c *UDBClient) NewUpdateUDBParamGroupRequest() *UpdateUDBParamGroupRequest {
	req := &UpdateUDBParamGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateUDBParamGroup

更新UDB配置参数项
*/
func (c *UDBClient) UpdateUDBParamGroup(req *UpdateUDBParamGroupRequest) (*UpdateUDBParamGroupResponse, error) {
	var err error
	var res UpdateUDBParamGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateUDBParamGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpgradeUDBInstanceToHARequest is request schema for UpgradeUDBInstanceToHA action
type UpgradeUDBInstanceToHARequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 实例的Id,该值可以通过DescribeUDBInstance获取
	DBId *string `required:"true"`
}

// UpgradeUDBInstanceToHAResponse is response schema for UpgradeUDBInstanceToHA action
type UpgradeUDBInstanceToHAResponse struct {
	response.CommonBase
}

// NewUpgradeUDBInstanceToHARequest will create request of UpgradeUDBInstanceToHA action.
func (c *UDBClient) NewUpgradeUDBInstanceToHARequest() *UpgradeUDBInstanceToHARequest {
	req := &UpgradeUDBInstanceToHARequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpgradeUDBInstanceToHA

快杰普通db升级为高可用(只针对mysql5.5及以上版本Nvme机型的实例)
*/
func (c *UDBClient) UpgradeUDBInstanceToHA(req *UpgradeUDBInstanceToHARequest) (*UpgradeUDBInstanceToHAResponse, error) {
	var err error
	var res UpgradeUDBInstanceToHAResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpgradeUDBInstanceToHA", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpgradeUDBVersionRequest is request schema for UpgradeUDBVersion action
type UpgradeUDBVersionRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// db实例资源id
	DBId *string `required:"true"`

	// db需要升级的小版本
	DBSubVersion *string `required:"true"`

	// 该值为一个unix时间戳，代表开始预期切换实例结束的时间
	SwitchEndTime *int `required:"false"`

	// 该值为一个unix时间戳，代表开始切换实例的时间
	SwitchStartTime *int `required:"false"`

	// 切换类型，可选值为"immediately"和"customize"，分别代表立即切换和自定义切换时间，自定义切换时间需要填写SwitchStartTime和SwitchEndTime
	SwitchType *string `required:"true"`
}

// UpgradeUDBVersionResponse is response schema for UpgradeUDBVersion action
type UpgradeUDBVersionResponse struct {
	response.CommonBase

	// 返回信息
	Message string
}

// NewUpgradeUDBVersionRequest will create request of UpgradeUDBVersion action.
func (c *UDBClient) NewUpgradeUDBVersionRequest() *UpgradeUDBVersionRequest {
	req := &UpgradeUDBVersionRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpgradeUDBVersion

升级db实例版本
*/
func (c *UDBClient) UpgradeUDBVersion(req *UpgradeUDBVersionRequest) (*UpgradeUDBVersionResponse, error) {
	var err error
	var res UpgradeUDBVersionResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpgradeUDBVersion", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UploadUDBParamGroupRequest is request schema for UploadUDBParamGroup action
type UploadUDBParamGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 配置内容，导入的配置内容采用base64编码
	Content *string `required:"true"`

	// DB类型id，DB类型id，mysql/mongodb/postgesql按版本细分 1：mysql-5.1，2：mysql-5.5，3：percona-5.5，4：mysql-5.6，5：percona-5.6，6：mysql-5.7，7：percona-5.7，8：mariadb-10.0，9：mongodb-2.4，10：mongodb-2.6，11：mongodb-3.0，12：mongodb-3.2,13：postgresql-9.4，14：postgresql-9.6
	DBTypeId *string `required:"true"`

	// 参数组描述
	Description *string `required:"true"`

	// 配置参数组名称
	GroupName *string `required:"true"`

	// 【该字段已废弃，请谨慎使用】
	ParamGroupTypeId *int `required:"false" deprecated:"true"`

	// 该配置文件是否是地域级别配置文件，默认是false
	RegionFlag *bool `required:"false"`
}

// UploadUDBParamGroupResponse is response schema for UploadUDBParamGroup action
type UploadUDBParamGroupResponse struct {
	response.CommonBase

	// 配置参数组id
	GroupId int
}

// NewUploadUDBParamGroupRequest will create request of UploadUDBParamGroup action.
func (c *UDBClient) NewUploadUDBParamGroupRequest() *UploadUDBParamGroupRequest {
	req := &UploadUDBParamGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UploadUDBParamGroup

导入UDB配置
*/
func (c *UDBClient) UploadUDBParamGroup(req *UploadUDBParamGroupRequest) (*UploadUDBParamGroupResponse, error) {
	var err error
	var res UploadUDBParamGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UploadUDBParamGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

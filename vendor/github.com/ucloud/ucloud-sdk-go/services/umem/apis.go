// Code is generated by ucloud-model, DO NOT EDIT IT.

package umem

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// UMem API Schema

// CheckUDredisSpaceAllowanceRequest is request schema for CheckUDredisSpaceAllowance action
type CheckUDredisSpaceAllowanceRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 创建实例的数量，[1-10]
	Count *string `required:"true"`

	// 资源ID，扩缩容时的必传参数
	GroupId *string `required:"false"`

	// 创建实例的容量大小,，扩容时的分片目标容量大小
	Size *int `required:"true"`
}

// CheckUDredisSpaceAllowanceResponse is response schema for CheckUDredisSpaceAllowance action
type CheckUDredisSpaceAllowanceResponse struct {
	response.CommonBase

	// 创建实例资源时，表示可创建的数量；扩容资源时，返回1表示可以扩容，0表示可用区资源不足不能扩容
	Count int
}

// NewCheckUDredisSpaceAllowanceRequest will create request of CheckUDredisSpaceAllowance action.
func (c *UMemClient) NewCheckUDredisSpaceAllowanceRequest() *CheckUDredisSpaceAllowanceRequest {
	req := &CheckUDredisSpaceAllowanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CheckUDredisSpaceAllowance

检查高性能UMem剩余资源，以及分片扩容前的资源预检查
*/
func (c *UMemClient) CheckUDredisSpaceAllowance(req *CheckUDredisSpaceAllowanceRequest) (*CheckUDredisSpaceAllowanceResponse, error) {
	var err error
	var res CheckUDredisSpaceAllowanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CheckUDredisSpaceAllowance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CheckURedisAllowanceRequest is request schema for CheckURedisAllowance action
type CheckURedisAllowanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 创建实例的数量，[1-10]
	Count *int `required:"true"`

	// 资源ID，扩容实例资源时的必传参数
	GroupId *string `required:"false"`

	//
	Protocol *string `required:"false"`

	// 是否是跨机房URedis(默认false)
	RegionFlag *bool `required:"false"`

	// 创建实例的容量大小, 单位:GB 目前仅支持1/2/4/8/16/32六种规格；扩缩容时，表示实例的目标资源大小
	Size *int `required:"true"`

	//
	SlaveZone *string `required:"false"`
}

// CheckURedisAllowanceResponse is response schema for CheckURedisAllowance action
type CheckURedisAllowanceResponse struct {
	response.CommonBase

	// 创建实例资源时，表示可创建的数量；扩容资源时，返回1表示可以扩容，0表示可用区资源不足不能扩容
	Count int
}

// NewCheckURedisAllowanceRequest will create request of CheckURedisAllowance action.
func (c *UMemClient) NewCheckURedisAllowanceRequest() *CheckURedisAllowanceRequest {
	req := &CheckURedisAllowanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CheckURedisAllowance

检查主备Redis的资源是否足够创建新实例，以及主备Redis的扩容资源预检查
*/
func (c *UMemClient) CheckURedisAllowance(req *CheckURedisAllowanceRequest) (*CheckURedisAllowanceResponse, error) {
	var err error
	var res CheckURedisAllowanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CheckURedisAllowance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateUMemBackupRequest is request schema for CreateUMemBackup action
type CreateUMemBackupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 请求创建备份的名称 (范围[6-63],只能包含英文、数字以及符号-和_)
	BackupName *string `required:"true"`

	// 资源id
	SpaceId *string `required:"true"`
}

// CreateUMemBackupResponse is response schema for CreateUMemBackup action
type CreateUMemBackupResponse struct {
	response.CommonBase

	// 备份Id
	BackupId string
}

// NewCreateUMemBackupRequest will create request of CreateUMemBackup action.
func (c *UMemClient) NewCreateUMemBackupRequest() *CreateUMemBackupRequest {
	req := &CreateUMemBackupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateUMemBackup

创建分布式redis备份
*/
func (c *UMemClient) CreateUMemBackup(req *CreateUMemBackupRequest) (*CreateUMemBackupResponse, error) {
	var err error
	var res CreateUMemBackupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateUMemBackup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateUMemSpaceRequest is request schema for CreateUMemSpace action
type CreateUMemSpaceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 分片个数
	BlockCnt *int `required:"false"`

	// Year , Month, Dynamic 默认: Month
	ChargeType *string `required:"false"`

	// 是否是cluster模式（参数为cluster创建redis cluster，其他参数或者不传该参数仍然创建老版本分布式）
	ClusterMode *string `required:"false"`

	// 使用的代金券id
	CouponId *string `required:"false"`

	// 是否创建性能增强性。默认为false，或者不填，填true为性能增强型。
	HighPerformance *bool `required:"false"`

	// 空间名称,长度(6<=size<=63)
	Name *string `required:"true"`

	// URedis密码。请遵照[[api:uhost-api:specification|字段规范]]设定密码。密码需使用base64进行编码，举例如下：# echo -n Password1 | base64UGFzc3dvcmQx。
	Password *string `required:"false"`

	// 协议:memcache, redis (默认redis).注意:redis无single类型
	Protocol *string `required:"false"`

	// 分布式代理CPU核数
	ProxySize *int `required:"false"`

	// 购买时长 默认: 1
	Quantity *int `required:"false"`

	// 内存大小, 单位:GB, 范围[1~1024]
	Size *int `required:"true"`

	// 跨机房UDRedis，slave所在可用区（必须和Zone在同一Region，且不可相同）
	SlaveZone *string `required:"false"`

	// 子网ID
	SubnetId *string `required:"false"`

	//
	Tag *string `required:"false"`

	// 空间类型:single(无热备),double(热备)(默认: double)
	Type *string `required:"false"`

	// VPC的ID
	VPCId *string `required:"false"`

	// 分布式分片版本（默认版本是4.0，其他版本见DescribeUDRedisBlockVersion）
	Version *string `required:"false"`
}

// CreateUMemSpaceResponse is response schema for CreateUMemSpace action
type CreateUMemSpaceResponse struct {
	response.CommonBase

	// 创建内存空间ID列表
	SpaceId string
}

// NewCreateUMemSpaceRequest will create request of CreateUMemSpace action.
func (c *UMemClient) NewCreateUMemSpaceRequest() *CreateUMemSpaceRequest {
	req := &CreateUMemSpaceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateUMemSpace

创建UMem内存空间
*/
func (c *UMemClient) CreateUMemSpace(req *CreateUMemSpaceRequest) (*CreateUMemSpaceResponse, error) {
	var err error
	var res CreateUMemSpaceResponse

	reqCopier := *req

	reqCopier.Password = request.ToBase64Query(reqCopier.Password)

	err = c.Client.InvokeAction("CreateUMemSpace", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateUMemcacheGroupRequest is request schema for CreateUMemcacheGroup action
type CreateUMemcacheGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"false"`

	// 计费模式，Year , Month, Dynamic 默认: Month
	ChargeType *string `required:"false"`

	// 配置ID,目前仅支持默认配置id 默认配置id:"9a891891-c245-4b66-bce8-67e59430d67c"
	ConfigId *string `required:"false"`

	// 代金券ID
	CouponId *string `required:"false"`

	// 请求创建组的名称 范围[6-60]
	Name *string `required:"true"`

	//
	Protocol *string `required:"false"`

	// 购买时长，默认为1
	Quantity *int `required:"false"`

	// 每个节点的内存大小,单位GB,默认1GB 目前仅支持1/2/4/8/16/32这几档
	Size *int `required:"false"`

	//
	SubnetId *string `required:"false"`

	// 业务组 默认：Default
	Tag *string `required:"false"`

	//
	VPCId *string `required:"false"`

	// Memcache版本信息,默认为1.4.31
	Version *string `required:"false"`
}

// CreateUMemcacheGroupResponse is response schema for CreateUMemcacheGroup action
type CreateUMemcacheGroupResponse struct {
	response.CommonBase

	// 创建的组ID
	GroupId string
}

// NewCreateUMemcacheGroupRequest will create request of CreateUMemcacheGroup action.
func (c *UMemClient) NewCreateUMemcacheGroupRequest() *CreateUMemcacheGroupRequest {
	req := &CreateUMemcacheGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateUMemcacheGroup

创建单机Memcache
*/
func (c *UMemClient) CreateUMemcacheGroup(req *CreateUMemcacheGroupRequest) (*CreateUMemcacheGroupResponse, error) {
	var err error
	var res CreateUMemcacheGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateUMemcacheGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateURedisBackupRequest is request schema for CreateURedisBackup action
type CreateURedisBackupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"false"`

	// 请求创建组的名称 (范围[6-63],只能包含英文、数字以及符号-和_)
	BackupName *string `required:"true"`

	// 资源id
	GroupId *string `required:"true"`

	// 跨机房URedis，slave所在可用区（必须和Zone在同一Region，且不可相同）
	SlaveZone *string `required:"false"`
}

// CreateURedisBackupResponse is response schema for CreateURedisBackup action
type CreateURedisBackupResponse struct {
	response.CommonBase

	// 备份id
	BackupId string
}

// NewCreateURedisBackupRequest will create request of CreateURedisBackup action.
func (c *UMemClient) NewCreateURedisBackupRequest() *CreateURedisBackupRequest {
	req := &CreateURedisBackupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateURedisBackup

创建主备Redis备份
*/
func (c *UMemClient) CreateURedisBackup(req *CreateURedisBackupRequest) (*CreateURedisBackupResponse, error) {
	var err error
	var res CreateURedisBackupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateURedisBackup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateURedisGroupRequest is request schema for CreateURedisGroup action
type CreateURedisGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 是否自动备份,enable或disable，默认disable
	AutoBackup *string `required:"false"`

	// 有此项代表从备份中创建，无代表正常创建
	BackupId *string `required:"false"`

	// 自动备份开始时间,范围[0-23],默认3点
	BackupTime *int `required:"false"`

	// 计费模式，Year , Month, Dynamic 默认: Month
	ChargeType *string `required:"false"`

	// 配置ID,目前支持 4.0版本配置ID:"6c9298a3-9d7f-428c-b1d0-e87ab3b8a1ea", 5.0版本配置ID:"3cdeeb90-dcbf-46e8-95cd-a05d8860a22c",6.0版本配置ID:"1d990520-aac8-4e0f-9384-f58611e8eb28",7.0版本配置ID:"48dcf534-db41-11ec-a1a6-52670028d520",默认版本4.0,从备份创建为必传项
	ConfigId *string `required:"false"`

	// 代金券ID
	CouponId *string `required:"false"`

	// 是否创建使用ipv6 资源， 默认为false， 或者不填， 创建ipv6为true
	EnableIpV6 *bool `required:"false"`

	// 是否开启高可用,enable或disable
	HighAvailability *string `required:"true"`

	// 是否创建高性能Redis， 默认为false， 或者不填， 创建高性能为true
	HighPerformance *bool `required:"false"`

	// Master Redis Group的ID，创建只读Slave时，必须填写
	MasterGroupId *string `required:"false"`

	// 请求创建组的名称 (范围[6-63],只能包含英文、数字以及符号-和_)
	Name *string `required:"true"`

	// 初始化密码,需要 base64 编码
	Password *string `required:"false"`

	// 购买时长，默认为1
	Quantity *int `required:"false"`

	// 每个节点的内存大小,单位GB,默认1GB,目前仅支持1/2/4/8/16/32,六种
	Size *int `required:"false"`

	// 跨机房URedis，slave所在可用区（必须和Zone在同一Region，且不可相同）
	SlaveZone *string `required:"false"`

	// 子网ID
	SubnetId *string `required:"false"`

	// 业务组名称
	Tag *string `required:"false"`

	// VPC的ID
	VPCId *string `required:"false"`

	// Redis版本信息(详见DescribeURedisVersion返回结果),默认版本4.0
	Version *string `required:"false"`
}

// CreateURedisGroupResponse is response schema for CreateURedisGroup action
type CreateURedisGroupResponse struct {
	response.CommonBase

	// 创建的组ID
	GroupId string
}

// NewCreateURedisGroupRequest will create request of CreateURedisGroup action.
func (c *UMemClient) NewCreateURedisGroupRequest() *CreateURedisGroupRequest {
	req := &CreateURedisGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateURedisGroup

创建主备redis
*/
func (c *UMemClient) CreateURedisGroup(req *CreateURedisGroupRequest) (*CreateURedisGroupResponse, error) {
	var err error
	var res CreateURedisGroupResponse

	reqCopier := *req

	reqCopier.Password = request.ToBase64Query(reqCopier.Password)

	err = c.Client.InvokeAction("CreateURedisGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteUMemSpaceRequest is request schema for DeleteUMemSpace action
type DeleteUMemSpaceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"false"`

	// UMem内存空间ID
	SpaceId *string `required:"true"`
}

// DeleteUMemSpaceResponse is response schema for DeleteUMemSpace action
type DeleteUMemSpaceResponse struct {
	response.CommonBase
}

// NewDeleteUMemSpaceRequest will create request of DeleteUMemSpace action.
func (c *UMemClient) NewDeleteUMemSpaceRequest() *DeleteUMemSpaceRequest {
	req := &DeleteUMemSpaceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteUMemSpace

删除UMem内存空间
*/
func (c *UMemClient) DeleteUMemSpace(req *DeleteUMemSpaceRequest) (*DeleteUMemSpaceResponse, error) {
	var err error
	var res DeleteUMemSpaceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteUMemSpace", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteUMemcacheGroupRequest is request schema for DeleteUMemcacheGroup action
type DeleteUMemcacheGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"false"`

	// 组ID
	GroupId *string `required:"true"`
}

// DeleteUMemcacheGroupResponse is response schema for DeleteUMemcacheGroup action
type DeleteUMemcacheGroupResponse struct {
	response.CommonBase
}

// NewDeleteUMemcacheGroupRequest will create request of DeleteUMemcacheGroup action.
func (c *UMemClient) NewDeleteUMemcacheGroupRequest() *DeleteUMemcacheGroupRequest {
	req := &DeleteUMemcacheGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteUMemcacheGroup

删除单机Memcache
*/
func (c *UMemClient) DeleteUMemcacheGroup(req *DeleteUMemcacheGroupRequest) (*DeleteUMemcacheGroupResponse, error) {
	var err error
	var res DeleteUMemcacheGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteUMemcacheGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteURedisGroupRequest is request schema for DeleteURedisGroup action
type DeleteURedisGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 组ID
	GroupId *string `required:"true"`
}

// DeleteURedisGroupResponse is response schema for DeleteURedisGroup action
type DeleteURedisGroupResponse struct {
	response.CommonBase
}

// NewDeleteURedisGroupRequest will create request of DeleteURedisGroup action.
func (c *UMemClient) NewDeleteURedisGroupRequest() *DeleteURedisGroupRequest {
	req := &DeleteURedisGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteURedisGroup

删除主备redis
*/
func (c *UMemClient) DeleteURedisGroup(req *DeleteURedisGroupRequest) (*DeleteURedisGroupResponse, error) {
	var err error
	var res DeleteURedisGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteURedisGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUDRedisProxyInfoRequest is request schema for DescribeUDRedisProxyInfo action
type DescribeUDRedisProxyInfoRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// udredis实例id
	SpaceId *string `required:"true"`
}

// DescribeUDRedisProxyInfoResponse is response schema for DescribeUDRedisProxyInfo action
type DescribeUDRedisProxyInfoResponse struct {
	response.CommonBase

	// 代理数据集
	DataSet []UDRedisProxyInfo
}

// NewDescribeUDRedisProxyInfoRequest will create request of DescribeUDRedisProxyInfo action.
func (c *UMemClient) NewDescribeUDRedisProxyInfoRequest() *DescribeUDRedisProxyInfoRequest {
	req := &DescribeUDRedisProxyInfoRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUDRedisProxyInfo

拉取udredis所有的代理信息
*/
func (c *UMemClient) DescribeUDRedisProxyInfo(req *DescribeUDRedisProxyInfoRequest) (*DescribeUDRedisProxyInfoResponse, error) {
	var err error
	var res DescribeUDRedisProxyInfoResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUDRedisProxyInfo", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUDRedisSlowlogRequest is request schema for DescribeUDRedisSlowlog action
type DescribeUDRedisSlowlogRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 实例id
	InstanceId *string `required:"true"`

	// 分页显示的条目数，默认为10
	Limit *int `required:"false"`

	// 代理Id
	ProxyId *string `required:"false"`
}

// DescribeUDRedisSlowlogResponse is response schema for DescribeUDRedisSlowlog action
type DescribeUDRedisSlowlogResponse struct {
	response.CommonBase

	// 条目数据
	DataSet []UDRedisSlowlogSet

	// 总条目数
	TotalCount int
}

// NewDescribeUDRedisSlowlogRequest will create request of DescribeUDRedisSlowlog action.
func (c *UMemClient) NewDescribeUDRedisSlowlogRequest() *DescribeUDRedisSlowlogRequest {
	req := &DescribeUDRedisSlowlogRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUDRedisSlowlog

查询UDRedis慢日志
*/
func (c *UMemClient) DescribeUDRedisSlowlog(req *DescribeUDRedisSlowlogRequest) (*DescribeUDRedisSlowlogResponse, error) {
	var err error
	var res DescribeUDRedisSlowlogResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUDRedisSlowlog", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUMemRequest is request schema for DescribeUMem action
type DescribeUMemRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 分页显示的条目数, 默认值为20
	Limit *int `required:"false"`

	// 分页显示的起始偏移, 默认值为0
	Offset *int `required:"false"`

	// 协议类型: memcache, redis
	Protocol *string `required:"true"`

	// 资源ID
	ResourceId *string `required:"false"`

	//
	ResourceType *string `required:"false"`
}

// DescribeUMemResponse is response schema for DescribeUMem action
type DescribeUMemResponse struct {
	response.CommonBase

	// UMem实例列表, 详细参见UMemDataSet
	DataSet []UMemDataSet

	// 根据过滤条件得到的总数
	TotalCount int
}

// NewDescribeUMemRequest will create request of DescribeUMem action.
func (c *UMemClient) NewDescribeUMemRequest() *DescribeUMemRequest {
	req := &DescribeUMemRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUMem

获取UMem列表
*/
func (c *UMemClient) DescribeUMem(req *DescribeUMemRequest) (*DescribeUMemResponse, error) {
	var err error
	var res DescribeUMemResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUMem", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUMemBackupRequest is request schema for DescribeUMemBackup action
type DescribeUMemBackupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 分页显示的条目数, 默认值为10
	Limit *int `required:"false"`

	// 分页显示的起始偏移, 默认值为0
	Offset *int `required:"false"`

	// 资源id
	SpaceId *string `required:"true"`
}

// DescribeUMemBackupResponse is response schema for DescribeUMemBackup action
type DescribeUMemBackupResponse struct {
	response.CommonBase

	// 分布式redis 备份，数组的每个元素为每个分片的备份
	DataSet []UMemBackupSet
}

// NewDescribeUMemBackupRequest will create request of DescribeUMemBackup action.
func (c *UMemClient) NewDescribeUMemBackupRequest() *DescribeUMemBackupRequest {
	req := &DescribeUMemBackupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUMemBackup

查询分布式redis备份
*/
func (c *UMemClient) DescribeUMemBackup(req *DescribeUMemBackupRequest) (*DescribeUMemBackupResponse, error) {
	var err error
	var res DescribeUMemBackupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUMemBackup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUMemBackupURLRequest is request schema for DescribeUMemBackupURL action
type DescribeUMemBackupURLRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 备份Id
	BackupId *string `required:"true"`

	// 分片id
	BlockId *string `required:"false"`

	// 资源id
	SpaceId *string `required:"true"`
}

// DescribeUMemBackupURLResponse is response schema for DescribeUMemBackupURL action
type DescribeUMemBackupURLResponse struct {
	response.CommonBase

	// 备份url，每个分片一个下载URL
	BackupURL []string
}

// NewDescribeUMemBackupURLRequest will create request of DescribeUMemBackupURL action.
func (c *UMemClient) NewDescribeUMemBackupURLRequest() *DescribeUMemBackupURLRequest {
	req := &DescribeUMemBackupURLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUMemBackupURL

获取分布式redis 备份下载链接
*/
func (c *UMemClient) DescribeUMemBackupURL(req *DescribeUMemBackupURLRequest) (*DescribeUMemBackupURLResponse, error) {
	var err error
	var res DescribeUMemBackupURLResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUMemBackupURL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUMemBlockInfoRequest is request schema for DescribeUMemBlockInfo action
type DescribeUMemBlockInfoRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 分页显示的条目数, 默认值为10
	Limit *int `required:"true"`

	// 分页显示的起始偏移, 默认值为0
	Offset *int `required:"true"`

	// UMem内存资源ID
	SpaceId *string `required:"true"`
}

// DescribeUMemBlockInfoResponse is response schema for DescribeUMemBlockInfo action
type DescribeUMemBlockInfoResponse struct {
	response.CommonBase

	// 分布式redis 分片信息
	DataSet []UMemBlockInfo
}

// NewDescribeUMemBlockInfoRequest will create request of DescribeUMemBlockInfo action.
func (c *UMemClient) NewDescribeUMemBlockInfoRequest() *DescribeUMemBlockInfoRequest {
	req := &DescribeUMemBlockInfoRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUMemBlockInfo

拉取UDRedis分片信息
*/
func (c *UMemClient) DescribeUMemBlockInfo(req *DescribeUMemBlockInfoRequest) (*DescribeUMemBlockInfoResponse, error) {
	var err error
	var res DescribeUMemBlockInfoResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUMemBlockInfo", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUMemPriceRequest is request schema for DescribeUMemPrice action
type DescribeUMemPriceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// umem 分片个数
	BlockCnt *int `required:"false"`

	// Year， Month， Dynamic 如果不指定，则一次性获取三种计费
	ChargeType *string `required:"false"`

	// 实例类型是否为性能增强型。默认为false，或者不填，true为性能增强型。
	HighPerformance *bool `required:"false"`

	// umem 代理CPU核心数
	ProxySize *int `required:"false"`

	// 购买UMem的时长，默认值为1
	Quantity *int `required:"false"`

	// 【该字段已废弃，请谨慎使用】
	RegionFlag *bool `required:"false" deprecated:"true"`

	// 购买umem大小,单位:GB,范围[1~1024]
	Size *int `required:"true"`

	// 空间类型:single(无热备),double(热备)(默认: double)
	Type *string `required:"true"`
}

// DescribeUMemPriceResponse is response schema for DescribeUMemPrice action
type DescribeUMemPriceResponse struct {
	response.CommonBase

	// 价格 参数见 UMemPriceSet
	DataSet []UMemPriceSet
}

// NewDescribeUMemPriceRequest will create request of DescribeUMemPrice action.
func (c *UMemClient) NewDescribeUMemPriceRequest() *DescribeUMemPriceRequest {
	req := &DescribeUMemPriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUMemPrice

获取UMem实例价格信息
*/
func (c *UMemClient) DescribeUMemPrice(req *DescribeUMemPriceRequest) (*DescribeUMemPriceResponse, error) {
	var err error
	var res DescribeUMemPriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUMemPrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUMemSpaceRequest is request schema for DescribeUMemSpace action
type DescribeUMemSpaceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"false"`

	// 返回数据长度, 默认为20
	Limit *int `required:"false"`

	// 数据偏移量, 默认为0
	Offset *int `required:"false"`

	// 协议类型: memcache, redis
	Protocol *string `required:"false"`

	// 内存空间ID (无ID，则获取所有)
	SpaceId *string `required:"false"`
}

// DescribeUMemSpaceResponse is response schema for DescribeUMemSpace action
type DescribeUMemSpaceResponse struct {
	response.CommonBase

	// JSON 格式的UMem内存空间实例列表, 详细参见 UMemSpaceSet
	DataSet []UMemSpaceSet

	// 根据过滤条件得到的总数
	TotalCount int
}

// NewDescribeUMemSpaceRequest will create request of DescribeUMemSpace action.
func (c *UMemClient) NewDescribeUMemSpaceRequest() *DescribeUMemSpaceRequest {
	req := &DescribeUMemSpaceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUMemSpace

获取UMem内存空间列表
*/
func (c *UMemClient) DescribeUMemSpace(req *DescribeUMemSpaceRequest) (*DescribeUMemSpaceResponse, error) {
	var err error
	var res DescribeUMemSpaceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUMemSpace", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUMemUpgradePriceRequest is request schema for DescribeUMemUpgradePrice action
type DescribeUMemUpgradePriceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 购买UMem大小,单位:GB
	Size *int `required:"true"`

	// 需要升级的空间的SpaceId
	SpaceId *string `required:"true"`

	// 空间类型:single(无热备),double(热备)(默认: double)
	Type *string `required:"true"`
}

// DescribeUMemUpgradePriceResponse is response schema for DescribeUMemUpgradePrice action
type DescribeUMemUpgradePriceResponse struct {
	response.CommonBase

	// 【该字段已废弃，请谨慎使用】
	DataSet PriceDataSet `deprecated:"true"`

	// 原价
	OriginalPrice int

	// 价格
	Price int
}

// NewDescribeUMemUpgradePriceRequest will create request of DescribeUMemUpgradePrice action.
func (c *UMemClient) NewDescribeUMemUpgradePriceRequest() *DescribeUMemUpgradePriceRequest {
	req := &DescribeUMemUpgradePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUMemUpgradePrice

获取UMem升级价格信息
*/
func (c *UMemClient) DescribeUMemUpgradePrice(req *DescribeUMemUpgradePriceRequest) (*DescribeUMemUpgradePriceResponse, error) {
	var err error
	var res DescribeUMemUpgradePriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUMemUpgradePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUMemcacheGroupRequest is request schema for DescribeUMemcacheGroup action
type DescribeUMemcacheGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"false"`

	// 组的ID,如果指定则获取描述，否则为列表操 作,需指定Offset/Limit
	GroupId *string `required:"false"`

	// 分页显示的条目数, 默认值为20
	Limit *int `required:"false"`

	// 分页显示的起始偏移, 默认值为0
	Offset *int `required:"false"`
}

// DescribeUMemcacheGroupResponse is response schema for DescribeUMemcacheGroup action
type DescribeUMemcacheGroupResponse struct {
	response.CommonBase

	// 组列表,参见 UMemcacheGroupSet
	DataSet []UMemcacheGroupSet

	// 组的总的节点个数
	TotalCount int
}

// NewDescribeUMemcacheGroupRequest will create request of DescribeUMemcacheGroup action.
func (c *UMemClient) NewDescribeUMemcacheGroupRequest() *DescribeUMemcacheGroupRequest {
	req := &DescribeUMemcacheGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUMemcacheGroup

显示Memcache
*/
func (c *UMemClient) DescribeUMemcacheGroup(req *DescribeUMemcacheGroupRequest) (*DescribeUMemcacheGroupResponse, error) {
	var err error
	var res DescribeUMemcacheGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUMemcacheGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUMemcachePriceRequest is request schema for DescribeUMemcachePrice action
type DescribeUMemcachePriceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 计费模式，Year， Month， Dynamic，默认: Dynamic 默认: 获取所有计费模式的价格
	ChargeType *string `required:"false"`

	// 购买umemcache的时长，默认值为1
	Quantity *int `required:"false"`

	// 容量大小,单位:GB 取值范围[1-32]
	Size *int `required:"true"`

	// 空间类型:single(无热备),double(热备)(默认: double)
	Type *string `required:"false"`
}

// DescribeUMemcachePriceResponse is response schema for DescribeUMemcachePrice action
type DescribeUMemcachePriceResponse struct {
	response.CommonBase

	// 价格列表, 参见 UMemcachePriceSet
	DataSet []UMemcachePriceSet
}

// NewDescribeUMemcachePriceRequest will create request of DescribeUMemcachePrice action.
func (c *UMemClient) NewDescribeUMemcachePriceRequest() *DescribeUMemcachePriceRequest {
	req := &DescribeUMemcachePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUMemcachePrice

获取umemcache组价格信息
*/
func (c *UMemClient) DescribeUMemcachePrice(req *DescribeUMemcachePriceRequest) (*DescribeUMemcachePriceResponse, error) {
	var err error
	var res DescribeUMemcachePriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUMemcachePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUMemcacheUpgradePriceRequest is request schema for DescribeUMemcacheUpgradePrice action
type DescribeUMemcacheUpgradePriceRequest struct {
	request.CommonBase

	// 需要升级的空间的GroupId,请参考DescribeUMemcacheGroup接口
	GroupId *string `required:"true"`

	// 购买umemcache大小,单位:GB
	Size *int `required:"true"`
}

// DescribeUMemcacheUpgradePriceResponse is response schema for DescribeUMemcacheUpgradePrice action
type DescribeUMemcacheUpgradePriceResponse struct {
	response.CommonBase

	// 价格，单位：元
	Price float64
}

// NewDescribeUMemcacheUpgradePriceRequest will create request of DescribeUMemcacheUpgradePrice action.
func (c *UMemClient) NewDescribeUMemcacheUpgradePriceRequest() *DescribeUMemcacheUpgradePriceRequest {
	req := &DescribeUMemcacheUpgradePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUMemcacheUpgradePrice

获取umemcache升级价格信息
*/
func (c *UMemClient) DescribeUMemcacheUpgradePrice(req *DescribeUMemcacheUpgradePriceRequest) (*DescribeUMemcacheUpgradePriceResponse, error) {
	var err error
	var res DescribeUMemcacheUpgradePriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUMemcacheUpgradePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeURedisBackupRequest is request schema for DescribeURedisBackup action
type DescribeURedisBackupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 组的ID
	GroupId *string `required:"false"`

	// 分页显示的条目数, 默认值为10
	Limit *int `required:"false"`

	// 分页显示的起始偏移, 默认值为0
	Offset *int `required:"false"`
}

// DescribeURedisBackupResponse is response schema for DescribeURedisBackup action
type DescribeURedisBackupResponse struct {
	response.CommonBase

	// 备份列表 参见 URedisBackupSet
	DataSet []URedisBackupSet

	// 用户名下总的备份个数
	TotalCount int
}

// NewDescribeURedisBackupRequest will create request of DescribeURedisBackup action.
func (c *UMemClient) NewDescribeURedisBackupRequest() *DescribeURedisBackupRequest {
	req := &DescribeURedisBackupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeURedisBackup

查询主备redis备份
*/
func (c *UMemClient) DescribeURedisBackup(req *DescribeURedisBackupRequest) (*DescribeURedisBackupResponse, error) {
	var err error
	var res DescribeURedisBackupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeURedisBackup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeURedisBackupURLRequest is request schema for DescribeURedisBackupURL action
type DescribeURedisBackupURLRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"false"`

	// 备份ID
	BackupId *string `required:"true"`

	// 实例名称
	GroupId *string `required:"false"`

	// 是否是跨机房URedis(默认false)
	RegionFlag *bool `required:"false"`

	// 跨机房URedis，slave所在可用区（必须和Zone在同一Region，且不可相同）
	SlaveZone *string `required:"false"`
}

// DescribeURedisBackupURLResponse is response schema for DescribeURedisBackupURL action
type DescribeURedisBackupURLResponse struct {
	response.CommonBase

	// 备份文件公网的地址
	BackupPath string

	// 备份文件公网的地址
	BackupURL string
}

// NewDescribeURedisBackupURLRequest will create request of DescribeURedisBackupURL action.
func (c *UMemClient) NewDescribeURedisBackupURLRequest() *DescribeURedisBackupURLRequest {
	req := &DescribeURedisBackupURLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeURedisBackupURL

获取主备Redis备份下载链接
*/
func (c *UMemClient) DescribeURedisBackupURL(req *DescribeURedisBackupURLRequest) (*DescribeURedisBackupURLResponse, error) {
	var err error
	var res DescribeURedisBackupURLResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeURedisBackupURL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeURedisConfigRequest is request schema for DescribeURedisConfig action
type DescribeURedisConfigRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 配置文件ID
	ConfigId *string `required:"false"`

	// 页显示的条目数, 默认值为10
	Limit *int `required:"false"`

	// 页显示的起始偏移, 默认值为0
	Offset *int `required:"false"`

	// 是否是跨机房URedis(默认false)
	RegionFlag *bool `required:"true"`

	// Redis版本号
	Version *string `required:"false"`
}

// DescribeURedisConfigResponse is response schema for DescribeURedisConfig action
type DescribeURedisConfigResponse struct {
	response.CommonBase

	// 配置文件列表 参见 URedisConfigSet
	DataSet []URedisConfigSet

	// 根据过滤条件得到的总数
	TotalCount int
}

// NewDescribeURedisConfigRequest will create request of DescribeURedisConfig action.
func (c *UMemClient) NewDescribeURedisConfigRequest() *DescribeURedisConfigRequest {
	req := &DescribeURedisConfigRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeURedisConfig

查询主备Redis所有配置文件
*/
func (c *UMemClient) DescribeURedisConfig(req *DescribeURedisConfigRequest) (*DescribeURedisConfigResponse, error) {
	var err error
	var res DescribeURedisConfigResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeURedisConfig", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeURedisGroupRequest is request schema for DescribeURedisGroup action
type DescribeURedisGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 组的ID,如果指定则获取描述，否则为列表操 作,需指定Offset/Limit
	GroupId *string `required:"false"`

	// 分页显示的条目数, 默认值为20
	Limit *int `required:"false"`

	// 分页显示的起始偏移, 默认值为0
	Offset *int `required:"false"`
}

// DescribeURedisGroupResponse is response schema for DescribeURedisGroup action
type DescribeURedisGroupResponse struct {
	response.CommonBase

	// 组列表 参见 URedisGroupSet
	DataSet []URedisGroupSet

	// 组的总的节点个数
	TotalCount int
}

// NewDescribeURedisGroupRequest will create request of DescribeURedisGroup action.
func (c *UMemClient) NewDescribeURedisGroupRequest() *DescribeURedisGroupRequest {
	req := &DescribeURedisGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeURedisGroup

查询主备Redis
*/
func (c *UMemClient) DescribeURedisGroup(req *DescribeURedisGroupRequest) (*DescribeURedisGroupResponse, error) {
	var err error
	var res DescribeURedisGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeURedisGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeURedisPriceRequest is request schema for DescribeURedisPrice action
type DescribeURedisPriceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 计费模式，Year， Month， Dynamic；如果不指定，则一次性获取三种计费
	ChargeType *string `required:"false"`

	// 查询高性能Redis， 默认为false， 或者不填， 查询高性能为true
	HighPerformance *bool `required:"false"`

	// 产品类型：MS_Redis（标准主备版），S_Redis（从库），默认为MS_Redis
	ProductType *string `required:"false"`

	// 计费模式为Dynamic时，购买的时长, 默认为1
	Quantity *int `required:"false"`

	// 是否是跨机房URedis(默认false)
	RegionFlag *bool `required:"false"`

	// 量大小,单位:GB  取值范围[1-32]
	Size *int `required:"true"`

	// 【该字段已废弃，请谨慎使用】
	Type *string `required:"false" deprecated:"true"`
}

// DescribeURedisPriceResponse is response schema for DescribeURedisPrice action
type DescribeURedisPriceResponse struct {
	response.CommonBase

	// 价格 参数见 UMemPriceSet
	DataSet []URedisPriceSet
}

// NewDescribeURedisPriceRequest will create request of DescribeURedisPrice action.
func (c *UMemClient) NewDescribeURedisPriceRequest() *DescribeURedisPriceRequest {
	req := &DescribeURedisPriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeURedisPrice

获取URedis价格信息
*/
func (c *UMemClient) DescribeURedisPrice(req *DescribeURedisPriceRequest) (*DescribeURedisPriceResponse, error) {
	var err error
	var res DescribeURedisPriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeURedisPrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeURedisSlowlogRequest is request schema for DescribeURedisSlowlog action
type DescribeURedisSlowlogRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 资源ID
	GroupId *string `required:"true"`

	// 分页显示的条目数，默认为10
	Limit *int `required:"false"`
}

// DescribeURedisSlowlogResponse is response schema for DescribeURedisSlowlog action
type DescribeURedisSlowlogResponse struct {
	response.CommonBase

	// 条目数据
	DataSet []URedisSlowlogSet

	// 总条目数
	TotalCount int
}

// NewDescribeURedisSlowlogRequest will create request of DescribeURedisSlowlog action.
func (c *UMemClient) NewDescribeURedisSlowlogRequest() *DescribeURedisSlowlogRequest {
	req := &DescribeURedisSlowlogRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeURedisSlowlog

查询URedis慢日志
*/
func (c *UMemClient) DescribeURedisSlowlog(req *DescribeURedisSlowlogRequest) (*DescribeURedisSlowlogResponse, error) {
	var err error
	var res DescribeURedisSlowlogResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeURedisSlowlog", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeURedisUpgradePriceRequest is request schema for DescribeURedisUpgradePrice action
type DescribeURedisUpgradePriceRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"false"`

	// 要升级的空间的GroupId,请参考DescribeURedisGroup接口
	GroupId *string `required:"true"`

	// 购买uredis大小,单位:GB,范围是[1-32]
	Size *int `required:"true"`

	// 【该字段已废弃，请谨慎使用】
	Type *string `required:"false" deprecated:"true"`
}

// DescribeURedisUpgradePriceResponse is response schema for DescribeURedisUpgradePrice action
type DescribeURedisUpgradePriceResponse struct {
	response.CommonBase

	// 扩容差价，单位: 元，保留小数点后两位有效数字
	Price float64
}

// NewDescribeURedisUpgradePriceRequest will create request of DescribeURedisUpgradePrice action.
func (c *UMemClient) NewDescribeURedisUpgradePriceRequest() *DescribeURedisUpgradePriceRequest {
	req := &DescribeURedisUpgradePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeURedisUpgradePrice

获取uredis升级价格信息
*/
func (c *UMemClient) DescribeURedisUpgradePrice(req *DescribeURedisUpgradePriceRequest) (*DescribeURedisUpgradePriceResponse, error) {
	var err error
	var res DescribeURedisUpgradePriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeURedisUpgradePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeURedisVersionRequest is request schema for DescribeURedisVersion action
type DescribeURedisVersionRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

}

// DescribeURedisVersionResponse is response schema for DescribeURedisVersion action
type DescribeURedisVersionResponse struct {
	response.CommonBase

	// 组列表 参见 URedisVersionSet
	DataSet []URedisVersionSet

	// 总版本个数
	TotalCount int
}

// NewDescribeURedisVersionRequest will create request of DescribeURedisVersion action.
func (c *UMemClient) NewDescribeURedisVersionRequest() *DescribeURedisVersionRequest {
	req := &DescribeURedisVersionRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeURedisVersion

获取主Redis可用版本
*/
func (c *UMemClient) DescribeURedisVersion(req *DescribeURedisVersionRequest) (*DescribeURedisVersionResponse, error) {
	var err error
	var res DescribeURedisVersionResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeURedisVersion", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// FlushallURedisGroupRequest is request schema for FlushallURedisGroup action
type FlushallURedisGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 清空的db，FlushType为FlushDb，此项为必传项
	DbNum *int `required:"false"`

	// FlushDb或FlushAll
	FlushType *string `required:"true"`

	// 组的ID
	GroupId *string `required:"true"`

	// OrganizationId
	OrganizationId *int `required:"false"`

	// 跨机房URedis，slave所在可用区（必须和Zone在同一Region，且不可相同）
	SlaveZone *string `required:"false"`

	// company_id
	TopOrganizationId *int `required:"false"`
}

// FlushallURedisGroupResponse is response schema for FlushallURedisGroup action
type FlushallURedisGroupResponse struct {
	response.CommonBase
}

// NewFlushallURedisGroupRequest will create request of FlushallURedisGroup action.
func (c *UMemClient) NewFlushallURedisGroupRequest() *FlushallURedisGroupRequest {
	req := &FlushallURedisGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: FlushallURedisGroup

清除主备redis数据
*/
func (c *UMemClient) FlushallURedisGroup(req *FlushallURedisGroupRequest) (*FlushallURedisGroupResponse, error) {
	var err error
	var res FlushallURedisGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("FlushallURedisGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetUMemSpaceStateRequest is request schema for GetUMemSpaceState action
type GetUMemSpaceStateRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"false"`

	// 内存空间ID
	SpaceId *string `required:"true"`
}

// GetUMemSpaceStateResponse is response schema for GetUMemSpaceState action
type GetUMemSpaceStateResponse struct {
	response.CommonBase

	// Starting:创建中 Running:运行中 Fail:失败
	State string
}

// NewGetUMemSpaceStateRequest will create request of GetUMemSpaceState action.
func (c *UMemClient) NewGetUMemSpaceStateRequest() *GetUMemSpaceStateRequest {
	req := &GetUMemSpaceStateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetUMemSpaceState

获取UMem内存空间列表
*/
func (c *UMemClient) GetUMemSpaceState(req *GetUMemSpaceStateRequest) (*GetUMemSpaceStateResponse, error) {
	var err error
	var res GetUMemSpaceStateResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetUMemSpaceState", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ISolationURedisGroupRequest is request schema for ISolationURedisGroup action
type ISolationURedisGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 组的ID
	GroupId *string `required:"true"`

	// 跨机房URedis，slave所在可用区（必须和Zone在同一Region，且不可相同）
	SlaveZone *string `required:"false"`

	// UNBind(关闭)或Bind(打开)
	TransformType *string `required:"true"`
}

// ISolationURedisGroupResponse is response schema for ISolationURedisGroup action
type ISolationURedisGroupResponse struct {
	response.CommonBase
}

// NewISolationURedisGroupRequest will create request of ISolationURedisGroup action.
func (c *UMemClient) NewISolationURedisGroupRequest() *ISolationURedisGroupRequest {
	req := &ISolationURedisGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ISolationURedisGroup

打开/关闭URedis
*/
func (c *UMemClient) ISolationURedisGroup(req *ISolationURedisGroupRequest) (*ISolationURedisGroupResponse, error) {
	var err error
	var res ISolationURedisGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ISolationURedisGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyUMemSpaceNameRequest is request schema for ModifyUMemSpaceName action
type ModifyUMemSpaceNameRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"false"`

	// 新的名称,长度(6<=size<=63)
	Name *string `required:"true"`

	// UMem内存空间ID
	SpaceId *string `required:"true"`
}

// ModifyUMemSpaceNameResponse is response schema for ModifyUMemSpaceName action
type ModifyUMemSpaceNameResponse struct {
	response.CommonBase
}

// NewModifyUMemSpaceNameRequest will create request of ModifyUMemSpaceName action.
func (c *UMemClient) NewModifyUMemSpaceNameRequest() *ModifyUMemSpaceNameRequest {
	req := &ModifyUMemSpaceNameRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyUMemSpaceName

修改UMem内存空间名称
*/
func (c *UMemClient) ModifyUMemSpaceName(req *ModifyUMemSpaceNameRequest) (*ModifyUMemSpaceNameResponse, error) {
	var err error
	var res ModifyUMemSpaceNameResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyUMemSpaceName", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyURedisConfigRequest is request schema for ModifyURedisConfig action
type ModifyURedisConfigRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 配置文件的ID
	ConfigId *string `required:"true"`

	// 如果实例使用默认配置创建，修改配置信息需要填写GroupId
	GroupId *string `required:"false"`

	// 参数名称
	Key *string `required:"true"`

	// 是否是跨机房URedis(默认false)
	RegionFlag *bool `required:"false"`

	// 对应参数的值
	Value *string `required:"true"`
}

// ModifyURedisConfigResponse is response schema for ModifyURedisConfig action
type ModifyURedisConfigResponse struct {
	response.CommonBase
}

// NewModifyURedisConfigRequest will create request of ModifyURedisConfig action.
func (c *UMemClient) NewModifyURedisConfigRequest() *ModifyURedisConfigRequest {
	req := &ModifyURedisConfigRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyURedisConfig

修改主备Redis配置文件参数
*/
func (c *UMemClient) ModifyURedisConfig(req *ModifyURedisConfigRequest) (*ModifyURedisConfigResponse, error) {
	var err error
	var res ModifyURedisConfigResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyURedisConfig", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyURedisGroupNameRequest is request schema for ModifyURedisGroupName action
type ModifyURedisGroupNameRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 组的ID
	GroupId *string `required:"true"`

	// Redis组名称 (范围[6-63],只能包含英文、数字以及符号-和_)
	Name *string `required:"true"`
}

// ModifyURedisGroupNameResponse is response schema for ModifyURedisGroupName action
type ModifyURedisGroupNameResponse struct {
	response.CommonBase
}

// NewModifyURedisGroupNameRequest will create request of ModifyURedisGroupName action.
func (c *UMemClient) NewModifyURedisGroupNameRequest() *ModifyURedisGroupNameRequest {
	req := &ModifyURedisGroupNameRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyURedisGroupName

修改主备redis名称
*/
func (c *UMemClient) ModifyURedisGroupName(req *ModifyURedisGroupNameRequest) (*ModifyURedisGroupNameResponse, error) {
	var err error
	var res ModifyURedisGroupNameResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyURedisGroupName", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyURedisGroupPasswordRequest is request schema for ModifyURedisGroupPassword action
type ModifyURedisGroupPasswordRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"false"`

	// 组的ID
	GroupId *string `required:"true"`

	// 新密码字符串，要求长度为6~36个字符,且只能包含英文、数字以及-和下划线；并且需要base64加密；如要取消密码，此值为空字符串，
	Password *string `required:"true"`

	//
	ResourceType *string `required:"false"`
}

// ModifyURedisGroupPasswordResponse is response schema for ModifyURedisGroupPassword action
type ModifyURedisGroupPasswordResponse struct {
	response.CommonBase
}

// NewModifyURedisGroupPasswordRequest will create request of ModifyURedisGroupPassword action.
func (c *UMemClient) NewModifyURedisGroupPasswordRequest() *ModifyURedisGroupPasswordRequest {
	req := &ModifyURedisGroupPasswordRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyURedisGroupPassword

修改主备密码/重置密码
*/
func (c *UMemClient) ModifyURedisGroupPassword(req *ModifyURedisGroupPasswordRequest) (*ModifyURedisGroupPasswordResponse, error) {
	var err error
	var res ModifyURedisGroupPasswordResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyURedisGroupPassword", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// RemoveUDRedisDataRequest is request schema for RemoveUDRedisData action
type RemoveUDRedisDataRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 实例id
	SpaceId *string `required:"true"`
}

// RemoveUDRedisDataResponse is response schema for RemoveUDRedisData action
type RemoveUDRedisDataResponse struct {
	response.CommonBase
}

// NewRemoveUDRedisDataRequest will create request of RemoveUDRedisData action.
func (c *UMemClient) NewRemoveUDRedisDataRequest() *RemoveUDRedisDataRequest {
	req := &RemoveUDRedisDataRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: RemoveUDRedisData

清除udredis实例数据
*/
func (c *UMemClient) RemoveUDRedisData(req *RemoveUDRedisDataRequest) (*RemoveUDRedisDataResponse, error) {
	var err error
	var res RemoveUDRedisDataResponse

	reqCopier := *req

	err = c.Client.InvokeAction("RemoveUDRedisData", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ResizeUDredisSpaceRequest is request schema for ResizeUDredisSpace action
type ResizeUDredisSpaceRequest struct {
	request.CommonBase

	//
	CouponId *string `required:"false"`

	//
	Size *int `required:"true"`

	//
	SpaceId *string `required:"true"`
}

// ResizeUDredisSpaceResponse is response schema for ResizeUDredisSpace action
type ResizeUDredisSpaceResponse struct {
	response.CommonBase
}

// NewResizeUDredisSpaceRequest will create request of ResizeUDredisSpace action.
func (c *UMemClient) NewResizeUDredisSpaceRequest() *ResizeUDredisSpaceRequest {
	req := &ResizeUDredisSpaceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: ResizeUDredisSpace
*/
func (c *UMemClient) ResizeUDredisSpace(req *ResizeUDredisSpaceRequest) (*ResizeUDredisSpaceResponse, error) {
	var err error
	var res ResizeUDredisSpaceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ResizeUDredisSpace", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ResizeUMemSpaceRequest is request schema for ResizeUMemSpace action
type ResizeUMemSpaceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 【该字段已废弃，请谨慎使用】
	ChargeType *string `required:"false" deprecated:"true"`

	// 使用的代金券Id
	CouponId *string `required:"false"`

	// 内存大小, 单位:GB (需要大于原size,<= 1024)
	Size *int `required:"true"`

	// UMem 内存空间Id
	SpaceId *string `required:"true"`

	// 空间类型:single(无热备),double(热备)(默认: double)
	Type *string `required:"false"`
}

// ResizeUMemSpaceResponse is response schema for ResizeUMemSpace action
type ResizeUMemSpaceResponse struct {
	response.CommonBase
}

// NewResizeUMemSpaceRequest will create request of ResizeUMemSpace action.
func (c *UMemClient) NewResizeUMemSpaceRequest() *ResizeUMemSpaceRequest {
	req := &ResizeUMemSpaceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ResizeUMemSpace

调整内存空间容量，只支持存量老分布式产品，不支持高性能分布式
*/
func (c *UMemClient) ResizeUMemSpace(req *ResizeUMemSpaceRequest) (*ResizeUMemSpaceResponse, error) {
	var err error
	var res ResizeUMemSpaceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ResizeUMemSpace", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ResizeURedisGroupRequest is request schema for ResizeURedisGroup action
type ResizeURedisGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"false"`

	//
	ChargeType *string `required:"false"`

	// 代金券ID 请参考DescribeCoupon接口
	CouponId *int `required:"false"`

	// 组ID
	GroupId *string `required:"true"`

	// 内存大小, 单位:GB (需要大于原size,且小于等于32) 目前仅支持1/2/4/8/16/32 G 六种容量规格
	Size *int `required:"true"`

	// 空间类型:single(无热备),double(热备)(默认: double)
	Type *string `required:"false"`
}

// ResizeURedisGroupResponse is response schema for ResizeURedisGroup action
type ResizeURedisGroupResponse struct {
	response.CommonBase
}

// NewResizeURedisGroupRequest will create request of ResizeURedisGroup action.
func (c *UMemClient) NewResizeURedisGroupRequest() *ResizeURedisGroupRequest {
	req := &ResizeURedisGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ResizeURedisGroup

通过调用CheckURedisAllowance接口，检查资源情况，根据不同情形来调整主备redis容量，其中主要包括可用区资源不足无法扩容，主备所在宿主机资源不足需要迁移完成扩容（需要主从切换，会闪断及负载升高），以及直接扩容（业务无感知）
*/
func (c *UMemClient) ResizeURedisGroup(req *ResizeURedisGroupRequest) (*ResizeURedisGroupResponse, error) {
	var err error
	var res ResizeURedisGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ResizeURedisGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// RestartUMemcacheGroupRequest is request schema for RestartUMemcacheGroup action
type RestartUMemcacheGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"true"`

	// 组的ID
	GroupId *string `required:"true"`
}

// RestartUMemcacheGroupResponse is response schema for RestartUMemcacheGroup action
type RestartUMemcacheGroupResponse struct {
	response.CommonBase
}

// NewRestartUMemcacheGroupRequest will create request of RestartUMemcacheGroup action.
func (c *UMemClient) NewRestartUMemcacheGroupRequest() *RestartUMemcacheGroupRequest {
	req := &RestartUMemcacheGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: RestartUMemcacheGroup

重启单机Memcache
*/
func (c *UMemClient) RestartUMemcacheGroup(req *RestartUMemcacheGroupRequest) (*RestartUMemcacheGroupResponse, error) {
	var err error
	var res RestartUMemcacheGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("RestartUMemcacheGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// RestartURedisGroupRequest is request schema for RestartURedisGroup action
type RestartURedisGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"false"`

	// 资源ID
	GroupId *string `required:"true"`
}

// RestartURedisGroupResponse is response schema for RestartURedisGroup action
type RestartURedisGroupResponse struct {
	response.CommonBase
}

// NewRestartURedisGroupRequest will create request of RestartURedisGroup action.
func (c *UMemClient) NewRestartURedisGroupRequest() *RestartURedisGroupRequest {
	req := &RestartURedisGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: RestartURedisGroup

重启主备实例
*/
func (c *UMemClient) RestartURedisGroup(req *RestartURedisGroupRequest) (*RestartURedisGroupResponse, error) {
	var err error
	var res RestartURedisGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("RestartURedisGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ShutdownURedisGroupRequest is request schema for ShutdownURedisGroup action
type ShutdownURedisGroupRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 资源ID
	GroupId *string `required:"true"`
}

// ShutdownURedisGroupResponse is response schema for ShutdownURedisGroup action
type ShutdownURedisGroupResponse struct {
	response.CommonBase
}

// NewShutdownURedisGroupRequest will create request of ShutdownURedisGroup action.
func (c *UMemClient) NewShutdownURedisGroupRequest() *ShutdownURedisGroupRequest {
	req := &ShutdownURedisGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ShutdownURedisGroup

关闭主备实例
*/
func (c *UMemClient) ShutdownURedisGroup(req *ShutdownURedisGroupRequest) (*ShutdownURedisGroupResponse, error) {
	var err error
	var res ShutdownURedisGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ShutdownURedisGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// StartURedisGroupRequest is request schema for StartURedisGroup action
type StartURedisGroupRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 资源ID
	GroupId *string `required:"true"`
}

// StartURedisGroupResponse is response schema for StartURedisGroup action
type StartURedisGroupResponse struct {
	response.CommonBase
}

// NewStartURedisGroupRequest will create request of StartURedisGroup action.
func (c *UMemClient) NewStartURedisGroupRequest() *StartURedisGroupRequest {
	req := &StartURedisGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: StartURedisGroup

实例关闭状态下，启动实例
*/
func (c *UMemClient) StartURedisGroup(req *StartURedisGroupRequest) (*StartURedisGroupResponse, error) {
	var err error
	var res StartURedisGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("StartURedisGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateURedisBackupStrategyRequest is request schema for UpdateURedisBackupStrategy action
type UpdateURedisBackupStrategyRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"false"`

	// 是否打开默认备份功能。enable(打开)，disable(关闭)，默认enable
	AutoBackup *string `required:"false"`

	// 备份时间，默认为0
	BackupTime *string `required:"true"`

	// 组的ID
	GroupId *string `required:"true"`

	// 跨机房URedis，slave所在可用区（必须和Zone在同一Region，且不可相同）
	SlaveZone *string `required:"false"`
}

// UpdateURedisBackupStrategyResponse is response schema for UpdateURedisBackupStrategy action
type UpdateURedisBackupStrategyResponse struct {
	response.CommonBase
}

// NewUpdateURedisBackupStrategyRequest will create request of UpdateURedisBackupStrategy action.
func (c *UMemClient) NewUpdateURedisBackupStrategyRequest() *UpdateURedisBackupStrategyRequest {
	req := &UpdateURedisBackupStrategyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateURedisBackupStrategy

URedisBackupStrategy
*/
func (c *UMemClient) UpdateURedisBackupStrategy(req *UpdateURedisBackupStrategyRequest) (*UpdateURedisBackupStrategyResponse, error) {
	var err error
	var res UpdateURedisBackupStrategyResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateURedisBackupStrategy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateURedisRewriteTimeRequest is request schema for UpdateURedisRewriteTime action
type UpdateURedisRewriteTimeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Zone *string `required:"true"`

	// 实例名称
	GroupId *string `required:"true"`

	// 重写时间
	RewriteTime *int `required:"true"`

	// 跨机房URedis，slave所在可用区（必须和Zone在同一Region，且不可相同）
	SlaveZone *string `required:"false"`
}

// UpdateURedisRewriteTimeResponse is response schema for UpdateURedisRewriteTime action
type UpdateURedisRewriteTimeResponse struct {
	response.CommonBase
}

// NewUpdateURedisRewriteTimeRequest will create request of UpdateURedisRewriteTime action.
func (c *UMemClient) NewUpdateURedisRewriteTimeRequest() *UpdateURedisRewriteTimeRequest {
	req := &UpdateURedisRewriteTimeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateURedisRewriteTime

修改主备redis重写时间
*/
func (c *UMemClient) UpdateURedisRewriteTime(req *UpdateURedisRewriteTimeRequest) (*UpdateURedisRewriteTimeResponse, error) {
	var err error
	var res UpdateURedisRewriteTimeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateURedisRewriteTime", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

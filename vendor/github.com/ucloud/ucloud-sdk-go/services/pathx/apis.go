// Code is generated by ucloud-model, DO NOT EDIT IT.

package pathx

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// PathX API Schema

// BindPathXSSLRequest is request schema for BindPathXSSL action
type BindPathXSSLRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// 绑定SSL证书的HTTPS端口。Port.0 Port.1对应多个Port。如果Port不存在则不会绑定
	Port []int `required:"true"`

	// 证书ID，如果没有指定证书ID也没有申请免费证书，HTTPS接入无法正常工作
	SSLId *string `required:"true"`

	// UGA实例ID
	UGAId *string `required:"true"`
}

// BindPathXSSLResponse is response schema for BindPathXSSL action
type BindPathXSSLResponse struct {
	response.CommonBase
}

// NewBindPathXSSLRequest will create request of BindPathXSSL action.
func (c *PathXClient) NewBindPathXSSLRequest() *BindPathXSSLRequest {
	req := &BindPathXSSLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: BindPathXSSL

绑定PathX SSL证书
*/
func (c *PathXClient) BindPathXSSL(req *BindPathXSSLRequest) (*BindPathXSSLResponse, error) {
	var err error
	var res BindPathXSSLResponse

	reqCopier := *req

	err = c.Client.InvokeAction("BindPathXSSL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateGlobalSSHInstanceRequest is request schema for CreateGlobalSSHInstance action
type CreateGlobalSSHInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID,如org-xxxx。请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// 填写支持SSH访问IP的地区名称，如“洛杉矶”，“新加坡”，“香港”，“东京”，“华盛顿”，“法兰克福”，“首尔”。Area和AreaCode两者必填一个
	Area *string `required:"true"`

	// AreaCode, 区域航空港国际通用代码。Area和AreaCode两者必填一个
	AreaCode *string `required:"true"`

	// Ultimate版本带宽包大小,枚举值：[0,20,40]。单位MB
	BandwidthPackage *int `required:"false"`

	// 支付方式，如按月：Month、 按年：Year、按时：Dynamic
	ChargeType *string `required:"false"`

	// 使用代金券可冲抵部分费用
	CouponId *string `required:"false"`

	// InstanceType等于Basic时可以在["cn-bj2","cn-sh2","cn-gd"]中选择1个作为转发机房，其他付费版默认配置三个转发机房
	ForwardRegion *string `required:"false"`

	// 枚举值：["Ultimate","Enterprise","Basic","Primary"], 分别代表旗舰版，企业版，基础版，入门版
	InstanceType *string `required:"false"`

	// 源站服务器监听的SSH端口，可取范围[1-65535]，不能使用80，443,  65123端口。如果InstanceType=Free，取值范围缩小为[22,3389],linux系统选择22，windows系统自动选3389。
	Port *int `required:"true"`

	// 购买数量按月购买至月底请传0
	Quantity *int `required:"false"`

	// 备注信息
	Remark *string `required:"false"`

	// 被SSH访问的源站IP，仅支持IPv4地址。
	TargetIP *string `required:"true"`
}

// CreateGlobalSSHInstanceResponse is response schema for CreateGlobalSSHInstance action
type CreateGlobalSSHInstanceResponse struct {
	response.CommonBase

	// 加速域名，访问该域名可就近接入
	AcceleratingDomain string

	// 实例ID，资源唯一标识
	InstanceId string

	// 【该字段已废弃，请谨慎使用】
	Message string `deprecated:"true"`
}

// NewCreateGlobalSSHInstanceRequest will create request of CreateGlobalSSHInstance action.
func (c *PathXClient) NewCreateGlobalSSHInstanceRequest() *CreateGlobalSSHInstanceRequest {
	req := &CreateGlobalSSHInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateGlobalSSHInstance

创建GlobalSSH实例
*/
func (c *PathXClient) CreateGlobalSSHInstance(req *CreateGlobalSSHInstanceRequest) (*CreateGlobalSSHInstanceResponse, error) {
	var err error
	var res CreateGlobalSSHInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateGlobalSSHInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreatePathXSSLRequest is request schema for CreatePathXSSL action
type CreatePathXSSLRequest struct {
	request.CommonBase

	// [公共参数] 项目ID org-xxx格式。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// CA颁发证书内容
	CACert *string `required:"false"`

	// 加密证书的私钥，不可使用密码保护，开启密码保护后，重启服务需要输入密码
	PrivateKey *string `required:"false"`

	// SSL证书的完整内容，私钥不可使用密码，包括加密证书的私钥、用户证书或CA证书等
	SSLContent *string `required:"false"`

	// SSL证书的名字
	SSLName *string `required:"true"`

	// 所添加的SSL证书类型，目前只支持Pem格式
	SSLType *string `required:"false"`

	// 用户自签证书内容
	UserCert *string `required:"false"`
}

// CreatePathXSSLResponse is response schema for CreatePathXSSL action
type CreatePathXSSLResponse struct {
	response.CommonBase

	// SSL证书的Id
	SSLId string
}

// NewCreatePathXSSLRequest will create request of CreatePathXSSL action.
func (c *PathXClient) NewCreatePathXSSLRequest() *CreatePathXSSLRequest {
	req := &CreatePathXSSLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreatePathXSSL

创建SSL证书，可以把整个 Pem 证书内容传到SSLContent，或者把证书、私钥、CA证书分别传过来
*/
func (c *PathXClient) CreatePathXSSL(req *CreatePathXSSLRequest) (*CreatePathXSSLResponse, error) {
	var err error
	var res CreatePathXSSLResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreatePathXSSL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateUGA3InstanceRequest is request schema for CreateUGA3Instance action
type CreateUGA3InstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID,如org-xxxx。请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// 加速大区,默认Global,[    "Global":"全球",    "AP":"亚太",    "EU":"欧洲",    "ME":"中东",    "OA":"大洋洲",    "AF":"非洲",    "NA":"北美洲",    "SA":"南美洲"]
	AccelerationArea *string `required:"false"`

	// 非必填,如果不填，会根据Domain 和IPList 去选一个最近的源站区域BKK表示AreaCode;曼谷表示Area["BKK":"曼谷","DXB":"迪拜","FRA":"法兰克福","SGN":"胡志明市","HKG":"香港",CGK":"雅加达","LOS":"拉各斯","LHR":"伦敦","LAX":"洛杉矶","MNL":"马尼拉","DME":"莫斯科","BOM":"孟买","MSP":"圣保罗","ICN":"首尔","PVG":"上海","SIN":"新加坡","NRT":"东京","IAD":"华盛顿","TPE": "台北"]
	AreaCode *string `required:"false"`

	// 实例的共享带宽
	Bandwidth *string `required:"true"`

	// 支付方式，如按月、按年、按时
	ChargeType *string `required:"false"`

	// 使用代金券可冲抵部分费用，仅全地域可用的代金券
	CouponId *string `required:"false"`

	// 加速配置实例名称,默认PathX
	Name *string `required:"false"`

	// 加速源域名，IPList和Domain二选一必填
	OriginDomain *string `required:"false"`

	// 加速源IP，多个IP用英文半角逗号(,)隔开；IPList和Domain二选一必填
	OriginIPList *string `required:"false"`

	// 购买周期
	Quantity *int `required:"false"`

	// 备注项
	Remark *string `required:"false"`
}

// CreateUGA3InstanceResponse is response schema for CreateUGA3Instance action
type CreateUGA3InstanceResponse struct {
	response.CommonBase

	// 加速域名 用户可把业务域名CName到此域名上
	CName string

	// 加速配置ID
	InstanceId string

	// 返回信息
	Message string
}

// NewCreateUGA3InstanceRequest will create request of CreateUGA3Instance action.
func (c *PathXClient) NewCreateUGA3InstanceRequest() *CreateUGA3InstanceRequest {
	req := &CreateUGA3InstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateUGA3Instance

创建全球统一接入加速配置项
*/
func (c *PathXClient) CreateUGA3Instance(req *CreateUGA3InstanceRequest) (*CreateUGA3InstanceResponse, error) {
	var err error
	var res CreateUGA3InstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateUGA3Instance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateUGA3PortRequest is request schema for CreateUGA3Port action
type CreateUGA3PortRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// 加速配置实例ID
	InstanceId *string `required:"true"`

	// TCP接入端口，禁用65123端口
	TCP []int `required:"false"`

	// TCP回源端口
	TCPRS []int `required:"false"`
}

// CreateUGA3PortResponse is response schema for CreateUGA3Port action
type CreateUGA3PortResponse struct {
	response.CommonBase

	// 返回信息 说明
	Message string
}

// NewCreateUGA3PortRequest will create request of CreateUGA3Port action.
func (c *PathXClient) NewCreateUGA3PortRequest() *CreateUGA3PortRequest {
	req := &CreateUGA3PortRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateUGA3Port

创建统一接入加速实例端口，目前仅支持四层TCP端口
*/
func (c *PathXClient) CreateUGA3Port(req *CreateUGA3PortRequest) (*CreateUGA3PortResponse, error) {
	var err error
	var res CreateUGA3PortResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateUGA3Port", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateUGAForwarderRequest is request schema for CreateUGAForwarder action
type CreateUGAForwarderRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// HTTP接入HTTP回源转发，接入端口。禁用65123端口
	HTTPHTTP []int `required:"false"`

	// HTTP接入HTTP回源转发，源站监听端口
	HTTPHTTPRS []int `required:"false"`

	// HTTPS接入HTTP回源转发，接入端口。禁用65123端口
	HTTPSHTTP []int `required:"false"`

	// HTTPS接入HTTP回源转发，回源端口
	HTTPSHTTPRS []int `required:"false"`

	// HTTPS接入HTTPS回源转发，接入端口。禁用65123端口
	HTTPSHTTPS []int `required:"false"`

	// HTTPS接入HTTPS回源转发，源站监听端口
	HTTPSHTTPSRS []int `required:"false"`

	// TCP接入端口，禁用65123端口
	TCP []int `required:"false"`

	// TCP回源端口
	TCPRS []int `required:"false"`

	// UDP接入端口，禁用65123端口
	UDP []int `required:"false"`

	// UDP回源端口
	UDPRS []int `required:"false"`

	// 加速配置实例ID
	UGAId *string `required:"true"`

	// WebSocketS接入WebSocket回源转发，接入端口。禁用65123。
	WSSWS []int `required:"false"`

	// WebSocketS接入WebSocket回源转发，源站监听端口。
	WSSWSRS []int `required:"false"`

	// WebSocketS接入WebSocketS回源转发，接入端口。禁用65123。
	WSSWSS []int `required:"false"`

	// WebSocketS接入WebSocketS回源转发，源站监听端口。
	WSSWSSRS []int `required:"false"`

	// WebSocket接入WebSocket回源转发，接入端口。禁用65123。
	WSWS []int `required:"false"`

	// WebSocket接入WebSocket回源转发，源站监听端口
	WSWSRS []int `required:"false"`
}

// CreateUGAForwarderResponse is response schema for CreateUGAForwarder action
type CreateUGAForwarderResponse struct {
	response.CommonBase

	// 【该字段已废弃，请谨慎使用】
	Message string `deprecated:"true"`
}

// NewCreateUGAForwarderRequest will create request of CreateUGAForwarder action.
func (c *PathXClient) NewCreateUGAForwarderRequest() *CreateUGAForwarderRequest {
	req := &CreateUGAForwarderRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateUGAForwarder

创建加速实例转发器，支持HTTPS接入HTTPS回源、HTTPS接入HTTP回源、HTTP接入HTTP回源、TCP接入TCP回源、UDP接入UDP回源、 支持WSS接入WSS回源、WSS接入WS回源、WS接入WS回源
*/
func (c *PathXClient) CreateUGAForwarder(req *CreateUGAForwarderRequest) (*CreateUGAForwarderResponse, error) {
	var err error
	var res CreateUGAForwarderResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateUGAForwarder", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateUGAInstanceRequest is request schema for CreateUGAInstance action
type CreateUGAInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID,如org-xxxx。请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// 加速源域名，IPList和Domain二选一必填
	Domain *string `required:"false"`

	// 加速源IP，多个IP用英文半角逗号(,)隔开；IPList和Domain二选一必填
	IPList *string `required:"false"`

	// 加速配置实例名称
	Name *string `required:"true"`

	// TCP端口号，已废弃。请使用 CreateUGAForwarder API 创建端口
	TCP []string `required:"false"`

	// UDP端口号，已废弃。请使用 CreateUGAForwarder API 创建端口
	UDP []string `required:"false"`
}

// CreateUGAInstanceResponse is response schema for CreateUGAInstance action
type CreateUGAInstanceResponse struct {
	response.CommonBase

	// 加速域名 用户可把业务域名CName到此域名上。注意：未绑定线路情况时 加速域名解析不出IP。
	CName string

	// 返回信息
	Message string

	// 加速配置ID
	UGAId string
}

// NewCreateUGAInstanceRequest will create request of CreateUGAInstance action.
func (c *PathXClient) NewCreateUGAInstanceRequest() *CreateUGAInstanceRequest {
	req := &CreateUGAInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateUGAInstance

创建全球加速配置项
*/
func (c *PathXClient) CreateUGAInstance(req *CreateUGAInstanceRequest) (*CreateUGAInstanceResponse, error) {
	var err error
	var res CreateUGAInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateUGAInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateUPathRequest is request schema for CreateUPath action
type CreateUPathRequest struct {
	request.CommonBase

	// [公共参数] 项目ID,如org-xxxx。请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// 当PostPaid为false时，该值为预付费固定带宽；当PostPaid为true时，该值为后付费保底带宽，保底带宽越大可用的上限带宽越大。最小1Mbps,最大带宽由 DescribePathXLineConfig 接口获得。可联系产品团队咨询最大带宽。
	Bandwidth *int `required:"true"`

	// 计费模式，默认为Month 按月收费,可选范围['Month','Year','Dynamic']
	ChargeType *string `required:"false"`

	// 代金券Id
	CouponId *string `required:"false"`

	// 选择的线路，由DescribePathXLineConfig接口提供
	LineId *string `required:"true"`

	// 名字，便于记忆区分
	Name *string `required:"true"`

	// private:专线线路；public:海外SD-WAN。默认为private。
	PathType *string `required:"false"`

	// 是否开启后付费, 默认为false ，不开启后付费。当ChargeType为Dynamic时不能开启后付费。
	PostPaid *bool `required:"false"`

	// 购买周期，ChargeType为Month时，Quantity默认为0代表购买到月底，按时和按年付费该参数必须大于0
	Quantity *int `required:"false"`
}

// CreateUPathResponse is response schema for CreateUPath action
type CreateUPathResponse struct {
	response.CommonBase

	// 加速线路实例Id
	PathId string

	// 【该字段已废弃，请谨慎使用】
	UPathId string `deprecated:"true"`
}

// NewCreateUPathRequest will create request of CreateUPath action.
func (c *PathXClient) NewCreateUPathRequest() *CreateUPathRequest {
	req := &CreateUPathRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateUPath

创建UPath
*/
func (c *PathXClient) CreateUPath(req *CreateUPathRequest) (*CreateUPathResponse, error) {
	var err error
	var res CreateUPathResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateUPath", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteGlobalSSHInstanceRequest is request schema for DeleteGlobalSSHInstance action
type DeleteGlobalSSHInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID,如org-xxxx。请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// 实例Id,资源的唯一标识
	InstanceId *string `required:"true"`
}

// DeleteGlobalSSHInstanceResponse is response schema for DeleteGlobalSSHInstance action
type DeleteGlobalSSHInstanceResponse struct {
	response.CommonBase

	// 提示信息
	Message string
}

// NewDeleteGlobalSSHInstanceRequest will create request of DeleteGlobalSSHInstance action.
func (c *PathXClient) NewDeleteGlobalSSHInstanceRequest() *DeleteGlobalSSHInstanceRequest {
	req := &DeleteGlobalSSHInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteGlobalSSHInstance

删除GlobalSSH实例
*/
func (c *PathXClient) DeleteGlobalSSHInstance(req *DeleteGlobalSSHInstanceRequest) (*DeleteGlobalSSHInstanceResponse, error) {
	var err error
	var res DeleteGlobalSSHInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteGlobalSSHInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeletePathXSSLRequest is request schema for DeletePathXSSL action
type DeletePathXSSLRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// SSL证书的ID
	SSLId *string `required:"true"`
}

// DeletePathXSSLResponse is response schema for DeletePathXSSL action
type DeletePathXSSLResponse struct {
	response.CommonBase
}

// NewDeletePathXSSLRequest will create request of DeletePathXSSL action.
func (c *PathXClient) NewDeletePathXSSLRequest() *DeletePathXSSLRequest {
	req := &DeletePathXSSLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeletePathXSSL

删除PathX SSL证书
*/
func (c *PathXClient) DeletePathXSSL(req *DeletePathXSSLRequest) (*DeletePathXSSLResponse, error) {
	var err error
	var res DeletePathXSSLResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeletePathXSSL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteUGA3InstanceRequest is request schema for DeleteUGA3Instance action
type DeleteUGA3InstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID,如org-xxxx。请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// 实例Id,资源的唯一标识
	InstanceId *string `required:"true"`
}

// DeleteUGA3InstanceResponse is response schema for DeleteUGA3Instance action
type DeleteUGA3InstanceResponse struct {
	response.CommonBase

	// 提示信息
	Message string
}

// NewDeleteUGA3InstanceRequest will create request of DeleteUGA3Instance action.
func (c *PathXClient) NewDeleteUGA3InstanceRequest() *DeleteUGA3InstanceRequest {
	req := &DeleteUGA3InstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteUGA3Instance

删除全球统一接入转发实例
*/
func (c *PathXClient) DeleteUGA3Instance(req *DeleteUGA3InstanceRequest) (*DeleteUGA3InstanceResponse, error) {
	var err error
	var res DeleteUGA3InstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteUGA3Instance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteUGA3PortRequest is request schema for DeleteUGA3Port action
type DeleteUGA3PortRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// 加速配置实例ID
	InstanceId *string `required:"true"`

	// TCP接入端口
	TCP []int `required:"false"`
}

// DeleteUGA3PortResponse is response schema for DeleteUGA3Port action
type DeleteUGA3PortResponse struct {
	response.CommonBase

	// 返回信息 说明
	Message string
}

// NewDeleteUGA3PortRequest will create request of DeleteUGA3Port action.
func (c *PathXClient) NewDeleteUGA3PortRequest() *DeleteUGA3PortRequest {
	req := &DeleteUGA3PortRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteUGA3Port

删除统一接入加速实例转发器 按接入端口删除
*/
func (c *PathXClient) DeleteUGA3Port(req *DeleteUGA3PortRequest) (*DeleteUGA3PortResponse, error) {
	var err error
	var res DeleteUGA3PortResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteUGA3Port", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteUGAForwarderRequest is request schema for DeleteUGAForwarder action
type DeleteUGAForwarderRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// HTTP接入HTTP回源，接入端口。禁用65123端口
	HTTPHTTP []int `required:"false"`

	// HTTPS接入HTTP回源， 接入端口。禁用65123端口
	HTTPSHTTP []int `required:"false"`

	// HTTPS接入HTTPS回源， 接入端口。禁用65123端口
	HTTPSHTTPS []int `required:"false"`

	// TCP接入端口
	TCP []int `required:"false"`

	// UDP接入端口
	UDP []int `required:"false"`

	// 加速配置实例ID
	UGAId *string `required:"true"`

	// WebSocketS接入WebSocket回源， 接入端口。禁用65123端口。
	WSSWS []int `required:"false"`

	// WebSocketS接入WebSocketS回源， 接入端口。禁用65123端口
	WSSWSS []int `required:"false"`

	// WebSocket接入WebSocket回源， 接入端口。禁用65123端口
	WSWS []int `required:"false"`
}

// DeleteUGAForwarderResponse is response schema for DeleteUGAForwarder action
type DeleteUGAForwarderResponse struct {
	response.CommonBase

	// 【该字段已废弃，请谨慎使用】
	Message string `deprecated:"true"`
}

// NewDeleteUGAForwarderRequest will create request of DeleteUGAForwarder action.
func (c *PathXClient) NewDeleteUGAForwarderRequest() *DeleteUGAForwarderRequest {
	req := &DeleteUGAForwarderRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteUGAForwarder

删除加速实例转发器 按接入端口删除
*/
func (c *PathXClient) DeleteUGAForwarder(req *DeleteUGAForwarderRequest) (*DeleteUGAForwarderResponse, error) {
	var err error
	var res DeleteUGAForwarderResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteUGAForwarder", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteUGAInstanceRequest is request schema for DeleteUGAInstance action
type DeleteUGAInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID,如org-xxxx。请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// 加速配置实例ID
	UGAId *string `required:"true"`
}

// DeleteUGAInstanceResponse is response schema for DeleteUGAInstance action
type DeleteUGAInstanceResponse struct {
	response.CommonBase

	// 消息提示
	Message string
}

// NewDeleteUGAInstanceRequest will create request of DeleteUGAInstance action.
func (c *PathXClient) NewDeleteUGAInstanceRequest() *DeleteUGAInstanceRequest {
	req := &DeleteUGAInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteUGAInstance

删除全球加速服务加速配置
*/
func (c *PathXClient) DeleteUGAInstance(req *DeleteUGAInstanceRequest) (*DeleteUGAInstanceResponse, error) {
	var err error
	var res DeleteUGAInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteUGAInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteUPathRequest is request schema for DeleteUPath action
type DeleteUPathRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// 加速线路实例ID
	UPathId *string `required:"true"`
}

// DeleteUPathResponse is response schema for DeleteUPath action
type DeleteUPathResponse struct {
	response.CommonBase
}

// NewDeleteUPathRequest will create request of DeleteUPath action.
func (c *PathXClient) NewDeleteUPathRequest() *DeleteUPathRequest {
	req := &DeleteUPathRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteUPath

删除UPath
*/
func (c *PathXClient) DeleteUPath(req *DeleteUPathRequest) (*DeleteUPathResponse, error) {
	var err error
	var res DeleteUPathResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteUPath", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeGlobalSSHAreaRequest is request schema for DescribeGlobalSSHArea action
type DescribeGlobalSSHAreaRequest struct {
	request.CommonBase
}

// DescribeGlobalSSHAreaResponse is response schema for DescribeGlobalSSHArea action
type DescribeGlobalSSHAreaResponse struct {
	response.CommonBase

	//
	AreaSet []GlobalSSHArea

	//
	Message string
}

// NewDescribeGlobalSSHAreaRequest will create request of DescribeGlobalSSHArea action.
func (c *PathXClient) NewDescribeGlobalSSHAreaRequest() *DescribeGlobalSSHAreaRequest {
	req := &DescribeGlobalSSHAreaRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: DescribeGlobalSSHArea
*/
func (c *PathXClient) DescribeGlobalSSHArea(req *DescribeGlobalSSHAreaRequest) (*DescribeGlobalSSHAreaResponse, error) {
	var err error
	var res DescribeGlobalSSHAreaResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeGlobalSSHArea", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeGlobalSSHInstanceRequest is request schema for DescribeGlobalSSHInstance action
type DescribeGlobalSSHInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID，如org-xxxx。请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// 实例ID，资源唯一标识
	InstanceId *string `required:"false"`
}

// DescribeGlobalSSHInstanceResponse is response schema for DescribeGlobalSSHInstance action
type DescribeGlobalSSHInstanceResponse struct {
	response.CommonBase

	// GlobalSSH实例列表，实例的属性参考GlobalSSHInfo模型
	InstanceSet []GlobalSSHInfo
}

// NewDescribeGlobalSSHInstanceRequest will create request of DescribeGlobalSSHInstance action.
func (c *PathXClient) NewDescribeGlobalSSHInstanceRequest() *DescribeGlobalSSHInstanceRequest {
	req := &DescribeGlobalSSHInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeGlobalSSHInstance

获取GlobalSSH实例列表（传实例ID获取单个实例信息，不传获取项目下全部实例）
*/
func (c *PathXClient) DescribeGlobalSSHInstance(req *DescribeGlobalSSHInstanceRequest) (*DescribeGlobalSSHInstanceResponse, error) {
	var err error
	var res DescribeGlobalSSHInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeGlobalSSHInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribePathXLineConfigRequest is request schema for DescribePathXLineConfig action
type DescribePathXLineConfigRequest struct {
	request.CommonBase

	// [公共参数] 项目ID,如org-xxxx。不填为默认项目。请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

}

// DescribePathXLineConfigResponse is response schema for DescribePathXLineConfig action
type DescribePathXLineConfigResponse struct {
	response.CommonBase

	// UGAA线路列表,参考UGAALine字段定义
	LineSet []UGAALine
}

// NewDescribePathXLineConfigRequest will create request of DescribePathXLineConfig action.
func (c *PathXClient) NewDescribePathXLineConfigRequest() *DescribePathXLineConfigRequest {
	req := &DescribePathXLineConfigRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribePathXLineConfig

获取全球加速线路信息
*/
func (c *PathXClient) DescribePathXLineConfig(req *DescribePathXLineConfigRequest) (*DescribePathXLineConfigResponse, error) {
	var err error
	var res DescribePathXLineConfigResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribePathXLineConfig", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribePathXSSLRequest is request schema for DescribePathXSSL action
type DescribePathXSSLRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// 最大返回条数，默认100，最大400
	Limit *int `required:"false"`

	// 偏移值 默认为0
	Offset *int `required:"false"`

	// SSL证书的Id，不传分页获取证书列表
	SSLId *string `required:"false"`

	// 不为空则按证书名称、证书域名模糊搜索 分页返回结果
	SearchValue *string `required:"false"`
}

// DescribePathXSSLResponse is response schema for DescribePathXSSL action
type DescribePathXSSLResponse struct {
	response.CommonBase

	// SSL证书详细信息，具体结构见 PathXSSLSet
	DataSet []PathXSSLSet

	// 符合条件的证书总数
	TotalCount int
}

// NewDescribePathXSSLRequest will create request of DescribePathXSSL action.
func (c *PathXClient) NewDescribePathXSSLRequest() *DescribePathXSSLRequest {
	req := &DescribePathXSSLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribePathXSSL

获取SSL证书信息,支持分页，支持按证书名称 证书域名模糊搜索
*/
func (c *PathXClient) DescribePathXSSL(req *DescribePathXSSLRequest) (*DescribePathXSSLResponse, error) {
	var err error
	var res DescribePathXSSLResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribePathXSSL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUGA3AreaRequest is request schema for DescribeUGA3Area action
type DescribeUGA3AreaRequest struct {
	request.CommonBase

	// [公共参数] 项目ID,如org-xxxx。请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 域名，非必填。如果填IP或者域名，会推荐一个地域在返回列表的第一个
	Domain *string `required:"false"`

	// IP集合，非必填。如果填IP或者域名，会推荐一个地域在返回列表的第一个，源站IP集合，以逗号分隔[127.0.0.1,127.0.0.2]
	IPList *string `required:"false"`
}

// DescribeUGA3AreaResponse is response schema for DescribeUGA3Area action
type DescribeUGA3AreaResponse struct {
	response.CommonBase

	// 支持源站的地区,比如：AreaSet[{            "Area": "首尔",            "AreaCode": "ICN",            "CountryCode": "CN",            "ContinentCode": "CN"        }]ContinentCode:["CN","NA","OT"];"CN":表示国内，"NA":表示美洲，“OT"：表示欧洲等其他地区
	AreaSet []ForwardArea

	// 提示信息
	Message string
}

// NewDescribeUGA3AreaRequest will create request of DescribeUGA3Area action.
func (c *PathXClient) NewDescribeUGA3AreaRequest() *DescribeUGA3AreaRequest {
	req := &DescribeUGA3AreaRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUGA3Area

获取全球接入源站可选列表
*/
func (c *PathXClient) DescribeUGA3Area(req *DescribeUGA3AreaRequest) (*DescribeUGA3AreaResponse, error) {
	var err error
	var res DescribeUGA3AreaResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUGA3Area", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUGA3InstanceRequest is request schema for DescribeUGA3Instance action
type DescribeUGA3InstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// 加速配置实例ID，如果传了实例ID 则返回匹配实例ID的记录；如果没传则返回 ProjectId 下全部实例且符合分页要求
	InstanceId *string `required:"false"`

	// 返回的最大条数，默认为100，最大值400
	Limit *int `required:"false"`

	// 偏移量，默认为0
	Offset *int `required:"false"`
}

// DescribeUGA3InstanceResponse is response schema for DescribeUGA3Instance action
type DescribeUGA3InstanceResponse struct {
	response.CommonBase

	// 全球加速实例信息列表
	ForwardInstanceInfos []ForwardInfo

	// 符合条件的总数
	TotalCount int
}

// NewDescribeUGA3InstanceRequest will create request of DescribeUGA3Instance action.
func (c *PathXClient) NewDescribeUGA3InstanceRequest() *DescribeUGA3InstanceRequest {
	req := &DescribeUGA3InstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUGA3Instance

获取全球统一接入加速服务加速配置信息，指定实例ID返回单个实例。未指定实例ID时 指定分页参数 则按创建时间降序 返回记录
*/
func (c *PathXClient) DescribeUGA3Instance(req *DescribeUGA3InstanceRequest) (*DescribeUGA3InstanceResponse, error) {
	var err error
	var res DescribeUGA3InstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUGA3Instance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUGA3OptimizationRequest is request schema for DescribeUGA3Optimization action
type DescribeUGA3OptimizationRequest struct {
	request.CommonBase

	// [公共参数] 项目ID,如org-xxxx。请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// 加速大区,默认Global,[    "Global":"全球",    "AP":"亚太",    "EU":"欧洲",    "ME":"中东",    "OA":"大洋洲",    "AF":"非洲",    "NA":"北美洲",    "SA":"南美洲"]
	AccelerationArea *string `required:"false"`

	// 源站AreaCode
	AreaCode *string `required:"true"`

	// 默认一天 ，枚举类型["Hour","Day","Week"]
	TimeRange *string `required:"false"`
}

// DescribeUGA3OptimizationResponse is response schema for DescribeUGA3Optimization action
type DescribeUGA3OptimizationResponse struct {
	response.CommonBase

	// 加速详情
	AccelerationInfos []AccelerationInfo

	// 【该字段已废弃，请谨慎使用】
	Message string `deprecated:"true"`
}

// NewDescribeUGA3OptimizationRequest will create request of DescribeUGA3Optimization action.
func (c *PathXClient) NewDescribeUGA3OptimizationRequest() *DescribeUGA3OptimizationRequest {
	req := &DescribeUGA3OptimizationRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUGA3Optimization

获取全球接入UGA3线路加速化情况
*/
func (c *PathXClient) DescribeUGA3Optimization(req *DescribeUGA3OptimizationRequest) (*DescribeUGA3OptimizationResponse, error) {
	var err error
	var res DescribeUGA3OptimizationResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUGA3Optimization", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUGAInstanceRequest is request schema for DescribeUGAInstance action
type DescribeUGAInstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// 返回的最大条数，默认为100，最大值400
	Limit *int `required:"false"`

	// 偏移量，默认为0
	Offset *int `required:"false"`

	// 加速配置实例ID，如果传了实例ID 则返回匹配实例ID的记录；如果没传则返回 ProjectId 下全部实例且符合分页要求
	UGAId *string `required:"false"`
}

// DescribeUGAInstanceResponse is response schema for DescribeUGAInstance action
type DescribeUGAInstanceResponse struct {
	response.CommonBase

	// 符合条件的总数
	TotalCount int

	// 全球加速实例信息列表
	UGAList []UGAAInfo
}

// NewDescribeUGAInstanceRequest will create request of DescribeUGAInstance action.
func (c *PathXClient) NewDescribeUGAInstanceRequest() *DescribeUGAInstanceRequest {
	req := &DescribeUGAInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUGAInstance

获取全球加速服务加速配置信息，指定实例ID返回单个实例。未指定实例ID时 指定分页参数 则按创建时间降序 返回记录
*/
func (c *PathXClient) DescribeUGAInstance(req *DescribeUGAInstanceRequest) (*DescribeUGAInstanceResponse, error) {
	var err error
	var res DescribeUGAInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUGAInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUPathRequest is request schema for DescribeUPath action
type DescribeUPathRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// 如果不填参数 返回 ProjectId 下所有的线路资源，填此参数则返回upath实例ID匹配的线路
	UPathId *string `required:"false"`
}

// DescribeUPathResponse is response schema for DescribeUPath action
type DescribeUPathResponse struct {
	response.CommonBase

	// 线路信息数组
	UPathSet []UPathInfo
}

// NewDescribeUPathRequest will create request of DescribeUPath action.
func (c *PathXClient) NewDescribeUPathRequest() *DescribeUPathRequest {
	req := &DescribeUPathRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUPath

获取加速线路信息
*/
func (c *PathXClient) DescribeUPath(req *DescribeUPathRequest) (*DescribeUPathResponse, error) {
	var err error
	var res DescribeUPathResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUPath", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUPathTemplateRequest is request schema for DescribeUPathTemplate action
type DescribeUPathTemplateRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// 加速线路实例ID,格式 upath-xxxx
	UPathId *string `required:"true"`
}

// DescribeUPathTemplateResponse is response schema for DescribeUPathTemplate action
type DescribeUPathTemplateResponse struct {
	response.CommonBase

	// 监控模板详情
	DataSet []AlarmRuler
}

// NewDescribeUPathTemplateRequest will create request of DescribeUPathTemplate action.
func (c *PathXClient) NewDescribeUPathTemplateRequest() *DescribeUPathTemplateRequest {
	req := &DescribeUPathTemplateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUPathTemplate

查询UPath的监控模板
*/
func (c *PathXClient) DescribeUPathTemplate(req *DescribeUPathTemplateRequest) (*DescribeUPathTemplateResponse, error) {
	var err error
	var res DescribeUPathTemplateResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUPathTemplate", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetGlobalSSHPriceRequest is request schema for GetGlobalSSHPrice action
type GetGlobalSSHPriceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID,如org-xxxx。请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// 计费类型：Dynamic，Month，Year
	ChargeType *string `required:"false"`

	// 版本类型。枚举值，Enterprise:企业版；Basic:基础版。可不填，默认为Basic。
	InstanceType *string `required:"false"`

	// 购买周期，如果ChargeType为Month，Quantity默认为0；其他情况必须为大于0的整数
	Quantity *int `required:"false"`
}

// GetGlobalSSHPriceResponse is response schema for GetGlobalSSHPrice action
type GetGlobalSSHPriceResponse struct {
	response.CommonBase

	// 价格,返回单位为元
	Price float64
}

// NewGetGlobalSSHPriceRequest will create request of GetGlobalSSHPrice action.
func (c *PathXClient) NewGetGlobalSSHPriceRequest() *GetGlobalSSHPriceRequest {
	req := &GetGlobalSSHPriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetGlobalSSHPrice

获取GlobalSSH价格
*/
func (c *PathXClient) GetGlobalSSHPrice(req *GetGlobalSSHPriceRequest) (*GetGlobalSSHPriceResponse, error) {
	var err error
	var res GetGlobalSSHPriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetGlobalSSHPrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetGlobalSSHUpdatePriceRequest is request schema for GetGlobalSSHUpdatePrice action
type GetGlobalSSHUpdatePriceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID,如org-xxxx。请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// 计费类型：Dynamic，Month，Year。从免费版升级到付费版必须传，其他情况不需要传
	ChargeType *string `required:"false"`

	// 实例ID，唯一资源标识。从免费版升级到付费版可不填，其他情况必填。
	InstanceId *string `required:"false"`

	// 升级后的实例类型。枚举值，Enterprise:企业版；Basic:基础版。
	InstanceType *string `required:"true"`

	// 购买周期，如果ChargeType为Month，Quantity可以不填默认为0；其他情况必须为正整数。
	Quantity *int `required:"false"`
}

// GetGlobalSSHUpdatePriceResponse is response schema for GetGlobalSSHUpdatePrice action
type GetGlobalSSHUpdatePriceResponse struct {
	response.CommonBase

	// 价格,返回单位为元。正数表示付费升级，负数表示降级退费。
	Price float64
}

// NewGetGlobalSSHUpdatePriceRequest will create request of GetGlobalSSHUpdatePrice action.
func (c *PathXClient) NewGetGlobalSSHUpdatePriceRequest() *GetGlobalSSHUpdatePriceRequest {
	req := &GetGlobalSSHUpdatePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetGlobalSSHUpdatePrice

获取GlobalSSH升级价格
*/
func (c *PathXClient) GetGlobalSSHUpdatePrice(req *GetGlobalSSHUpdatePriceRequest) (*GetGlobalSSHUpdatePriceResponse, error) {
	var err error
	var res GetGlobalSSHUpdatePriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetGlobalSSHUpdatePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetPathXMetricRequest is request schema for GetPathXMetric action
type GetPathXMetricRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// 查询起始时间，10位长度时间戳
	BeginTime *int `required:"true"`

	// 查询结束时间，10位长度时间戳
	EndTime *int `required:"true"`

	// 具体线路id，调用DescribePathXLineConfig接口获取线路列表
	LineId *string `required:"true"`

	// 查询监控的指标项。目前仅允许以下四项：NetworkOut:出向带宽，NetworkIn:入向带宽，NetworkOutUsage:出向带宽使用率，NetworkInUsage:入向带宽使用率
	MetricName []string `required:"true"`

	// ResourceId，如upath ID  和 uga ID
	ResourceId *string `required:"true"`

	// upath:加速线路,uga:加速实例
	ResourceType *string `required:"true"`
}

// GetPathXMetricResponse is response schema for GetPathXMetric action
type GetPathXMetricResponse struct {
	response.CommonBase

	// 监控数据结果集
	DataSet MetricPeriod
}

// NewGetPathXMetricRequest will create request of GetPathXMetric action.
func (c *PathXClient) NewGetPathXMetricRequest() *GetPathXMetricRequest {
	req := &GetPathXMetricRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetPathXMetric

获取全球加速监控信息
*/
func (c *PathXClient) GetPathXMetric(req *GetPathXMetricRequest) (*GetPathXMetricResponse, error) {
	var err error
	var res GetPathXMetricResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetPathXMetric", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetUGA3MetricRequest is request schema for GetUGA3Metric action
type GetUGA3MetricRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// 子线路AreaCode ,子线路的时候传，不是子线路可以不传
	AreaCode *string `required:"false"`

	// 查询起始时间，10位长度时间戳
	BeginTime *int `required:"true"`

	// 查询结束时间，10位长度时间戳
	EndTime *int `required:"true"`

	// 资源ID
	InstanceId *string `required:"true"`

	// 是否为子线路。为了简化查询,true 会返回所有子线路监控项可以，false:返回所有汇总的监控数据
	IsSubline *bool `required:"false"`

	// 查询监控的指标项。可不传	NetworkOut:出口总带宽	NetworkIn：入口总带宽	NetworkOutUsage：出口带宽使用率	NetworkInUsage：入口总带宽使用率	NetworkOutSubline ：子线路出口带宽	NetworkInSubline：子线路入口带宽	Delay：线路平均延迟	DelaySubline：子线路延迟	ConnectCount：当前连接数	ConnectCountSubline：子线路当前连接数	DelayPromote：延迟提升	DelayPromoteSubline：子线路延迟提升
	MetricName []string `required:"false"`
}

// GetUGA3MetricResponse is response schema for GetUGA3Metric action
type GetUGA3MetricResponse struct {
	response.CommonBase

	// 监控数据结果集
	DataSet UGA3Metric
}

// NewGetUGA3MetricRequest will create request of GetUGA3Metric action.
func (c *PathXClient) NewGetUGA3MetricRequest() *GetUGA3MetricRequest {
	req := &GetUGA3MetricRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetUGA3Metric

获取全地域加速监控信息
*/
func (c *PathXClient) GetUGA3Metric(req *GetUGA3MetricRequest) (*GetUGA3MetricResponse, error) {
	var err error
	var res GetUGA3MetricResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetUGA3Metric", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetUGA3PriceRequest is request schema for GetUGA3Price action
type GetUGA3PriceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// 加速大区,默认返回所有加速大区价格
	AccelerationArea *string `required:"false"`

	// 源站区域
	AreaCode *string `required:"true"`

	// 共享带宽大小
	Bandwidth *int `required:"true"`

	// 计费方式，默认按月支付。Month: 按月; Year: 按年; Dynamic: 按小时收
	ChargeType *string `required:"false"`

	// 购买时间数量，当ChargeType为Month时 Quantity默认为0，代表购买至月底。按年按小时必须为大于0
	Quantity *int `required:"false"`
}

// GetUGA3PriceResponse is response schema for GetUGA3Price action
type GetUGA3PriceResponse struct {
	response.CommonBase

	// 加速大区对应价格
	UGA3Price []UGA3Price
}

// NewGetUGA3PriceRequest will create request of GetUGA3Price action.
func (c *PathXClient) NewGetUGA3PriceRequest() *GetUGA3PriceRequest {
	req := &GetUGA3PriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetUGA3Price

获取全球统一接入转发实例价格
*/
func (c *PathXClient) GetUGA3Price(req *GetUGA3PriceRequest) (*GetUGA3PriceResponse, error) {
	var err error
	var res GetUGA3PriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetUGA3Price", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetUGA3UpdatePriceRequest is request schema for GetUGA3UpdatePrice action
type GetUGA3UpdatePriceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// 暂未支持，加速大区，在更换加速大区的时候使用
	AccelerationArea *string `required:"false"`

	// 暂未支持，源站区域
	AreaCode *string `required:"false"`

	// 只有升级带宽的时候有价格变化
	Bandwidth *int `required:"false"`

	// 资源ID
	InstanceId *string `required:"true"`
}

// GetUGA3UpdatePriceResponse is response schema for GetUGA3UpdatePrice action
type GetUGA3UpdatePriceResponse struct {
	response.CommonBase

	// 价格 元。大于0需付费，小于0则退费。
	Price float64
}

// NewGetUGA3UpdatePriceRequest will create request of GetUGA3UpdatePrice action.
func (c *PathXClient) NewGetUGA3UpdatePriceRequest() *GetUGA3UpdatePriceRequest {
	req := &GetUGA3UpdatePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetUGA3UpdatePrice

全球统一接入获取实例更新价格（增加、删退）
*/
func (c *PathXClient) GetUGA3UpdatePrice(req *GetUGA3UpdatePriceRequest) (*GetUGA3UpdatePriceResponse, error) {
	var err error
	var res GetUGA3UpdatePriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetUGA3UpdatePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyGlobalSSHPortRequest is request schema for ModifyGlobalSSHPort action
type ModifyGlobalSSHPortRequest struct {
	request.CommonBase

	// [公共参数] 项目ID，如org-xxxx。请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// 实例ID,资源唯一标识。当前仅收费版GlobalSSH实例可以修改端口。
	InstanceId *string `required:"true"`

	// 源站服务器监听的SSH端口号。收费版本端口范围[1,65535]且不能为80，443，65123端口。免费版不支持修改端口。
	Port *int `required:"true"`
}

// ModifyGlobalSSHPortResponse is response schema for ModifyGlobalSSHPort action
type ModifyGlobalSSHPortResponse struct {
	response.CommonBase

	// 提示信息
	Message string
}

// NewModifyGlobalSSHPortRequest will create request of ModifyGlobalSSHPort action.
func (c *PathXClient) NewModifyGlobalSSHPortRequest() *ModifyGlobalSSHPortRequest {
	req := &ModifyGlobalSSHPortRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyGlobalSSHPort

修改GlobalSSH端口
*/
func (c *PathXClient) ModifyGlobalSSHPort(req *ModifyGlobalSSHPortRequest) (*ModifyGlobalSSHPortResponse, error) {
	var err error
	var res ModifyGlobalSSHPortResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyGlobalSSHPort", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyGlobalSSHRemarkRequest is request schema for ModifyGlobalSSHRemark action
type ModifyGlobalSSHRemarkRequest struct {
	request.CommonBase

	// [公共参数] 项目ID，如org-xxxx。请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// 实例ID,资源唯一标识
	InstanceId *string `required:"true"`

	// 备注信息，不填默认为空字符串
	Remark *string `required:"false"`
}

// ModifyGlobalSSHRemarkResponse is response schema for ModifyGlobalSSHRemark action
type ModifyGlobalSSHRemarkResponse struct {
	response.CommonBase

	// 接口返回消息
	Message string
}

// NewModifyGlobalSSHRemarkRequest will create request of ModifyGlobalSSHRemark action.
func (c *PathXClient) NewModifyGlobalSSHRemarkRequest() *ModifyGlobalSSHRemarkRequest {
	req := &ModifyGlobalSSHRemarkRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyGlobalSSHRemark

修改GlobalSSH备注
*/
func (c *PathXClient) ModifyGlobalSSHRemark(req *ModifyGlobalSSHRemarkRequest) (*ModifyGlobalSSHRemarkResponse, error) {
	var err error
	var res ModifyGlobalSSHRemarkResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyGlobalSSHRemark", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyGlobalSSHTypeRequest is request schema for ModifyGlobalSSHType action
type ModifyGlobalSSHTypeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID，如org-xxxx。请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// 支付方式，如按月、按年、按时
	ChargeType *string `required:"false"`

	// 可抵扣费用的券，通常不使用
	CouponId *string `required:"false"`

	// 实例ID,资源唯一标识
	InstanceId *string `required:"true"`

	// 取值范围["Enterprise","Basic"]，分别对应企业版和基础版，表示升级后的实例类型。比如从Free版本升级为Basic版或Enterprise版，不可从收费版降级为免费版，或从企业版降级为基础版
	InstanceType *string `required:"true"`

	// 购买时间，当ChargeType为Month，Quantity为0代表购买到月底
	Quantity *string `required:"false"`
}

// ModifyGlobalSSHTypeResponse is response schema for ModifyGlobalSSHType action
type ModifyGlobalSSHTypeResponse struct {
	response.CommonBase

	// 提示信息
	Message string
}

// NewModifyGlobalSSHTypeRequest will create request of ModifyGlobalSSHType action.
func (c *PathXClient) NewModifyGlobalSSHTypeRequest() *ModifyGlobalSSHTypeRequest {
	req := &ModifyGlobalSSHTypeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyGlobalSSHType

修改GlobalSSH实例类型，仅支持低版本升级到高版本，不支持高版本降级到低版本
*/
func (c *PathXClient) ModifyGlobalSSHType(req *ModifyGlobalSSHTypeRequest) (*ModifyGlobalSSHTypeResponse, error) {
	var err error
	var res ModifyGlobalSSHTypeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyGlobalSSHType", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyUGA3BandwidthRequest is request schema for ModifyUGA3Bandwidth action
type ModifyUGA3BandwidthRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// 带宽大小，范围[1,100]，不传则不更新
	Bandwidth *int `required:"false"`

	// 需要全地域可用的代金券
	CouponId *string `required:"false"`

	// 加速配置实例ID，格式uga3-xxxx
	InstanceId *string `required:"true"`
}

// ModifyUGA3BandwidthResponse is response schema for ModifyUGA3Bandwidth action
type ModifyUGA3BandwidthResponse struct {
	response.CommonBase

	// 补充描述信息
	Message string
}

// NewModifyUGA3BandwidthRequest will create request of ModifyUGA3Bandwidth action.
func (c *PathXClient) NewModifyUGA3BandwidthRequest() *ModifyUGA3BandwidthRequest {
	req := &ModifyUGA3BandwidthRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyUGA3Bandwidth

修改统一接入加速配置带宽
*/
func (c *PathXClient) ModifyUGA3Bandwidth(req *ModifyUGA3BandwidthRequest) (*ModifyUGA3BandwidthResponse, error) {
	var err error
	var res ModifyUGA3BandwidthResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyUGA3Bandwidth", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyUGA3InstanceRequest is request schema for ModifyUGA3Instance action
type ModifyUGA3InstanceRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// 加速配置实例ID，格式uga-xxxx。不支持GlobalSSH实例。
	InstanceId *string `required:"true"`

	// 加速配置实例名称，不填或空字符串则不更新
	Name *string `required:"false"`

	// 备注信息，暂时前端为使用
	Remark *string `required:"false"`
}

// ModifyUGA3InstanceResponse is response schema for ModifyUGA3Instance action
type ModifyUGA3InstanceResponse struct {
	response.CommonBase

	// 补充描述信息
	Message string
}

// NewModifyUGA3InstanceRequest will create request of ModifyUGA3Instance action.
func (c *PathXClient) NewModifyUGA3InstanceRequest() *ModifyUGA3InstanceRequest {
	req := &ModifyUGA3InstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyUGA3Instance

修改统一接入加速配置属性，如Name，ReMark
*/
func (c *PathXClient) ModifyUGA3Instance(req *ModifyUGA3InstanceRequest) (*ModifyUGA3InstanceResponse, error) {
	var err error
	var res ModifyUGA3InstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyUGA3Instance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyUGA3OriginInfoRequest is request schema for ModifyUGA3OriginInfo action
type ModifyUGA3OriginInfoRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// 加速配置实例ID，格式uga3-xxxx。
	InstanceId *string `required:"true"`

	// 加速源域名，仅支持1个域名。修改源站时 OriginIPList和OriginDomain至少填一个。OriginIPList和OriginDomain都填时 以Domain为准,如果两个都不填，不修改
	OriginDomain *string `required:"true"`

	// ，加速源IP，多个IP用英文半角逗号(,)隔开。修改源站时 ，OriginIPList和OriginDomain至少填一个。OriginIPList和OriginDomain都填时 以OriginDomain为准。如果两个都不填，不修改
	OriginIPList *string `required:"true"`
}

// ModifyUGA3OriginInfoResponse is response schema for ModifyUGA3OriginInfo action
type ModifyUGA3OriginInfoResponse struct {
	response.CommonBase

	// 操作名称
	Action string

	// 补充描述信息
	Message string

	// 返回码
	RetCode int
}

// NewModifyUGA3OriginInfoRequest will create request of ModifyUGA3OriginInfo action.
func (c *PathXClient) NewModifyUGA3OriginInfoRequest() *ModifyUGA3OriginInfoRequest {
	req := &ModifyUGA3OriginInfoRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyUGA3OriginInfo

Domain， IPList注意：修改Domain或IPList时， 请确保源站服务端口已经开启且外网防火墙允许pathx出口ip访问。
*/
func (c *PathXClient) ModifyUGA3OriginInfo(req *ModifyUGA3OriginInfoRequest) (*ModifyUGA3OriginInfoResponse, error) {
	var err error
	var res ModifyUGA3OriginInfoResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyUGA3OriginInfo", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyUGA3PortRequest is request schema for ModifyUGA3Port action
type ModifyUGA3PortRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// 加速配置实例ID
	InstanceId *string `required:"true"`

	// TCP接入端口，禁用65123端口
	TCP []int `required:"false"`

	// TCP回源端口
	TCPRS []int `required:"false"`
}

// ModifyUGA3PortResponse is response schema for ModifyUGA3Port action
type ModifyUGA3PortResponse struct {
	response.CommonBase

	// 返回信息 说明
	Message string
}

// NewModifyUGA3PortRequest will create request of ModifyUGA3Port action.
func (c *PathXClient) NewModifyUGA3PortRequest() *ModifyUGA3PortRequest {
	req := &ModifyUGA3PortRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyUGA3Port

修改统一接入加速实例端口,目前仅支持四层TCP端口
*/
func (c *PathXClient) ModifyUGA3Port(req *ModifyUGA3PortRequest) (*ModifyUGA3PortResponse, error) {
	var err error
	var res ModifyUGA3PortResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyUGA3Port", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyUPathBandwidthRequest is request schema for ModifyUPathBandwidth action
type ModifyUPathBandwidthRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// 线路带宽，单位Mbps。最小1Mbps,最大带宽由 DescribePathXLineConfig 接口获得。如需更大带宽，请联系产品团队。
	Bandwidth *int `required:"true"`

	// UPath 加速线路实例Id
	UPathId *string `required:"true"`
}

// ModifyUPathBandwidthResponse is response schema for ModifyUPathBandwidth action
type ModifyUPathBandwidthResponse struct {
	response.CommonBase
}

// NewModifyUPathBandwidthRequest will create request of ModifyUPathBandwidth action.
func (c *PathXClient) NewModifyUPathBandwidthRequest() *ModifyUPathBandwidthRequest {
	req := &ModifyUPathBandwidthRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyUPathBandwidth

修改加速线路带宽
*/
func (c *PathXClient) ModifyUPathBandwidth(req *ModifyUPathBandwidthRequest) (*ModifyUPathBandwidthResponse, error) {
	var err error
	var res ModifyUPathBandwidthResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyUPathBandwidth", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyUPathTemplateRequest is request schema for ModifyUPathTemplate action
type ModifyUPathTemplateRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// 告警探测周期，单位：秒
	AlarmFrequency []int `required:"false"`

	// 收敛策略，可选范围 ['Exponential','Continuous','Once']，分别对应指数递增、连续告警、单次告警
	AlarmStrategy []string `required:"false"`

	// 比较策略，可选 ['GE','LE']  分别代表不小于和不大于
	Compare []string `required:"false"`

	// 告警组id
	ContactGroupId []int `required:"false"`

	// 告警指标名称, 所有n的个数必须一致。目前仅允许以下四项：UpathNetworkOut:出向带宽，UpathNetworkIn:入向带宽，UpathNetworkOutUsage:出向带宽使用率，UpathNetworkInUsage:入向带宽使用率
	MetricName []string `required:"false"`

	// 告警阈值，带宽使用率的阈值范围是[50,100]的正整数，带宽告警阈值为1000000的倍数, 如大于2Mbps则告警 阈值应该传 2000000
	Threshold []int `required:"false"`

	// 告警触发周期（次数）
	TriggerCount []int `required:"false"`

	// 加速线路实例ID
	UPathId *string `required:"true"`
}

// ModifyUPathTemplateResponse is response schema for ModifyUPathTemplate action
type ModifyUPathTemplateResponse struct {
	response.CommonBase
}

// NewModifyUPathTemplateRequest will create request of ModifyUPathTemplate action.
func (c *PathXClient) NewModifyUPathTemplateRequest() *ModifyUPathTemplateRequest {
	req := &ModifyUPathTemplateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyUPathTemplate

修改UPath监控告警项
*/
func (c *PathXClient) ModifyUPathTemplate(req *ModifyUPathTemplateRequest) (*ModifyUPathTemplateResponse, error) {
	var err error
	var res ModifyUPathTemplateResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyUPathTemplate", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UGABindUPathRequest is request schema for UGABindUPath action
type UGABindUPathRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// 代金券
	CouponId *string `required:"false"`

	// 加速配置实例ID，格式uga-xxxx
	UGAId *string `required:"true"`

	// 加速线路实例ID，格式upath-xxx
	UPathId *string `required:"true"`
}

// UGABindUPathResponse is response schema for UGABindUPath action
type UGABindUPathResponse struct {
	response.CommonBase
}

// NewUGABindUPathRequest will create request of UGABindUPath action.
func (c *PathXClient) NewUGABindUPathRequest() *UGABindUPathRequest {
	req := &UGABindUPathRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UGABindUPath

UGA绑定UPath
*/
func (c *PathXClient) UGABindUPath(req *UGABindUPathRequest) (*UGABindUPathResponse, error) {
	var err error
	var res UGABindUPathResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UGABindUPath", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UGAUnBindUPathRequest is request schema for UGAUnBindUPath action
type UGAUnBindUPathRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// 加速配置实例ID 格式uga-xxx
	UGAId *string `required:"true"`

	// 加速线路实例ID 格式upath-xxx
	UPathId *string `required:"true"`
}

// UGAUnBindUPathResponse is response schema for UGAUnBindUPath action
type UGAUnBindUPathResponse struct {
	response.CommonBase
}

// NewUGAUnBindUPathRequest will create request of UGAUnBindUPath action.
func (c *PathXClient) NewUGAUnBindUPathRequest() *UGAUnBindUPathRequest {
	req := &UGAUnBindUPathRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UGAUnBindUPath

UGA与UPath解绑
*/
func (c *PathXClient) UGAUnBindUPath(req *UGAUnBindUPathRequest) (*UGAUnBindUPathResponse, error) {
	var err error
	var res UGAUnBindUPathResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UGAUnBindUPath", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UnBindPathXSSLRequest is request schema for UnBindPathXSSL action
type UnBindPathXSSLRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// 解绑SSL证书的HTTPS端口。Port.0 Port.1格式 端口错误则解绑失败。
	Port []int `required:"true"`

	// SSL证书ID。
	SSLId *string `required:"true"`

	// UGA实例ID。
	UGAId *string `required:"true"`
}

// UnBindPathXSSLResponse is response schema for UnBindPathXSSL action
type UnBindPathXSSLResponse struct {
	response.CommonBase
}

// NewUnBindPathXSSLRequest will create request of UnBindPathXSSL action.
func (c *PathXClient) NewUnBindPathXSSLRequest() *UnBindPathXSSLRequest {
	req := &UnBindPathXSSLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UnBindPathXSSL

解绑PathX SSL 证书
*/
func (c *PathXClient) UnBindPathXSSL(req *UnBindPathXSSLRequest) (*UnBindPathXSSLResponse, error) {
	var err error
	var res UnBindPathXSSLResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UnBindPathXSSL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdatePathXWhitelistRequest is request schema for UpdatePathXWhitelist action
type UpdatePathXWhitelistRequest struct {
	request.CommonBase

	// [公共参数] 项目ID,如org-xxxx。请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// GlobalSSH实例ID，资源唯一标识
	InstanceId *string `required:"true"`

	// 白名单规则,例如 "Whitelist.0": "192.168.1.1/24|tcp|22"，"Whitelist.1": "192.168.1.2|tcp|8080:8090"，第一个参数为ip或ip段，第二个参数代表协议（tcp/udp），第三个参数代表端口号或端口范围（使用 ':' 隔开）；可以添加多条规则（递增Whitelist.n字段内的n值）；此接口需要列出全部规则，例如不填则为清空白名单规则，如若需要增量添加，使用InsertPathXWhitelist接口,globalssh 没有端口范围：端口设置成加速端口，协议设置成tcp:ip|tcp|加速端口
	Whitelist []string `required:"false"`
}

// UpdatePathXWhitelistResponse is response schema for UpdatePathXWhitelist action
type UpdatePathXWhitelistResponse struct {
	response.CommonBase
}

// NewUpdatePathXWhitelistRequest will create request of UpdatePathXWhitelist action.
func (c *PathXClient) NewUpdatePathXWhitelistRequest() *UpdatePathXWhitelistRequest {
	req := &UpdatePathXWhitelistRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdatePathXWhitelist

更新入口白名单,仅限GlobalSSH 实例使用。其他uga-实例不生效
*/
func (c *PathXClient) UpdatePathXWhitelist(req *UpdatePathXWhitelistRequest) (*UpdatePathXWhitelistResponse, error) {
	var err error
	var res UpdatePathXWhitelistResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdatePathXWhitelist", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

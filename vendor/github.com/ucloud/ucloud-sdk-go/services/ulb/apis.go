// Code is generated by ucloud-model, DO NOT EDIT IT.

package ulb

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// ULB API Schema

/*
AddTargetsParamTargets is request schema for complex param
*/
type AddTargetsParamTargets struct {

	// 服务节点是否启用。默认值true
	Enabled *bool `required:"false"`

	// 服务节点是否为备节点。默认值false
	IsBackup *bool `required:"false"`

	// 服务节点的端口。限定取值：[1-65535]，默认值80
	Port *int `required:"false"`

	// 服务节点的IP。在IP类型时，必传
	ResourceIP *string `required:"false"`

	// 服务节点的资源ID。在非IP类型时，必传
	ResourceId *string `required:"false"`

	// 服务节点的类型。限定枚举值："UHost" / "UNI"/"UPM"/"IP"，默认值："UHost"；非IP类型，如果该资源有多个IP，将只能添加主IP；非IP类型，展示时，会显示相关资源信息，IP类型只展示IP信息。在相关资源被删除时，非IP类型会把相关资源从lb中剔除，IP类型不保证这个逻辑
	ResourceType *string `required:"false"`

	// 服务节点的子网资源ID。在IP类型时，必传
	SubnetId *string `required:"false"`

	// 服务节点的VPC资源ID。在IP类型时，必传
	VPCId *string `required:"false"`

	// 服务节点的权重。限定取值：[1-100]，默认值1；仅在加权轮询算法时有效
	Weight *int `required:"false"`
}

// AddTargetsRequest is request schema for AddTargets action
type AddTargetsRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 监听器的ID
	ListenerId *string `required:"true"`

	// 负载均衡实例的ID
	LoadBalancerId *string `required:"true"`

	//
	Targets []AddTargetsParamTargets `required:"false"`
}

// AddTargetsResponse is response schema for AddTargets action
type AddTargetsResponse struct {
	response.CommonBase

	// 服务节点信息
	Targets []TargetSet
}

// NewAddTargetsRequest will create request of AddTargets action.
func (c *ULBClient) NewAddTargetsRequest() *AddTargetsRequest {
	req := &AddTargetsRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: AddTargets

给应用型负载均衡监听器添加后端服务节点
*/
func (c *ULBClient) AddTargets(req *AddTargetsRequest) (*AddTargetsResponse, error) {
	var err error
	var res AddTargetsResponse

	reqCopier := *req

	err = c.Client.InvokeAction("AddTargets", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// AllocateBackendRequest is request schema for AllocateBackend action
type AllocateBackendRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 后端实例状态开关，枚举值： 1：启用； 0：禁用 默认为启用
	Enabled *int `required:"false"`

	// rs是否为backup，默认为00：普通rs1：backup的rs
	IsBackup *int `required:"false"`

	// 所添加的后端资源服务端口，取值范围[1-65535]，默认80
	Port *int `required:"false"`

	// 所添加的后端服务器的资源实例IP，当ResourceType 为 UHybrid 或 IP时有效，且必填；与ResourceId二选一必填
	ResourceIP *string `required:"false"`

	// 所添加的后端资源的资源ID；与ResourceIP二选一必填
	ResourceId *string `required:"false"`

	// 所添加的后端资源的类型，枚举值：UHost -> 云主机；UNI -> 虚拟网卡；UPM -> 物理云主机；UHybrid->混合云主机；CUBE->Cube， IP->IP类型；默认值为UHost。报文转发模式不支持UHybrid、CUBE、IP
	ResourceType *string `required:"true"`

	// 所添加的后端服务器所在的子网，当ResourceType 为 UHybrid 或 IP 时有效，且必填
	SubnetId *string `required:"false"`

	// 传统型负载均衡实例的ID
	ULBId *string `required:"true"`

	// 所添加的后端服务器所在的vpc，当ResourceType 为 UHybrid 或 IP 时有效，且必填
	VPCId *string `required:"false"`

	// VServer实例的ID
	VServerId *string `required:"true"`

	// 所添加的后端RS权重（在加权轮询算法下有效），取值范围[1-100]，默认为1
	Weight *int `required:"false"`
}

// AllocateBackendResponse is response schema for AllocateBackend action
type AllocateBackendResponse struct {
	response.CommonBase

	// 所添加的后端资源在CLB中的对象ID，（为CLB系统中使用，与资源自身ID无关），可用于 UpdateBackendAttribute/UpdateBackendAttributeBatch/ReleaseBackend
	BackendId string
}

// NewAllocateBackendRequest will create request of AllocateBackend action.
func (c *ULBClient) NewAllocateBackendRequest() *AllocateBackendRequest {
	req := &AllocateBackendRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: AllocateBackend

添加CLB后端资源实例
*/
func (c *ULBClient) AllocateBackend(req *AllocateBackendRequest) (*AllocateBackendResponse, error) {
	var err error
	var res AllocateBackendResponse

	reqCopier := *req

	err = c.Client.InvokeAction("AllocateBackend", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// AllocateBackendBatchRequest is request schema for AllocateBackendBatch action
type AllocateBackendBatchRequest struct {
	request.CommonBase

	//
	ApiVersion *int `required:"false"`

	//
	Backends []string `required:"true"`

	//
	ULBId *string `required:"true"`

	//
	VServerId *string `required:"true"`
}

// AllocateBackendBatchResponse is response schema for AllocateBackendBatch action
type AllocateBackendBatchResponse struct {
	response.CommonBase

	//
	BackendSet []BackendSet
}

// NewAllocateBackendBatchRequest will create request of AllocateBackendBatch action.
func (c *ULBClient) NewAllocateBackendBatchRequest() *AllocateBackendBatchRequest {
	req := &AllocateBackendBatchRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: AllocateBackendBatch
*/
func (c *ULBClient) AllocateBackendBatch(req *AllocateBackendBatchRequest) (*AllocateBackendBatchResponse, error) {
	var err error
	var res AllocateBackendBatchResponse

	reqCopier := *req

	err = c.Client.InvokeAction("AllocateBackendBatch", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// BindSSLRequest is request schema for BindSSL action
type BindSSLRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// SSL证书的Id
	SSLId *string `required:"true"`

	// 所绑定CLB实例ID
	ULBId *string `required:"true"`

	// 所绑定VServer实例ID
	VServerId *string `required:"true"`
}

// BindSSLResponse is response schema for BindSSL action
type BindSSLResponse struct {
	response.CommonBase
}

// NewBindSSLRequest will create request of BindSSL action.
func (c *ULBClient) NewBindSSLRequest() *BindSSLRequest {
	req := &BindSSLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: BindSSL

将SSL证书绑定到传统型负载均衡VServer
*/
func (c *ULBClient) BindSSL(req *BindSSLRequest) (*BindSSLResponse, error) {
	var err error
	var res BindSSLResponse

	reqCopier := *req

	err = c.Client.InvokeAction("BindSSL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
CreateListenerParamStickinessConfig is request schema for complex param
*/
type CreateListenerParamStickinessConfig struct {

	// （应用型专用）自定义Cookie。当StickinessType取值"UserDefined"时有效；限定字符长度：[0-255]
	CookieName *string `required:"false"`

	// 是否开启会话保持功能。应用型负载均衡实例基于Cookie实现；默认值为：false
	Enabled *bool `required:"false"`

	// （应用型专用）Cookie处理方式。限定枚举值："ServerInsert" / "UserDefined"；默认值为：“ServerInsert”
	Type *string `required:"false"`
}

/*
CreateListenerParamHealthCheckConfig is request schema for complex param
*/
type CreateListenerParamHealthCheckConfig struct {

	// （应用型专用）HTTP检查域名
	Domain *string `required:"false"`

	// 是否开启健康检查功能。暂时不支持关闭。默认值为：true
	Enabled *bool `required:"false"`

	// （应用型专用）HTTP检查路径
	Path *string `required:"false"`

	// 健康检查方式。应用型限定取值：“Port”/"HTTP"，默认值：“Port”
	Type *string `required:"false"`
}

// CreateListenerRequest is request schema for CreateListener action
type CreateListenerRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// （应用型专用）服务器默认证书ID。仅HTTPS监听支持，且必填；暂时只支持最大长度为1
	Certificates []string `required:"false"`

	// （应用型专用）是否开启数据压缩功能。目前只支持使用gzip对特定文件类型进行压缩。默认值为：false
	CompressionEnabled *bool `required:"false"`

	// （应用型专用）是否开启HTTP/2特性。仅HTTPS监听支持开启；默认值为：false
	HTTP2Enabled *bool `required:"false"`

	//
	HealthCheckConfig *CreateListenerParamHealthCheckConfig `required:"false"`

	// 连接空闲超时时间。单位：秒。应用型限定取值：[1-86400]；默认值60
	IdleTimeout *int `required:"false"`

	// 监听器的监听端口。应用型限定取值：[1-65535]，默认值80
	ListenerPort *int `required:"false"`

	// 监听协议。应用型限定取值：“HTTP”/"HTTPS"，默认值“HTTP”
	ListenerProtocol *string `required:"false"`

	// 负载均衡实例的ID
	LoadBalancerId *string `required:"true"`

	// 监听器的名称。限定字符长度：[1-255]；限定特殊字符，仅支持：“-”，“_”，“.”；默认值：listener
	Name *string `required:"false"`

	// （应用型专用）是否开启HTTP重定向到HTTPS。仅HTTP监听支持开启；默认值为：false
	RedirectEnabled *bool `required:"false"`

	// （应用型专用）重定向端口。限定取值：[1-65535]，默认值443
	RedirectPort *int `required:"false"`

	// 监听器的备注信息。限定字符长度：[0-255]
	Remark *string `required:"false"`

	// 负载均衡算法。应用型限定取值："Roundrobin"/"Source"/"WeightRoundrobin"/" Leastconn"/"Backup"，默认值"Roundrobin"
	Scheduler *string `required:"false"`

	// （应用型专用）安全策略组ID。仅HTTPS监听支持绑定；默认值“Default”，表示绑定原生策略
	SecurityPolicyId *string `required:"false"`

	//
	StickinessConfig *CreateListenerParamStickinessConfig `required:"false"`
}

// CreateListenerResponse is response schema for CreateListener action
type CreateListenerResponse struct {
	response.CommonBase

	// 监听器的ID
	ListenerId string
}

// NewCreateListenerRequest will create request of CreateListener action.
func (c *ULBClient) NewCreateListenerRequest() *CreateListenerRequest {
	req := &CreateListenerRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateListener

创建一个应用型负载均衡的监听器
*/
func (c *ULBClient) CreateListener(req *CreateListenerRequest) (*CreateListenerResponse, error) {
	var err error
	var res CreateListenerResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateListener", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateLoadBalancerRequest is request schema for CreateLoadBalancer action
type CreateLoadBalancerRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 付费模式。限定枚举值："Year" / "Month"/"Day"/"Dynamic"，默认值为：“Month”
	ChargeType *string `required:"false"`

	// 代金券code
	CouponId *string `required:"false"`

	// 负载均衡实例的IP协议。限定枚举值："IPv4" / "IPv6"/"DualStack"，默认值为：“IPv4”
	IPVersion *string `required:"false"`

	// 负载均衡实例的名称。默认值：lb；特殊字符仅支持：“-”，“_”，“.”；限定字符长度：[1-255]
	Name *string `required:"false"`

	// 购买的时长, 默认: 1; 0-> 购买至月末(0只在月付费有效，其余付费模式传0，实际收费按一个周期计费)
	Quantity *int `required:"false"`

	// 负载均衡实例的备注信息。限定字符长度：[0-255]
	Remark *string `required:"false"`

	// 负载均衡实例所属的子网资源ID。负载均衡实例的内网VIP和SNAT场景的源IP限定在该子网内；指定子网不影响添加后端服务节点时的范围，依旧是整个VPC下支持的资源
	SubnetId *string `required:"true"`

	// 负载均衡实例所属的业务组ID。默认值为“Default”； 传空则为Default业务组
	Tag *string `required:"false"`

	// 负载均衡实例的类型。限定枚举值："Application" / "Network"，默认值："Application"
	Type *string `required:"false"`

	// 负载均衡实例所属的VPC资源ID
	VPCId *string `required:"true"`
}

// CreateLoadBalancerResponse is response schema for CreateLoadBalancer action
type CreateLoadBalancerResponse struct {
	response.CommonBase

	// 负载均衡实例的ID
	LoadBalancerId string
}

// NewCreateLoadBalancerRequest will create request of CreateLoadBalancer action.
func (c *ULBClient) NewCreateLoadBalancerRequest() *CreateLoadBalancerRequest {
	req := &CreateLoadBalancerRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateLoadBalancer

创建一个应用型负载均衡实例
*/
func (c *ULBClient) CreateLoadBalancer(req *CreateLoadBalancerRequest) (*CreateLoadBalancerResponse, error) {
	var err error
	var res CreateLoadBalancerResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateLoadBalancer", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreatePolicyRequest is request schema for CreatePolicy action
type CreatePolicyRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 内容转发策略应用的传统型负载均衡后端资源实例的ID，来源于 AllocateBackend 返回的 BackendId
	BackendId []string `required:"true"`

	// 内容转发规则中域名的匹配方式，默认与原本一致。枚举值：Regular，正则；Wildcard，泛域名
	DomainMatchMode *string `required:"false"`

	// 内容转发匹配字段
	Match *string `required:"true"`

	// 策略优先级，1-9999；只针对路径规则生效
	PolicyPriority *int `required:"false"`

	// 内容转发匹配字段的类型
	Type *string `required:"false"`

	// 需要添加内容转发策略的传统型负载均衡实例ID
	ULBId *string `required:"true"`

	// 需要添加内容转发策略的传统型负载均衡VServer实例ID
	VServerId *string `required:"true"`
}

// CreatePolicyResponse is response schema for CreatePolicy action
type CreatePolicyResponse struct {
	response.CommonBase

	// 内容转发策略ID
	PolicyId string
}

// NewCreatePolicyRequest will create request of CreatePolicy action.
func (c *ULBClient) NewCreatePolicyRequest() *CreatePolicyRequest {
	req := &CreatePolicyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreatePolicy

传统型负载均衡创建VServer内容转发策略
*/
func (c *ULBClient) CreatePolicy(req *CreatePolicyRequest) (*CreatePolicyResponse, error) {
	var err error
	var res CreatePolicyResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreatePolicy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreatePolicyGroupRequest is request schema for CreatePolicyGroup action
type CreatePolicyGroupRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 内容转发策略组名称，默认为空
	GroupName *string `required:"false"`
}

// CreatePolicyGroupResponse is response schema for CreatePolicyGroup action
type CreatePolicyGroupResponse struct {
	response.CommonBase

	// 内容转发策略组的Id
	GroupId string
}

// NewCreatePolicyGroupRequest will create request of CreatePolicyGroup action.
func (c *ULBClient) NewCreatePolicyGroupRequest() *CreatePolicyGroupRequest {
	req := &CreatePolicyGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreatePolicyGroup

创建内容转发策略组
*/
func (c *ULBClient) CreatePolicyGroup(req *CreatePolicyGroupRequest) (*CreatePolicyGroupResponse, error) {
	var err error
	var res CreatePolicyGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreatePolicyGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
CreateRuleParamRuleActionsForwardConfigTargets is request schema for complex param
*/
type CreateRuleParamRuleActionsForwardConfigTargets struct {

	// 转发的后端服务节点的标识ID。限定在监听器的服务节点池里；数组长度可以是0；转发服务节点配置的数组长度不为0时，Id必填
	Id *string `required:"false"`

	// 转发的后端服务节点的权重。仅监听器负载均衡算法是加权轮询是有效
	Weight *int `required:"false"`
}

/*
CreateRuleParamRuleActionsForwardConfig is request schema for complex param
*/
type CreateRuleParamRuleActionsForwardConfig struct {

	//
	Targets []CreateRuleParamRuleActionsForwardConfigTargets `required:"false"`
}

/*
CreateRuleParamRuleConditionsPathConfig is request schema for complex param
*/
type CreateRuleParamRuleConditionsPathConfig struct {

	// 取值。暂时只支持数组长度为1；取值需符合相关条件；路径匹配时必填
	Values []string `required:"false"`
}

/*
CreateRuleParamRuleConditionsHostConfig is request schema for complex param
*/
type CreateRuleParamRuleConditionsHostConfig struct {

	// 匹配方式。限定枚举值："Regular"/"Wildcard"，默认值："Regular"
	MatchMode *string `required:"false"`

	// 取值。暂时只支持数组长度为1；取值需符合相关匹配方式的条件；域名匹配时必填
	Values []string `required:"false"`
}

/*
CreateRuleParamRuleActions is request schema for complex param
*/
type CreateRuleParamRuleActions struct {

	//
	ForwardConfig *CreateRuleParamRuleActionsForwardConfig `required:"false"`

	// 动作类型。限定枚举值："Forward"；RuleActions暂支持长度为1
	Type *string `required:"true"`
}

/*
CreateRuleParamRuleConditions is request schema for complex param
*/
type CreateRuleParamRuleConditions struct {

	//
	HostConfig *CreateRuleParamRuleConditionsHostConfig `required:"false"`

	//
	PathConfig *CreateRuleParamRuleConditionsPathConfig `required:"false"`

	// 匹配条件类型。限定枚举值："Host"/"Path"
	Type *string `required:"true"`
}

// CreateRuleRequest is request schema for CreateRule action
type CreateRuleRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 监听器的ID
	ListenerId *string `required:"true"`

	// 负载均衡实例的ID
	LoadBalancerId *string `required:"true"`

	// 当转发的服务节点为空时，规则是否忽略。默认值true
	Pass *bool `required:"false"`

	//
	RuleActions []CreateRuleParamRuleActions `required:"false"`

	//
	RuleConditions []CreateRuleParamRuleConditions `required:"false"`
}

// CreateRuleResponse is response schema for CreateRule action
type CreateRuleResponse struct {
	response.CommonBase

	// 转发规则的ID
	RuleId string
}

// NewCreateRuleRequest will create request of CreateRule action.
func (c *ULBClient) NewCreateRuleRequest() *CreateRuleRequest {
	req := &CreateRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateRule

给应用型负载均衡监听器创建一条转发规则
*/
func (c *ULBClient) CreateRule(req *CreateRuleRequest) (*CreateRuleResponse, error) {
	var err error
	var res CreateRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateSSLRequest is request schema for CreateSSL action
type CreateSSLRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// CA证书
	CaCert *string `required:"false"`

	// 加密证书的私钥
	PrivateKey *string `required:"false"`

	// SSL证书的完整内容，包括用户证书、加密证书的私钥、CA证书
	SSLContent *string `required:"false"`

	// SSL证书的名字，默认值不为空
	SSLName *string `required:"true"`

	// 所添加的SSL证书类型，目前只支持Pem格式
	SSLType *string `required:"false"`

	// USSL证书的ID
	USSLId *string `required:"false"`

	// 用户的证书
	UserCert *string `required:"false"`
}

// CreateSSLResponse is response schema for CreateSSL action
type CreateSSLResponse struct {
	response.CommonBase

	// SSL证书的Id
	SSLId string
}

// NewCreateSSLRequest will create request of CreateSSL action.
func (c *ULBClient) NewCreateSSLRequest() *CreateSSLRequest {
	req := &CreateSSLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateSSL

创建SSL证书，可以把整个 Pem 证书内容传过来，或者把证书、私钥、CA证书分别传过来
*/
func (c *ULBClient) CreateSSL(req *CreateSSLRequest) (*CreateSSLResponse, error) {
	var err error
	var res CreateSSLResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateSSL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateSecurityPolicyRequest is request schema for CreateSecurityPolicy action
type CreateSecurityPolicyRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 加密套件
	SSLCiphers []string `required:"true"`

	// 安全策略名称
	SecurityPolicyName *string `required:"true"`

	// TLS版本
	TLSVersion *string `required:"true"`
}

// CreateSecurityPolicyResponse is response schema for CreateSecurityPolicy action
type CreateSecurityPolicyResponse struct {
	response.CommonBase

	// 安全策略ID
	SecurityPolicyId string
}

// NewCreateSecurityPolicyRequest will create request of CreateSecurityPolicy action.
func (c *ULBClient) NewCreateSecurityPolicyRequest() *CreateSecurityPolicyRequest {
	req := &CreateSecurityPolicyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateSecurityPolicy

创建安全策略
*/
func (c *ULBClient) CreateSecurityPolicy(req *CreateSecurityPolicyRequest) (*CreateSecurityPolicyResponse, error) {
	var err error
	var res CreateSecurityPolicyResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateSecurityPolicy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateULBRequest is request schema for CreateULB action
type CreateULBRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// CLB 所属的业务组ID，如果不传则使用默认的业务组
	BusinessId *string `required:"false"`

	// 付费方式, 枚举值为: Year, 按年付费; Month, 按月付费; Dynamic, 按时付费
	ChargeType *string `required:"false"`

	// 防火墙ID，如果不传，则默认不绑定防火墙
	FirewallId *string `required:"false"`

	// 创建的CLB是否为内网模式
	InnerMode *string `required:"false"`

	// CLB 监听器类型，外网CLB默认RequestProxy，内网ULB默认PacketsTransmit。枚举值：RequestProxy，请求代理； PacketsTransmit ，报文转发。
	ListenType *string `required:"false"`

	// 创建的CLB是否为外网模式，默认即为外网模式
	OuterMode *string `required:"false"`

	// 【该字段已废弃，请谨慎使用】
	PrivateIp *string `required:"false" deprecated:"true"`

	// 备注
	Remark *string `required:"false"`

	// CLB 所属的子网ID，如果不传则随机选择一个。
	SubnetId *string `required:"false"`

	// 业务组
	Tag *string `required:"false"`

	// 负载均衡的名字，默认值为“ULB”
	ULBName *string `required:"false"`

	// CLB所在的VPC的ID。 如果不传则使用默认的VPC，若不传且无默认VPC则接口报错
	VPCId *string `required:"false"`
}

// CreateULBResponse is response schema for CreateULB action
type CreateULBResponse struct {
	response.CommonBase

	// IPv6地址Id
	IPv6AddressId string

	// 传统型负载均衡实例的Id
	ULBId string
}

// NewCreateULBRequest will create request of CreateULB action.
func (c *ULBClient) NewCreateULBRequest() *CreateULBRequest {
	req := &CreateULBRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateULB

创建传统型负载均衡负载均衡实例，可以选择内网或者外网
*/
func (c *ULBClient) CreateULB(req *CreateULBRequest) (*CreateULBResponse, error) {
	var err error
	var res CreateULBResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateULB", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateVServerRequest is request schema for CreateVServer action
type CreateVServerRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// ListenType为RequestProxy时表示空闲连接的回收时间，单位：秒，取值范围：时(0，86400]，默认值为60；ListenType为PacketsTransmit时表示连接保持的时间，单位：秒，取值范围：[60，900]，0 表示禁用连接保持
	ClientTimeout *int `required:"false"`

	// 根据MonitorType确认； 当MonitorType为Path时，此字段有意义，代表HTTP检查域名
	Domain *string `required:"false"`

	// 0:关闭 1:开启，用于数据压缩功能
	EnableCompression *int `required:"false"`

	// 0:关闭 1:开启，用于开启http2功能；默认值为0
	EnableHTTP2 *int `required:"false"`

	// 重定向端口，取值范围[0-65535]；默认值为0，代表关闭；仅HTTP协议支持开启重定向功能
	ForwardPort *int `required:"false"`

	// VServer后端端口，取值范围[1-65535]；默认值为80
	FrontendPort *int `required:"false"`

	// 监听器类型，枚举值，RequestProxy ，请求代理；PacketsTransmit ，报文转发。默认为RequestProxy
	ListenType *string `required:"false"`

	// VServer负载均衡模式，枚举值：Roundrobin -> 轮询;Source -> 源地址；ConsistentHash -> 一致性哈希；SourcePort -> 源地址（计算端口）；ConsistentHashPort -> 一致性哈希（计算端口）; WeightRoundrobin -> 加权轮询; Leastconn -> 最小连接数;Backup ->主备模式。ConsistentHash，SourcePort，ConsistentHashPort 只在报文转发中使用；Leastconn只在请求代理中使用；Roundrobin、Source和WeightRoundrobin,Backup在请求代理和报文转发中使用。默认为："Roundrobin"
	Method *string `required:"false"`

	// 健康检查类型，枚举值：Port -> 端口检查；Path -> 路径检查；Ping -> Ping探测；Customize -> UDP检查请求代理型默认值为Port，其中TCP协议仅支持Port，其他协议支持Port和Path;报文转发型TCP协议仅支持Port，UDP协议支持Ping、Port和Customize，默认值为Ping
	MonitorType *string `required:"false"`

	// 根据MonitorType确认； 当MonitorType为Path时，此字段有意义，代表HTTP检查路径
	Path *string `required:"false"`

	// 根据PersistenceType确认； None和ServerInsert： 此字段无意义； UserDefined：此字段传入自定义会话保持String
	PersistenceInfo *string `required:"false"`

	// VServer会话保持方式，默认关闭会话保持。枚举值：None -> 关闭；ServerInsert -> 自动生成KEY；UserDefined -> 用户自定义KEY。
	PersistenceType *string `required:"false"`

	// VServer实例的协议，请求代理模式下有 HTTP、HTTPS、TCP，报文转发下有 TCP，UDP。默认为“HTTP"
	Protocol *string `required:"false"`

	// 根据MonitorType确认； 当MonitorType为Customize时，此字段有意义，代表UDP检查发出的请求报文
	RequestMsg *string `required:"false"`

	// 根据MonitorType确认； 当MonitorType为Customize时，此字段有意义，代表UDP检查请求应收到的响应报文
	ResponseMsg *string `required:"false"`

	// 安全策略组ID，默认值'Default'
	SecurityPolicyId *string `required:"false"`

	// 传统型负载均衡实例ID
	ULBId *string `required:"true"`

	// VServer实例名称，默认为"VServer"
	VServerName *string `required:"false"`
}

// CreateVServerResponse is response schema for CreateVServer action
type CreateVServerResponse struct {
	response.CommonBase

	// VServer实例的Id
	VServerId string
}

// NewCreateVServerRequest will create request of CreateVServer action.
func (c *ULBClient) NewCreateVServerRequest() *CreateVServerRequest {
	req := &CreateVServerRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateVServer

创建CLB的VServer实例，定义监听的协议和端口以及负载均衡算法
*/
func (c *ULBClient) CreateVServer(req *CreateVServerRequest) (*CreateVServerResponse, error) {
	var err error
	var res CreateVServerResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateVServer", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteListenerRequest is request schema for DeleteListener action
type DeleteListenerRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 应用型负载均衡监听器的ID
	ListenerId *string `required:"true"`

	// 应用型负载均衡实例的ID
	LoadBalancerId *string `required:"true"`

	// 是否关闭相关监听器的重定向功能。默认为false，即有其他监听器重定向到本监听器，则删除失败。为true时，会先关闭相关监听器的重定向功能，再删除本监听器。默认值为：false
	RelatedRedirectDisabled *bool `required:"true"`
}

// DeleteListenerResponse is response schema for DeleteListener action
type DeleteListenerResponse struct {
	response.CommonBase
}

// NewDeleteListenerRequest will create request of DeleteListener action.
func (c *ULBClient) NewDeleteListenerRequest() *DeleteListenerRequest {
	req := &DeleteListenerRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteListener

删除一个应用型负载均衡监听器
*/
func (c *ULBClient) DeleteListener(req *DeleteListenerRequest) (*DeleteListenerResponse, error) {
	var err error
	var res DeleteListenerResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteListener", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteLoadBalancerRequest is request schema for DeleteLoadBalancer action
type DeleteLoadBalancerRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 应用型负载均衡实例的ID
	LoadBalancerId *string `required:"true"`
}

// DeleteLoadBalancerResponse is response schema for DeleteLoadBalancer action
type DeleteLoadBalancerResponse struct {
	response.CommonBase
}

// NewDeleteLoadBalancerRequest will create request of DeleteLoadBalancer action.
func (c *ULBClient) NewDeleteLoadBalancerRequest() *DeleteLoadBalancerRequest {
	req := &DeleteLoadBalancerRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteLoadBalancer

删除一个应用型负载均衡实例
*/
func (c *ULBClient) DeleteLoadBalancer(req *DeleteLoadBalancerRequest) (*DeleteLoadBalancerResponse, error) {
	var err error
	var res DeleteLoadBalancerResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteLoadBalancer", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeletePolicyRequest is request schema for DeletePolicy action
type DeletePolicyRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 【该字段已废弃，请谨慎使用】
	GroupId *string `required:"false" deprecated:"true"`

	// CLB的内容转发策略ID
	PolicyId *string `required:"true"`

	// CLB的VServer 资源ID
	VServerId *string `required:"false"`
}

// DeletePolicyResponse is response schema for DeletePolicy action
type DeletePolicyResponse struct {
	response.CommonBase
}

// NewDeletePolicyRequest will create request of DeletePolicy action.
func (c *ULBClient) NewDeletePolicyRequest() *DeletePolicyRequest {
	req := &DeletePolicyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeletePolicy

删除传统型负载均衡的内容转发策略
*/
func (c *ULBClient) DeletePolicy(req *DeletePolicyRequest) (*DeletePolicyResponse, error) {
	var err error
	var res DeletePolicyResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeletePolicy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeletePolicyGroupRequest is request schema for DeletePolicyGroup action
type DeletePolicyGroupRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 内容转发策略组ID
	GroupId *string `required:"true"`
}

// DeletePolicyGroupResponse is response schema for DeletePolicyGroup action
type DeletePolicyGroupResponse struct {
	response.CommonBase
}

// NewDeletePolicyGroupRequest will create request of DeletePolicyGroup action.
func (c *ULBClient) NewDeletePolicyGroupRequest() *DeletePolicyGroupRequest {
	req := &DeletePolicyGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeletePolicyGroup

删除内容转发策略组
*/
func (c *ULBClient) DeletePolicyGroup(req *DeletePolicyGroupRequest) (*DeletePolicyGroupResponse, error) {
	var err error
	var res DeletePolicyGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeletePolicyGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteRuleRequest is request schema for DeleteRule action
type DeleteRuleRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 应用型负载均衡监听器的ID
	ListenerId *string `required:"true"`

	// 应用型负载均衡实例的ID
	LoadBalancerId *string `required:"true"`

	// 应用型负载均衡的转发规则的ID
	RuleId *string `required:"true"`
}

// DeleteRuleResponse is response schema for DeleteRule action
type DeleteRuleResponse struct {
	response.CommonBase
}

// NewDeleteRuleRequest will create request of DeleteRule action.
func (c *ULBClient) NewDeleteRuleRequest() *DeleteRuleRequest {
	req := &DeleteRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteRule

删除应用型负载均衡监听器的一条转发规则
*/
func (c *ULBClient) DeleteRule(req *DeleteRuleRequest) (*DeleteRuleResponse, error) {
	var err error
	var res DeleteRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteSSLRequest is request schema for DeleteSSL action
type DeleteSSLRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// SSL证书的ID
	SSLId *string `required:"true"`
}

// DeleteSSLResponse is response schema for DeleteSSL action
type DeleteSSLResponse struct {
	response.CommonBase
}

// NewDeleteSSLRequest will create request of DeleteSSL action.
func (c *ULBClient) NewDeleteSSLRequest() *DeleteSSLRequest {
	req := &DeleteSSLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteSSL

删除SSL证书
*/
func (c *ULBClient) DeleteSSL(req *DeleteSSLRequest) (*DeleteSSLResponse, error) {
	var err error
	var res DeleteSSLResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteSSL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteSecurityPolicyRequest is request schema for DeleteSecurityPolicy action
type DeleteSecurityPolicyRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 安全策略ID
	SecurityPolicyId *string `required:"true"`
}

// DeleteSecurityPolicyResponse is response schema for DeleteSecurityPolicy action
type DeleteSecurityPolicyResponse struct {
	response.CommonBase
}

// NewDeleteSecurityPolicyRequest will create request of DeleteSecurityPolicy action.
func (c *ULBClient) NewDeleteSecurityPolicyRequest() *DeleteSecurityPolicyRequest {
	req := &DeleteSecurityPolicyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteSecurityPolicy

删除安全策略
*/
func (c *ULBClient) DeleteSecurityPolicy(req *DeleteSecurityPolicyRequest) (*DeleteSecurityPolicyResponse, error) {
	var err error
	var res DeleteSecurityPolicyResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteSecurityPolicy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteULBRequest is request schema for DeleteULB action
type DeleteULBRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 删除clb时是否释放绑定的EIP，false标识只解绑EIP，true表示会释放绑定的EIP，默认是false。Anycast IP 此参数无效
	ReleaseEip *bool `required:"false"`

	// 传统型负载均衡实例的ID
	ULBId *string `required:"true"`
}

// DeleteULBResponse is response schema for DeleteULB action
type DeleteULBResponse struct {
	response.CommonBase
}

// NewDeleteULBRequest will create request of DeleteULB action.
func (c *ULBClient) NewDeleteULBRequest() *DeleteULBRequest {
	req := &DeleteULBRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteULB

删除传统型负载均衡实例
*/
func (c *ULBClient) DeleteULB(req *DeleteULBRequest) (*DeleteULBResponse, error) {
	var err error
	var res DeleteULBResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteULB", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteVServerRequest is request schema for DeleteVServer action
type DeleteVServerRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 传统型负载均衡实例的ID
	ULBId *string `required:"true"`

	// CLB下的VServer实例的ID
	VServerId *string `required:"true"`
}

// DeleteVServerResponse is response schema for DeleteVServer action
type DeleteVServerResponse struct {
	response.CommonBase
}

// NewDeleteVServerRequest will create request of DeleteVServer action.
func (c *ULBClient) NewDeleteVServerRequest() *DeleteVServerRequest {
	req := &DeleteVServerRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteVServer

删除CLB的VServer实例
*/
func (c *ULBClient) DeleteVServer(req *DeleteVServerRequest) (*DeleteVServerResponse, error) {
	var err error
	var res DeleteVServerResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteVServer", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeListenersRequest is request schema for DescribeListeners action
type DescribeListenersRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 数据分页值，默认为100
	Limit *int `required:"false"`

	// 应用型负载均衡监听器的ID。若指定ListenerId，则忽略LoadBalancerId。ListenId和LoadBalancerId必选其一
	ListenerId *string `required:"false"`

	// 应用型负载均衡实例的ID。未指定ListenId，则描述指定的LoadBalancerId下的所有监听器。
	LoadBalancerId *string `required:"false"`

	// 数据偏移量，默认为0
	Offset *int `required:"false"`
}

// DescribeListenersResponse is response schema for DescribeListeners action
type DescribeListenersResponse struct {
	response.CommonBase

	// 负载均衡监听器信息
	Listeners []Listener

	// 满足条件的负载均衡监听器总数
	TotalCount int
}

// NewDescribeListenersRequest will create request of DescribeListeners action.
func (c *ULBClient) NewDescribeListenersRequest() *DescribeListenersRequest {
	req := &DescribeListenersRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeListeners

描述一个指定的监听器或者一个应用型负载均衡实例下的所有监听器
*/
func (c *ULBClient) DescribeListeners(req *DescribeListenersRequest) (*DescribeListenersResponse, error) {
	var err error
	var res DescribeListenersResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeListeners", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeLoadBalancersRequest is request schema for DescribeLoadBalancers action
type DescribeLoadBalancersRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 数据分页值，默认为100
	Limit *string `required:"false"`

	// 负载均衡实例的ID。必须是同一类型的实例，若指定了实例ID，将忽略除Type外的其他过滤条件
	LoadBalancerIds []string `required:"false"`

	// 数据偏移量，默认为0
	Offset *string `required:"false"`

	// 是否获取监听器和后端服务节点的详细信息。默认值：false
	ShowDetail *bool `required:"false"`

	// 限定所在的子网
	SubnetId *string `required:"false"`

	// 负载均衡实例的类型。限定枚举值："Application" / "Network"，默认值："Application"
	Type *string `required:"false"`

	// 限定所在的VPC
	VPCId *string `required:"false"`
}

// DescribeLoadBalancersResponse is response schema for DescribeLoadBalancers action
type DescribeLoadBalancersResponse struct {
	response.CommonBase

	// 负载均衡实例信息
	LoadBalancers []LoadBalancer

	// 满足条件的负载均衡实例总数
	TotalCount int
}

// NewDescribeLoadBalancersRequest will create request of DescribeLoadBalancers action.
func (c *ULBClient) NewDescribeLoadBalancersRequest() *DescribeLoadBalancersRequest {
	req := &DescribeLoadBalancersRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeLoadBalancers

描述特定条件下的应用型负载均衡实例或者全部的应用型负载均衡实例
*/
func (c *ULBClient) DescribeLoadBalancers(req *DescribeLoadBalancersRequest) (*DescribeLoadBalancersResponse, error) {
	var err error
	var res DescribeLoadBalancersResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeLoadBalancers", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribePolicyGroupRequest is request schema for DescribePolicyGroup action
type DescribePolicyGroupRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 内容转发策略组ID
	GroupId *string `required:"false"`

	// 数据分页值，默认为20
	Limit *int `required:"false"`

	// 数据偏移量，默认值为0
	Offset *int `required:"false"`
}

// DescribePolicyGroupResponse is response schema for DescribePolicyGroup action
type DescribePolicyGroupResponse struct {
	response.CommonBase

	// 内容转发策略组列表，具体结构见 UlbPolicyGroupSet
	DataSet []UlbPolicyGroupSet
}

// NewDescribePolicyGroupRequest will create request of DescribePolicyGroup action.
func (c *ULBClient) NewDescribePolicyGroupRequest() *DescribePolicyGroupRequest {
	req := &DescribePolicyGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribePolicyGroup

获取内容转发组详细信息
*/
func (c *ULBClient) DescribePolicyGroup(req *DescribePolicyGroupRequest) (*DescribePolicyGroupResponse, error) {
	var err error
	var res DescribePolicyGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribePolicyGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeRulesRequest is request schema for DescribeRules action
type DescribeRulesRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 监听器的ID
	ListenerId *string `required:"true"`

	// 应用型负载均衡实例的ID
	LoadBalancerId *string `required:"true"`

	// 应用型负载均衡转发规则的ID。指定RuleId，则只描述该规则
	RuleId *string `required:"false"`
}

// DescribeRulesResponse is response schema for DescribeRules action
type DescribeRulesResponse struct {
	response.CommonBase

	// 转发规则信息
	Rules []Rule
}

// NewDescribeRulesRequest will create request of DescribeRules action.
func (c *ULBClient) NewDescribeRulesRequest() *DescribeRulesRequest {
	req := &DescribeRulesRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeRules

描述一条指定的转发规则或者一个应用型负载均衡监听器下的所有转发规则
*/
func (c *ULBClient) DescribeRules(req *DescribeRulesRequest) (*DescribeRulesResponse, error) {
	var err error
	var res DescribeRulesResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeRules", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeSSLRequest is request schema for DescribeSSL action
type DescribeSSLRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 数据分页值，默认为20
	Limit *int `required:"false"`

	// 数据偏移量，默认值为0
	Offset *int `required:"false"`

	// SSL证书的Id
	SSLId *string `required:"false"`
}

// DescribeSSLResponse is response schema for DescribeSSL action
type DescribeSSLResponse struct {
	response.CommonBase

	// SSL证书详细信息，具体结构见 ULBSSLSet
	DataSet []ULBSSLSet

	// 满足条件的SSL证书总数
	TotalCount int
}

// NewDescribeSSLRequest will create request of DescribeSSL action.
func (c *ULBClient) NewDescribeSSLRequest() *DescribeSSLRequest {
	req := &DescribeSSLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeSSL

获取SSL证书信息，仅能获取SSL证书与传统型负载均衡监听器的绑定关系
*/
func (c *ULBClient) DescribeSSL(req *DescribeSSLRequest) (*DescribeSSLResponse, error) {
	var err error
	var res DescribeSSLResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeSSL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeSSLV2Request is request schema for DescribeSSLV2 action
type DescribeSSLV2Request struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 数据分页值，默认为20
	Limit *int `required:"false"`

	// 数据偏移量，默认值为0
	Offset *int `required:"false"`

	// SSL证书的Id
	SSLId *string `required:"false"`
}

// DescribeSSLV2Response is response schema for DescribeSSLV2 action
type DescribeSSLV2Response struct {
	response.CommonBase

	// SSL证书详细信息，具体结构见SSLInfo
	DataSet []SSLInfo

	// 满足条件的SSL证书总数
	TotalCount int
}

// NewDescribeSSLV2Request will create request of DescribeSSLV2 action.
func (c *ULBClient) NewDescribeSSLV2Request() *DescribeSSLV2Request {
	req := &DescribeSSLV2Request{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeSSLV2

获取SSL证书信息，该接口可以同时获取SSL与传统型和应用型负载均衡监听器的绑定关系
*/
func (c *ULBClient) DescribeSSLV2(req *DescribeSSLV2Request) (*DescribeSSLV2Response, error) {
	var err error
	var res DescribeSSLV2Response

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeSSLV2", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeSecurityPoliciesRequest is request schema for DescribeSecurityPolicies action
type DescribeSecurityPoliciesRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 数据分页值
	Limit *int `required:"false"`

	// 数据偏移量
	Offset *int `required:"false"`

	// 安全策略ID
	SecurityPolicyId *string `required:"false"`
}

// DescribeSecurityPoliciesResponse is response schema for DescribeSecurityPolicies action
type DescribeSecurityPoliciesResponse struct {
	response.CommonBase

	// 安全策略列表，每项参数详见SecurityPolicy
	DataSet []SecurityPolicy

	// 满足条件的安全策略总数
	TotalCount int
}

// NewDescribeSecurityPoliciesRequest will create request of DescribeSecurityPolicies action.
func (c *ULBClient) NewDescribeSecurityPoliciesRequest() *DescribeSecurityPoliciesRequest {
	req := &DescribeSecurityPoliciesRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeSecurityPolicies

获取安全策略的信息，绑定关系仅能获取安全策略与传统型负载均衡监听器的绑定关系
*/
func (c *ULBClient) DescribeSecurityPolicies(req *DescribeSecurityPoliciesRequest) (*DescribeSecurityPoliciesResponse, error) {
	var err error
	var res DescribeSecurityPoliciesResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeSecurityPolicies", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeSecurityPoliciesV2Request is request schema for DescribeSecurityPoliciesV2 action
type DescribeSecurityPoliciesV2Request struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 数据分页值
	Limit *int `required:"false"`

	// 数据偏移量
	Offset *int `required:"false"`

	// 安全策略ID
	SecurityPolicyId *string `required:"false"`
}

// DescribeSecurityPoliciesV2Response is response schema for DescribeSecurityPoliciesV2 action
type DescribeSecurityPoliciesV2Response struct {
	response.CommonBase

	// 安全策略列表，每项参数详见SecurityPolicyInfo
	DataSet []SecurityPolicyInfo

	// 满足条件的安全策略总数
	TotalCount int
}

// NewDescribeSecurityPoliciesV2Request will create request of DescribeSecurityPoliciesV2 action.
func (c *ULBClient) NewDescribeSecurityPoliciesV2Request() *DescribeSecurityPoliciesV2Request {
	req := &DescribeSecurityPoliciesV2Request{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeSecurityPoliciesV2

获取安全策略的信息，可以同时获取安全策略与传统型和应用性负载均衡监听器的绑定关系
*/
func (c *ULBClient) DescribeSecurityPoliciesV2(req *DescribeSecurityPoliciesV2Request) (*DescribeSecurityPoliciesV2Response, error) {
	var err error
	var res DescribeSecurityPoliciesV2Response

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeSecurityPoliciesV2", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeSupportCiphersRequest is request schema for DescribeSupportCiphers action
type DescribeSupportCiphersRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

}

// DescribeSupportCiphersResponse is response schema for DescribeSupportCiphers action
type DescribeSupportCiphersResponse struct {
	response.CommonBase

	// 返回支持的TLS最低版本和加密套件，每项参数详见 TLSAndCiphers
	DataSet []TLSAndCiphers
}

// NewDescribeSupportCiphersRequest will create request of DescribeSupportCiphers action.
func (c *ULBClient) NewDescribeSupportCiphersRequest() *DescribeSupportCiphersRequest {
	req := &DescribeSupportCiphersRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeSupportCiphers

返回安全策略所有支持的加密套件
*/
func (c *ULBClient) DescribeSupportCiphers(req *DescribeSupportCiphersRequest) (*DescribeSupportCiphersResponse, error) {
	var err error
	var res DescribeSupportCiphersResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeSupportCiphers", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeULBRequest is request schema for DescribeULB action
type DescribeULBRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// CLB所属的业务组ID
	BusinessId *string `required:"false"`

	// 数据分页值，默认为20
	Limit *int `required:"false"`

	// 数据偏移量，默认为0
	Offset *int `required:"false"`

	// CLB所属的子网ID
	SubnetId *string `required:"false"`

	// 传统型负载均衡实例的Id。 若指定则返回指定的传统型负载均衡实例的信息； 若不指定则返回当前数据中心中所有的传统型负载均衡实例的信息
	ULBId *string `required:"false"`

	// CLB所属的VPC
	VPCId *string `required:"false"`
}

// DescribeULBResponse is response schema for DescribeULB action
type DescribeULBResponse struct {
	response.CommonBase

	// CLB列表，每项参数详见 ULBSet
	DataSet []ULBSet

	// 满足条件的CLB总数
	TotalCount int
}

// NewDescribeULBRequest will create request of DescribeULB action.
func (c *ULBClient) NewDescribeULBRequest() *DescribeULBRequest {
	req := &DescribeULBRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeULB

获取CLB详细信息
*/
func (c *ULBClient) DescribeULB(req *DescribeULBRequest) (*DescribeULBResponse, error) {
	var err error
	var res DescribeULBResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeULB", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeULBSimpleRequest is request schema for DescribeULBSimple action
type DescribeULBSimpleRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"false"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// CLB所属的业务组ID
	BusinessId *string `required:"false"`

	// 数据分页值，默认为10000
	Limit *int `required:"false"`

	// 数据偏移量，默认为0
	Offset *int `required:"false"`

	// CLB所属的子网ID
	SubnetId *string `required:"false"`

	// 传统型负载均衡实例的Id。 若指定则返回指定的传统型负载均衡实例的信息； 若不指定则返回当前数据中心中所有的传统型负载均衡实例的信息
	ULBId *string `required:"false"`

	// CLB所属的VPC
	VPCId *string `required:"false"`
}

// DescribeULBSimpleResponse is response schema for DescribeULBSimple action
type DescribeULBSimpleResponse struct {
	response.CommonBase

	// CLB列表，每项参数详见 ULBSimpleSet
	DataSet []ULBSimpleSet

	// 满足条件的CLB总数
	TotalCount int
}

// NewDescribeULBSimpleRequest will create request of DescribeULBSimple action.
func (c *ULBClient) NewDescribeULBSimpleRequest() *DescribeULBSimpleRequest {
	req := &DescribeULBSimpleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeULBSimple

获取CLB信息
*/
func (c *ULBClient) DescribeULBSimple(req *DescribeULBSimpleRequest) (*DescribeULBSimpleResponse, error) {
	var err error
	var res DescribeULBSimpleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeULBSimple", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeVServerRequest is request schema for DescribeVServer action
type DescribeVServerRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 数据分页值
	Limit *int `required:"false"`

	// 数据偏移量
	Offset *int `required:"false"`

	// 传统型负载均衡实例的Id
	ULBId *string `required:"false"`

	// CLB下的VServer实例的Id；若指定则返回指定的VServer实例的信息； 若不指定则返回当前传统型负载均衡实例下所有VServer的信息
	VServerId *string `required:"false"`
}

// DescribeVServerResponse is response schema for DescribeVServer action
type DescribeVServerResponse struct {
	response.CommonBase

	// VServer列表，每项参数详见 ULBVServerSet
	DataSet []ULBVServerSet

	// 满足条件的VServer总数
	TotalCount int
}

// NewDescribeVServerRequest will create request of DescribeVServer action.
func (c *ULBClient) NewDescribeVServerRequest() *DescribeVServerRequest {
	req := &DescribeVServerRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeVServer

获取CLB下的VServer的详细信息
*/
func (c *ULBClient) DescribeVServer(req *DescribeVServerRequest) (*DescribeVServerResponse, error) {
	var err error
	var res DescribeVServerResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeVServer", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ReleaseBackendRequest is request schema for ReleaseBackend action
type ReleaseBackendRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 后端资源实例的ID(CLB后端ID，非资源自身ID)
	BackendId *string `required:"true"`

	// 传统型负载均衡实例的ID
	ULBId *string `required:"true"`
}

// ReleaseBackendResponse is response schema for ReleaseBackend action
type ReleaseBackendResponse struct {
	response.CommonBase
}

// NewReleaseBackendRequest will create request of ReleaseBackend action.
func (c *ULBClient) NewReleaseBackendRequest() *ReleaseBackendRequest {
	req := &ReleaseBackendRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ReleaseBackend

从CLB的VServer释放后端资源实例
*/
func (c *ULBClient) ReleaseBackend(req *ReleaseBackendRequest) (*ReleaseBackendResponse, error) {
	var err error
	var res ReleaseBackendResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ReleaseBackend", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// RemoveTargetsRequest is request schema for RemoveTargets action
type RemoveTargetsRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 服务节点的标识ID。不超过20个；
	Ids []string `required:"true"`

	// 监听器的ID
	ListenerId *string `required:"true"`

	// 负载均衡实例的ID
	LoadBalancerId *string `required:"true"`
}

// RemoveTargetsResponse is response schema for RemoveTargets action
type RemoveTargetsResponse struct {
	response.CommonBase
}

// NewRemoveTargetsRequest will create request of RemoveTargets action.
func (c *ULBClient) NewRemoveTargetsRequest() *RemoveTargetsRequest {
	req := &RemoveTargetsRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: RemoveTargets

从应用型负载均衡监听器删除后端服务节点
*/
func (c *ULBClient) RemoveTargets(req *RemoveTargetsRequest) (*RemoveTargetsResponse, error) {
	var err error
	var res RemoveTargetsResponse

	reqCopier := *req

	err = c.Client.InvokeAction("RemoveTargets", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UnBindSecurityPolicyRequest is request schema for UnBindSecurityPolicy action
type UnBindSecurityPolicyRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 安全策略ID
	SecurityPolicyId *string `required:"true"`
}

// UnBindSecurityPolicyResponse is response schema for UnBindSecurityPolicy action
type UnBindSecurityPolicyResponse struct {
	response.CommonBase
}

// NewUnBindSecurityPolicyRequest will create request of UnBindSecurityPolicy action.
func (c *ULBClient) NewUnBindSecurityPolicyRequest() *UnBindSecurityPolicyRequest {
	req := &UnBindSecurityPolicyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UnBindSecurityPolicy

批量解绑安全策略，会同时解绑与传统型和应用型负载均衡监听器的绑定关系
*/
func (c *ULBClient) UnBindSecurityPolicy(req *UnBindSecurityPolicyRequest) (*UnBindSecurityPolicyResponse, error) {
	var err error
	var res UnBindSecurityPolicyResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UnBindSecurityPolicy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UnbindSSLRequest is request schema for UnbindSSL action
type UnbindSSLRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// SSL证书的Id
	SSLId *string `required:"true"`

	// 所绑定CLB实例ID
	ULBId *string `required:"true"`

	// CLB所绑定VServer实例ID
	VServerId *string `required:"true"`
}

// UnbindSSLResponse is response schema for UnbindSSL action
type UnbindSSLResponse struct {
	response.CommonBase
}

// NewUnbindSSLRequest will create request of UnbindSSL action.
func (c *ULBClient) NewUnbindSSLRequest() *UnbindSSLRequest {
	req := &UnbindSSLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UnbindSSL

从CLB下的VServer解绑SSL证书
*/
func (c *ULBClient) UnbindSSL(req *UnbindSSLRequest) (*UnbindSSLResponse, error) {
	var err error
	var res UnbindSSLResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UnbindSSL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateBackendAttributeRequest is request schema for UpdateBackendAttribute action
type UpdateBackendAttributeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 后端资源实例的ID(CLB后端ID，非资源自身ID)
	BackendId *string `required:"true"`

	// 后端实例状态开关
	Enabled *int `required:"false"`

	// 是否为backup0：主rs1：备rs默认为0
	IsBackup *int `required:"false"`

	// 后端资源服务端口，取值范围[1-65535]
	Port *int `required:"false"`

	// 传统型负载均衡资源ID
	ULBId *string `required:"true"`

	// 所添加的后端RS权重（在加权轮询算法下有效），取值范围[1-100]，默认为1
	Weight *int `required:"false"`
}

// UpdateBackendAttributeResponse is response schema for UpdateBackendAttribute action
type UpdateBackendAttributeResponse struct {
	response.CommonBase
}

// NewUpdateBackendAttributeRequest will create request of UpdateBackendAttribute action.
func (c *ULBClient) NewUpdateBackendAttributeRequest() *UpdateBackendAttributeRequest {
	req := &UpdateBackendAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateBackendAttribute

更新CLB后端资源实例(服务节点)属性
*/
func (c *ULBClient) UpdateBackendAttribute(req *UpdateBackendAttributeRequest) (*UpdateBackendAttributeResponse, error) {
	var err error
	var res UpdateBackendAttributeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateBackendAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
UpdateBackendBatchParamAttributes is request schema for complex param
*/
type UpdateBackendBatchParamAttributes struct {

	// 后端资源实例的ID(ULB后端ID，非资源自身ID)
	BackendId *string `required:"true"`

	// 后端实例状态开关
	Enabled *int `required:"false"`

	// 是否为backup 0：主rs 1：备rs 默认为0
	IsBackup *int `required:"false"`

	// 后端资源服务端口，取值范围[1-65535]
	Port *int `required:"false"`

	// 所添加的后端RS权重（在加权轮询算法下有效），取值范围[0-100]，默认为1
	Weight *int `required:"false"`
}

// UpdateBackendBatchRequest is request schema for UpdateBackendBatch action
type UpdateBackendBatchRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	//
	Attributes []UpdateBackendBatchParamAttributes `required:"false"`

	// 负载均衡资源ID
	ULBId *string `required:"true"`
}

// UpdateBackendBatchResponse is response schema for UpdateBackendBatch action
type UpdateBackendBatchResponse struct {
	response.CommonBase

	// 返回ulb对每个rs的修改是否成功
	BackendSet []BackendMsg
}

// NewUpdateBackendBatchRequest will create request of UpdateBackendBatch action.
func (c *ULBClient) NewUpdateBackendBatchRequest() *UpdateBackendBatchRequest {
	req := &UpdateBackendBatchRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateBackendBatch

批量更新ULB后端资源实例(服务节点)属性
*/
func (c *ULBClient) UpdateBackendBatch(req *UpdateBackendBatchRequest) (*UpdateBackendBatchResponse, error) {
	var err error
	var res UpdateBackendBatchResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateBackendBatch", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
UpdateListenerAttributeParamHealthCheckConfig is request schema for complex param
*/
type UpdateListenerAttributeParamHealthCheckConfig struct {

	// （应用型专用）HTTP检查域名
	Domain *string `required:"false"`

	// 是否开启健康检查功能。暂时不支持关闭；默认值为：true
	Enabled *bool `required:"false"`

	// （应用型专用）HTTP检查路径
	Path *string `required:"false"`

	// 健康检查方式。应用型限定取值：“Port”/"HTTP"；默认值：“Port”
	Type *string `required:"false"`
}

/*
UpdateListenerAttributeParamStickinessConfig is request schema for complex param
*/
type UpdateListenerAttributeParamStickinessConfig struct {

	// （应用型专用）自定义Cookie。当StickinessType取值"UserDefined"时有效；限定字符长度：[0-255]
	CookieName *string `required:"false"`

	// 是否开启会话保持功能。应用型负载均衡实例基于Cookie实现，网络型负载均衡则基于源IP，保证在对应的空闲超时时间内，同一个源IP送到同一个服务节点。默认值为：false
	Enabled *bool `required:"false"`

	// （应用型专用）Cookie处理方式。限定枚举值："ServerInsert" / "UserDefined"，默认值为：“ServerInsert”
	Type *string `required:"false"`
}

// UpdateListenerAttributeRequest is request schema for UpdateListenerAttribute action
type UpdateListenerAttributeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// （应用型专用）服务器默认证书ID。仅HTTPS监听支持
	Certificates []string `required:"false"`

	// （应用型专用）是否开启数据压缩功能。目前只支持使用gzip对特定文件类型进行压缩
	CompressionEnabled *bool `required:"false"`

	// （应用型专用）是否开启HTTP/2特性。仅HTTPS监听支持开启
	HTTP2Enabled *bool `required:"false"`

	//
	HealthCheckConfig *UpdateListenerAttributeParamHealthCheckConfig `required:"false"`

	// 连接空闲超时时间。单位：秒。应用型限定取值：[1-86400]
	IdleTimeout *int `required:"false"`

	// 监听器的ID
	ListenerId *string `required:"true"`

	// 负载均衡实例的ID
	LoadBalancerId *string `required:"true"`

	// 监听器的名称。限定字符长度：[1-255]；限定特殊字符，仅支持：-_.
	Name *string `required:"false"`

	// （应用型专用）是否开启HTTP重定向到HTTPS。仅HTTP监听支持开启
	RedirectEnabled *bool `required:"false"`

	// （应用型专用）重定向端口。限定取值：[1-65535]
	RedirectPort *int `required:"false"`

	// 监听器的备注信息。限定字符长度：[0-255]
	Remark *string `required:"false"`

	// 负载均衡算法。应用型限定取值："Roundrobin"/"Source"/"WeightRoundrobin"/" Leastconn"/"Backup"
	Scheduler *string `required:"false"`

	// （应用型专用）安全策略组ID。仅HTTPS监听支持绑定。“Default”，表示绑定原生策略
	SecurityPolicyId *string `required:"false"`

	//
	StickinessConfig *UpdateListenerAttributeParamStickinessConfig `required:"false"`
}

// UpdateListenerAttributeResponse is response schema for UpdateListenerAttribute action
type UpdateListenerAttributeResponse struct {
	response.CommonBase
}

// NewUpdateListenerAttributeRequest will create request of UpdateListenerAttribute action.
func (c *ULBClient) NewUpdateListenerAttributeRequest() *UpdateListenerAttributeRequest {
	req := &UpdateListenerAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateListenerAttribute

更新一个应用型负载均衡监听器的属性
*/
func (c *ULBClient) UpdateListenerAttribute(req *UpdateListenerAttributeRequest) (*UpdateListenerAttributeResponse, error) {
	var err error
	var res UpdateListenerAttributeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateListenerAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
UpdateLoadBalancerAttributeParamAccessLogConfig is request schema for complex param
*/
type UpdateLoadBalancerAttributeParamAccessLogConfig struct {

	// （应用型专用）是否开启访问日志记录功能
	Enabled *bool `required:"false"`

	// （应用型专用）用于存储访问日志的bucket
	US3BucketName *string `required:"false"`

	// （应用型专用）上传访问日志到bucket所需的token
	US3TokenId *string `required:"false"`
}

// UpdateLoadBalancerAttributeRequest is request schema for UpdateLoadBalancerAttribute action
type UpdateLoadBalancerAttributeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	//
	AccessLogConfig *UpdateLoadBalancerAttributeParamAccessLogConfig `required:"false"`

	// 负载均衡实例的ID
	LoadBalancerId *string `required:"true"`

	// 负载均衡实例的名称，不传则默认不修改
	Name *string `required:"false"`

	// 负载均衡实例的备注信息，不传则默认不修改，限定字符长度：[0-255]
	Remark *string `required:"false"`

	// 负载均衡实例所属的业务组ID，不传则默认不修改
	Tag *string `required:"false"`
}

// UpdateLoadBalancerAttributeResponse is response schema for UpdateLoadBalancerAttribute action
type UpdateLoadBalancerAttributeResponse struct {
	response.CommonBase
}

// NewUpdateLoadBalancerAttributeRequest will create request of UpdateLoadBalancerAttribute action.
func (c *ULBClient) NewUpdateLoadBalancerAttributeRequest() *UpdateLoadBalancerAttributeRequest {
	req := &UpdateLoadBalancerAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateLoadBalancerAttribute

更新一个应用型负载均衡实例的属性
*/
func (c *ULBClient) UpdateLoadBalancerAttribute(req *UpdateLoadBalancerAttributeRequest) (*UpdateLoadBalancerAttributeResponse, error) {
	var err error
	var res UpdateLoadBalancerAttributeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateLoadBalancerAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdatePolicyRequest is request schema for UpdatePolicy action
type UpdatePolicyRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 内容转发策略应用的后端资源实例的ID（CLB的后端节点Id），来源于 AllocateBackend 返回的 BackendId，不传表示更新转发节点为空
	BackendId []string `required:"false"`

	// 内容转发规则中域名的匹配方式，默认与原本一致。枚举值：Regular，正则；Wildcard，泛域名
	DomainMatchMode *string `required:"false"`

	// 内容转发匹配字段
	Match *string `required:"true"`

	// 传统型负载均衡转发规则的ID，当Type为Default时，可以不传或为空
	PolicyId *string `required:"false"`

	// 策略优先级，1-9999；只针对路径规则生效
	PolicyPriority *int `required:"false"`

	// 内容转发匹配字段的类型，枚举值：Domain -> 域名转发规则；Path -> 路径转发规则；Default -> 默认转发规则，不传默认值Domain
	Type *string `required:"false"`

	// 需要添加内容转发策略的传统型负载均衡实例ID
	ULBId *string `required:"true"`

	// 需要添加内容转发策略的VServer实例ID，只支持请求代理模式下，HTTP或HTTPS协议的CLB下的VServer
	VServerId *string `required:"true"`
}

// UpdatePolicyResponse is response schema for UpdatePolicy action
type UpdatePolicyResponse struct {
	response.CommonBase

	// 【该字段已废弃，请谨慎使用】
	PolicyId string `deprecated:"true"`
}

// NewUpdatePolicyRequest will create request of UpdatePolicy action.
func (c *ULBClient) NewUpdatePolicyRequest() *UpdatePolicyRequest {
	req := &UpdatePolicyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdatePolicy

更新传统型负载均衡内容转发规则，包括转发规则后的服务节点
*/
func (c *ULBClient) UpdatePolicy(req *UpdatePolicyRequest) (*UpdatePolicyResponse, error) {
	var err error
	var res UpdatePolicyResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdatePolicy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdatePolicyGroupAttributeRequest is request schema for UpdatePolicyGroupAttribute action
type UpdatePolicyGroupAttributeRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// 内容转发策略组ID
	GroupId *string `required:"true"`

	// 修改策略转发组名称
	GroupName *string `required:"false"`
}

// UpdatePolicyGroupAttributeResponse is response schema for UpdatePolicyGroupAttribute action
type UpdatePolicyGroupAttributeResponse struct {
	response.CommonBase
}

// NewUpdatePolicyGroupAttributeRequest will create request of UpdatePolicyGroupAttribute action.
func (c *ULBClient) NewUpdatePolicyGroupAttributeRequest() *UpdatePolicyGroupAttributeRequest {
	req := &UpdatePolicyGroupAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdatePolicyGroupAttribute

更新内容转发策略组属性
*/
func (c *ULBClient) UpdatePolicyGroupAttribute(req *UpdatePolicyGroupAttributeRequest) (*UpdatePolicyGroupAttributeResponse, error) {
	var err error
	var res UpdatePolicyGroupAttributeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdatePolicyGroupAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
UpdateRuleAttributeParamRuleActionsForwardConfigTargets is request schema for complex param
*/
type UpdateRuleAttributeParamRuleActionsForwardConfigTargets struct {

	// 转发的后端服务节点的标识ID。限定在监听器的服务节点池里；数组长度可以是0；转发服务节点配置的数组长度不为0时，Id必填
	Id *string `required:"false"`

	// 转发的后端服务节点的权重。仅监听器负载均衡算法是加权轮询是有效
	Weight *int `required:"false"`
}

/*
UpdateRuleAttributeParamRuleConditionsPathConfig is request schema for complex param
*/
type UpdateRuleAttributeParamRuleConditionsPathConfig struct {

	// 取值。暂时只支持数组长度为1；取值需符合相关条件；修改路径匹配时必填
	Values []string `required:"false"`
}

/*
UpdateRuleAttributeParamRuleConditionsHostConfig is request schema for complex param
*/
type UpdateRuleAttributeParamRuleConditionsHostConfig struct {

	// 匹配方式。限定枚举值："Regular"/"Wildcard"，默认值："Regular"
	MatchMode *string `required:"false"`

	// 取值。暂时只支持数组长度为1；取值需符合相关匹配方式的条件；修改域名匹配时必填
	Values []string `required:"false"`
}

/*
UpdateRuleAttributeParamRuleActionsForwardConfig is request schema for complex param
*/
type UpdateRuleAttributeParamRuleActionsForwardConfig struct {

	//
	Targets []UpdateRuleAttributeParamRuleActionsForwardConfigTargets `required:"false"`
}

/*
UpdateRuleAttributeParamRuleConditions is request schema for complex param
*/
type UpdateRuleAttributeParamRuleConditions struct {

	//
	HostConfig *UpdateRuleAttributeParamRuleConditionsHostConfig `required:"false"`

	//
	PathConfig *UpdateRuleAttributeParamRuleConditionsPathConfig `required:"false"`

	// 匹配条件类型。限定枚举值："Host"/"Path"；RuleConditions数组长度不为0时必填
	Type *string `required:"false"`
}

/*
UpdateRuleAttributeParamRuleActions is request schema for complex param
*/
type UpdateRuleAttributeParamRuleActions struct {

	//
	ForwardConfig *UpdateRuleAttributeParamRuleActionsForwardConfig `required:"false"`

	// 动作类型。限定枚举值："Forward"；RuleActions数组长度不为0时必填
	Type *string `required:"false"`
}

// UpdateRuleAttributeRequest is request schema for UpdateRuleAttribute action
type UpdateRuleAttributeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 监听器的ID
	ListenerId *string `required:"true"`

	// 负载均衡实例的ID
	LoadBalancerId *string `required:"true"`

	// 当转发的服务节点为空时，规则是否忽略。默认转发规则不可更改
	Pass *bool `required:"false"`

	//
	RuleActions []UpdateRuleAttributeParamRuleActions `required:"false"`

	//
	RuleConditions []UpdateRuleAttributeParamRuleConditions `required:"false"`

	// 转发规则的ID
	RuleId *string `required:"true"`
}

// UpdateRuleAttributeResponse is response schema for UpdateRuleAttribute action
type UpdateRuleAttributeResponse struct {
	response.CommonBase
}

// NewUpdateRuleAttributeRequest will create request of UpdateRuleAttribute action.
func (c *ULBClient) NewUpdateRuleAttributeRequest() *UpdateRuleAttributeRequest {
	req := &UpdateRuleAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateRuleAttribute

更新应用型负载均衡监听器的一条转发规则的属性
*/
func (c *ULBClient) UpdateRuleAttribute(req *UpdateRuleAttributeRequest) (*UpdateRuleAttributeResponse, error) {
	var err error
	var res UpdateRuleAttributeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateRuleAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateSSLAttributeRequest is request schema for UpdateSSLAttribute action
type UpdateSSLAttributeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// SSL的资源id
	SSLId *string `required:"true"`

	// SSL实例名称，不允许传空
	SSLName *string `required:"true"`
}

// UpdateSSLAttributeResponse is response schema for UpdateSSLAttribute action
type UpdateSSLAttributeResponse struct {
	response.CommonBase
}

// NewUpdateSSLAttributeRequest will create request of UpdateSSLAttribute action.
func (c *ULBClient) NewUpdateSSLAttributeRequest() *UpdateSSLAttributeRequest {
	req := &UpdateSSLAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateSSLAttribute

更新修改SSL的属性，如：修改SSLName
*/
func (c *ULBClient) UpdateSSLAttribute(req *UpdateSSLAttributeRequest) (*UpdateSSLAttributeResponse, error) {
	var err error
	var res UpdateSSLAttributeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateSSLAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateSSLBindingRequest is request schema for UpdateSSLBinding action
type UpdateSSLBindingRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 所操作监听器实例ID（仅ListenerId传参时，将更换该监听器所有原证书为OldSSLId的绑定关系；LoadBalancerId和ListenerId都不传参则将更新该项目下所有原证书为OldSSLId的绑定关系；若LoadBalancerId与ListenerId皆有传参，则会强校验ULB与Vsserver的所属关系，将更换该ulb下vserver所绑定的OldSSLId为NewSSLId）（监听器指VServer或Listener）
	ListenerId *string `required:"false"`

	// 所操作LB实例ID（仅LoadBalancerId传参时，将更换该LB所有原证书为OldSSLId的绑定关系；LoadBalancerId和ListenerId都不传参则将更新该项目下所有原证书为OldSSLId的绑定关系）（LB指CLB或ALB）
	LoadBalancerId *string `required:"false"`

	// 监听器实例需要绑定的新的证书
	NewSSLId *string `required:"true"`

	// 监听器实例绑定的旧的证书
	OldSSLId *string `required:"true"`
}

// UpdateSSLBindingResponse is response schema for UpdateSSLBinding action
type UpdateSSLBindingResponse struct {
	response.CommonBase
}

// NewUpdateSSLBindingRequest will create request of UpdateSSLBinding action.
func (c *ULBClient) NewUpdateSSLBindingRequest() *UpdateSSLBindingRequest {
	req := &UpdateSSLBindingRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateSSLBinding

将传统型或应用型负载均衡监听器绑定的证书更换为另一个证书，
*/
func (c *ULBClient) UpdateSSLBinding(req *UpdateSSLBindingRequest) (*UpdateSSLBindingResponse, error) {
	var err error
	var res UpdateSSLBindingResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateSSLBinding", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateSecurityPolicyRequest is request schema for UpdateSecurityPolicy action
type UpdateSecurityPolicyRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 加密套件，TLS最低版本和加密套件必须全不为空或全为空
	SSLCiphers []string `required:"false"`

	// 安全策略ID
	SecurityPolicyId *string `required:"true"`

	// 安全策略名称
	SecurityPolicyName *string `required:"false"`

	// TLS最低版本，TLS最低版本和加密套件必须全不为空或全为空
	TLSVersion *string `required:"false"`
}

// UpdateSecurityPolicyResponse is response schema for UpdateSecurityPolicy action
type UpdateSecurityPolicyResponse struct {
	response.CommonBase
}

// NewUpdateSecurityPolicyRequest will create request of UpdateSecurityPolicy action.
func (c *ULBClient) NewUpdateSecurityPolicyRequest() *UpdateSecurityPolicyRequest {
	req := &UpdateSecurityPolicyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateSecurityPolicy

更新安全策略
*/
func (c *ULBClient) UpdateSecurityPolicy(req *UpdateSecurityPolicyRequest) (*UpdateSecurityPolicyResponse, error) {
	var err error
	var res UpdateSecurityPolicyResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateSecurityPolicy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

/*
UpdateTargetsAttributeParamTargets is request schema for complex param
*/
type UpdateTargetsAttributeParamTargets struct {

	// 服务节点是否启用。默认值true；要更新的Targets数组长度至少为1，不超过20个
	Enabled *bool `required:"false"`

	// 服务节点的标识ID。限定枚举值："UHost" / "UNI"/"UPM"/"IP"；要更新的Targets数组长度至少为1，不超过20个
	Id *string `required:"false"`

	// 服务节点是否为备节点。默认值false；要更新的Targets数组长度至少为1，不超过20个
	IsBackup *bool `required:"false"`

	// 服务节点的权重。限定取值：[1-100]，默认值1；仅在加权轮询算法时有效；要更新的Targets数组长度至少为1，不超过20个
	Weight *int `required:"false"`
}

// UpdateTargetsAttributeRequest is request schema for UpdateTargetsAttribute action
type UpdateTargetsAttributeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 监听器的ID
	ListenerId *string `required:"true"`

	// 负载均衡实例的ID
	LoadBalancerId *string `required:"true"`

	//
	Targets []UpdateTargetsAttributeParamTargets `required:"false"`
}

// UpdateTargetsAttributeResponse is response schema for UpdateTargetsAttribute action
type UpdateTargetsAttributeResponse struct {
	response.CommonBase
}

// NewUpdateTargetsAttributeRequest will create request of UpdateTargetsAttribute action.
func (c *ULBClient) NewUpdateTargetsAttributeRequest() *UpdateTargetsAttributeRequest {
	req := &UpdateTargetsAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateTargetsAttribute

更新应用型负载均衡监听器后端服务节点的属性
*/
func (c *ULBClient) UpdateTargetsAttribute(req *UpdateTargetsAttributeRequest) (*UpdateTargetsAttributeResponse, error) {
	var err error
	var res UpdateTargetsAttributeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateTargetsAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateULBAttributeRequest is request schema for UpdateULBAttribute action
type UpdateULBAttributeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 设置用于存储ulb日志的bucket
	BucketName *string `required:"false"`

	// 日志开关，1代表开启日志，0代表关闭日志，传1时必须同时传BucketName，TokenName与TokenId二选一
	EnableLog *int `required:"false"`

	// 是否开启WAF。枚举类型：Yes，No，默认值为No
	IsWAFOn *string `required:"false"`

	// 名字，不传则默认不修改
	Name *string `required:"false"`

	// 备注，不传则默认不修改
	Remark *string `required:"false"`

	// 业务，不传则默认不修改
	Tag *string `required:"false"`

	// 用于指定上传到bucket所需的token，与TokenName选填其一即可
	TokenId *string `required:"false"`

	// 用于指定上传到bucket所需的token，与TokenId选填其一即可
	TokenName *string `required:"false"`

	// CLB资源ID
	ULBId *string `required:"true"`
}

// UpdateULBAttributeResponse is response schema for UpdateULBAttribute action
type UpdateULBAttributeResponse struct {
	response.CommonBase
}

// NewUpdateULBAttributeRequest will create request of UpdateULBAttribute action.
func (c *ULBClient) NewUpdateULBAttributeRequest() *UpdateULBAttributeRequest {
	req := &UpdateULBAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateULBAttribute

更新CLB名字业务组备注等属性字段
*/
func (c *ULBClient) UpdateULBAttribute(req *UpdateULBAttributeRequest) (*UpdateULBAttributeResponse, error) {
	var err error
	var res UpdateULBAttributeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateULBAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateVServerAttributeRequest is request schema for UpdateVServerAttribute action
type UpdateVServerAttributeRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 请求代理的VServer下表示空闲连接的回收时间，单位：秒，取值范围：时(0，86400]，默认值为60；报文转发的VServer下表示回话保持的时间，单位：秒，取值范围：[60，900]，0 表示禁用连接保持
	ClientTimeout *int `required:"false"`

	// MonitorType 为 Path 时指定健康检查发送请求时HTTP HEADER 里的域名
	Domain *string `required:"false"`

	// 0:关闭 1:开启，用于数据压缩功能
	EnableCompression *int `required:"false"`

	// 0:关闭 1:开启，用于开启http2功能；默认值为0
	EnableHTTP2 *int `required:"false"`

	// 重定向端口，取值范围[0-65535]；默认值为0，代表关闭；仅HTTP协议支持开启重定向功能
	ForwardPort *int `required:"false"`

	// VServer负载均衡模式，枚举值：Roundrobin -> 轮询;Source -> 源地址；ConsistentHash -> 一致性哈希；SourcePort -> 源地址（计算端口）；ConsistentHashPort -> 一致性哈希（计算端口）; WeightRoundrobin -> 加权轮询; Leastconn -> 最小连接数；Backup -> 主备模式。ConsistentHash，SourcePort，ConsistentHashPort 只在报文转发中使用；Leastconn只在请求代理中使用；Roundrobin、Source和WeightRoundrobin,Backup在请求代理和报文转发中使用。默认为："Roundrobin"
	Method *string `required:"false"`

	// 健康检查类型，枚举值：Port -> 端口检查；Path -> 路径检查；Ping -> Ping探测，Customize -> UDP检查请求代理型默认值为Port，其中TCP协议仅支持Port，其他协议支持Port和Path;报文转发型TCP协议仅支持Port，UDP协议支持Ping、Port和Customize，默认值为Ping
	MonitorType *string `required:"false"`

	// MonitorType 为 Path 时指定健康检查发送请求时的路径，默认为 /
	Path *string `required:"false"`

	// 根据PersistenceType确定: None或ServerInsert, 此字段无意义; UserDefined, 则此字段传入用户自定义会话保持String. 若无此字段则不做修改
	PersistenceInfo *string `required:"false"`

	// VServer会话保持模式，若无此字段则不做修改。枚举值：None：关闭；ServerInsert：自动生成KEY；UserDefined：用户自定义KEY。
	PersistenceType *string `required:"false"`

	// 【该字段已废弃，请谨慎使用】
	Protocol *string `required:"false" deprecated:"true"`

	// 根据MonitorType确认； 当MonitorType为Customize时，此字段有意义，代表UDP检查发出的请求报文
	RequestMsg *string `required:"false"`

	// 根据MonitorType确认； 当MonitorType为Customize时，此字段有意义，代表UDP检查请求应收到的响应报文
	ResponseMsg *string `required:"false"`

	// 安全策略组ID
	SecurityPolicyId *string `required:"false"`

	// 传统型负载均衡实例ID
	ULBId *string `required:"true"`

	// 传统型负载均衡VServer实例ID
	VServerId *string `required:"true"`

	// VServer实例名称，若无此字段则不做修改
	VServerName *string `required:"false"`
}

// UpdateVServerAttributeResponse is response schema for UpdateVServerAttribute action
type UpdateVServerAttributeResponse struct {
	response.CommonBase
}

// NewUpdateVServerAttributeRequest will create request of UpdateVServerAttribute action.
func (c *ULBClient) NewUpdateVServerAttributeRequest() *UpdateVServerAttributeRequest {
	req := &UpdateVServerAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateVServerAttribute

更新传统型负载均衡VServer实例属性
*/
func (c *ULBClient) UpdateVServerAttribute(req *UpdateVServerAttributeRequest) (*UpdateVServerAttributeResponse, error) {
	var err error
	var res UpdateVServerAttributeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateVServerAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}
